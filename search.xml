<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java8新特性——Lambda表达式及Stream API</title>
      <link href="/blog/2021/05/02/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8AStream%E6%B5%81/"/>
      <url>/blog/2021/05/02/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8AStream%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Java8新特性——Lambda表达式及Stream-API"><a href="#Java8新特性——Lambda表达式及Stream-API" class="headerlink" title="Java8新特性——Lambda表达式及Stream API"></a>Java8新特性——Lambda表达式及Stream API</h1><h2 id="一、Lambda表达式"><a href="#一、Lambda表达式" class="headerlink" title="一、Lambda表达式"></a>一、Lambda表达式</h2><h3 id="1、为什么会使用Lambda表达式"><a href="#1、为什么会使用Lambda表达式" class="headerlink" title="1、为什么会使用Lambda表达式"></a>1、为什么会使用Lambda表达式</h3><p>&emsp;&emsp;Lambda是一个匿名函数，可以理解为一段可以传递的代码（将代码像数据一样传递）；可以写出<font color="red"><strong>更简洁、更灵活的代码</strong></font>；作为一种更紧凑的代码风格，是Java语言表达能力得到提升。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//匿名内部类的写法</span></span><br><span class="line">    Comparable&lt;Integer&gt; comparable = <span class="keyword">new</span> Comparable&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Integer o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o+<span class="number">1111</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparable.compareTo(<span class="number">100</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;--------------------------------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//Lambda表达式的写法</span></span><br><span class="line">    comparable = (num) -&gt; num+<span class="number">1314</span>;</span><br><span class="line">    System.out.println(comparable.compareTo(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7&emsp;&emsp;从上述代码可以看出，原本六行代码压缩成了一行解决，而且能够解决相同的问题。</p><h3 id="2、Lambda表达式的使用格式"><a href="#2、Lambda表达式的使用格式" class="headerlink" title="2、Lambda表达式的使用格式"></a>2、Lambda表达式的使用格式</h3><p><font color="red">*Lambda 表达式 参数的数据类型可以省略不写是因为 Jvm可以自动进行 “类型推断”</font></p><h4 id="2-1、格式1：无参数，无返回值"><a href="#2-1、格式1：无参数，无返回值" class="headerlink" title="2.1、格式1：无参数，无返回值"></a>2.1、格式1：无参数，无返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**测试Lambda表达式语法格式1：无参数，无返回值：() -&gt; sout*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;测试Lambda表达式语法格式1：无参数，无返回值：() -&gt; sout——原方式&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------------------------&quot;</span>);</span><br><span class="line">        Runnable runnable = () -&gt; System.out.println(<span class="string">&quot;测试Lambda表达式语法格式1：无参数，无返回值：() -&gt; sout——Lambda方式&quot;</span>);</span><br><span class="line">        runnable.run();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、格式2：有参数，无返回值"><a href="#2-2、格式2：有参数，无返回值" class="headerlink" title="2.2、格式2：有参数，无返回值"></a>2.2、格式2：有参数，无返回值</h4><p><font color="red">*参数的括号可以不写</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Consumer&lt;String&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.accept(<span class="string">&quot;测试Lambda表达式语法格式2：有参数，无返回值&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------------------------&quot;</span>);</span><br><span class="line">        Consumer&lt;String&gt; consumer = x -&gt; System.out.println(x);</span><br><span class="line">        consumer.accept(<span class="string">&quot;测试Lambda表达式语法格式2：有参数，无返回值&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、格式3：有两个及以上的参数，有返回值"><a href="#2-3、格式3：有两个及以上的参数，有返回值" class="headerlink" title="2.3、格式3：有两个及以上的参数，有返回值"></a>2.3、格式3：有两个及以上的参数，有返回值</h4><p><font color="red">*Lambda体只有一条语句，则不需要写return和大括号，否则都要写</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> compare = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1 + o2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.compare(<span class="number">12</span>, <span class="number">23</span>);</span><br><span class="line">    System.out.println(compare);</span><br><span class="line">    System.out.println(<span class="string">&quot;--------------------------------------------------&quot;</span>);</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (o1, o2) -&gt; o1 - o2;</span><br><span class="line">    System.out.println(comparator.compare(<span class="number">100</span>, <span class="number">98</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、函数式接口"><a href="#3、函数式接口" class="headerlink" title="3、函数式接口"></a>3、函数式接口</h3><h4 id="3-1、函数式接口"><a href="#3-1、函数式接口" class="headerlink" title="3.1、函数式接口"></a>3.1、函数式接口</h4><ul><li>接口中只有一个抽象方法的接口 ，可使用@FunctionalIterface进行校验,符合函数式接口的类才可以使用Lambda表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunTion</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">checkStr</span><span class="params">(T str1,T str2,T str3)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyFunTion&lt;Integer&gt; myFunTion = (str1,str2,str3) -&gt; str1 + str2 + str3;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行结果：&quot;</span>+myFunTion.checkStr(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------------------------&quot;</span>);</span><br><span class="line">        MyFunTion&lt;String&gt; myFunTion2 = (str1,str2,str3) -&gt; str1 + str2 + str3;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行结果：&quot;</span>+myFunTion2.checkStr(<span class="string">&quot;今天&quot;</span>, <span class="string">&quot;天气&quot;</span>, <span class="string">&quot;真好！！&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行结果：6</span><br><span class="line">--------------------------------------------------</span><br><span class="line">执行结果：今天天气真好！！</span><br></pre></td></tr></table></figure><h4 id="3-2、Java内置四大核心函数式接口"><a href="#3-2、Java内置四大核心函数式接口" class="headerlink" title="3.2、Java内置四大核心函数式接口"></a>3.2、Java内置四大核心函数式接口</h4><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td>Consumer<br/>消费型接口</td><td>T</td><td>void</td><td>对类型为T的对象应用操作：void accept(T t)</td></tr><tr><td>Supplier<br/>提供型接口</td><td>无</td><td>T</td><td>返回类型为T的对象：T get()</td></tr><tr><td>Function&lt;T, R&gt;<br/>函数型接口</td><td>T</td><td>R</td><td>对类型为T的对象应用操作，并返回结果为R类型的对象：R apply(T t)</td></tr><tr><td>Predicate<br/>断言型接口</td><td>T</td><td>boolean</td><td>确定类型为T的对象是否满足某约束，并返回boolean值：boolean test(T t)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------测试消费型接口--------------------------&quot;</span>);</span><br><span class="line">        Consumer&lt;String&gt; consumer = x -&gt; System.out.println(x);</span><br><span class="line">        consumer.accept(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------测试提供型接口--------------------------&quot;</span>);</span><br><span class="line">        Supplier&lt;String&gt; stringSupplier = () -&gt; <span class="string">&quot;提供回复超科技福克斯&quot;</span>;</span><br><span class="line">        System.out.println(stringSupplier.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------测试函数型接口--------------------------&quot;</span>);</span><br><span class="line">        Function&lt;String,Integer&gt; getStringlenth = x -&gt; x.length();</span><br><span class="line">        System.out.println(<span class="string">&quot;ugsfgcuhi的长度是：&quot;</span>+getStringlenth.apply(<span class="string">&quot;ugsfgcuhi&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------测试断言型接口--------------------------&quot;</span>);</span><br><span class="line">        Predicate&lt;String&gt; predicate = x -&gt; x.equals(<span class="string">&quot;华为&quot;</span>);</span><br><span class="line">        System.out.println(predicate.test(<span class="string">&quot;华为&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-3、Java其他函数式接口"><a href="#3-3、Java其他函数式接口" class="headerlink" title="3.3、Java其他函数式接口"></a>3.3、Java其他函数式接口</h4><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td>BiFunction&lt;T,U,R&gt;</td><td>T,U</td><td>R</td><td>T,U作为参数，R作为结果，方法是<br/>R apply(T t,U u);</td></tr><tr><td>UnaryOperator<T></td><td>T</td><td>T</td><td>对类型为T的对象进行一元运算，返回T类型的结果<br/>T apply(T t)；</td></tr><tr><td>BinaryOperator<T></td><td>T ,T</td><td>T</td><td>对类型为T的对象进行二元运算，返回T类型的结果<br/>T apply(T t1，T t2)；</td></tr><tr><td>BiConsumer&lt;T,U&gt;</td><td>T,U</td><td>void</td><td>T,U作为参数，没有返回结果，方法是<br/>void accept(T t,U u);</td></tr><tr><td>ToIntFunction<T><br/>ToLongFunction<T><br/>ToDoubleFunction<T></td><td>T</td><td>int<br/>long<br/>double</td><td>分别计算int 、long、double的函数</td></tr><tr><td>IntFunction<T><br/>LongFunction<T><br/>DoubleFunction<T></td><td>int<br/>long<br/>double</td><td>T</td><td>参数分别为int 、long、double的函数</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------测试BiFunction接口----------------------&quot;</span>);</span><br><span class="line">        BiFunction&lt;String,Integer,Boolean&gt; booleanBiFunction = (x,y) -&gt; x.length() == y;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结果：&quot;</span>+booleanBiFunction.apply(<span class="string">&quot;换位思考&quot;</span>, <span class="number">4</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------测试UnaryOperator接口----------------------&quot;</span>);</span><br><span class="line">        UnaryOperator&lt;String&gt; unaryOperator = x -&gt; x.replaceAll(<span class="string">&quot;sa&quot;</span>,<span class="string">&quot;ka&quot;</span>);</span><br><span class="line">        System.out.println(unaryOperator.apply(<span class="string">&quot;sakasaka&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------测试BinaryOperator接口---------------------&quot;</span>);</span><br><span class="line">        BinaryOperator&lt;Integer&gt; binaryOperator = (x,y) -&gt; x + x + y;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算结果：&quot;</span>+binaryOperator.apply(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------测试BiConsumer接口-------------------------&quot;</span>);</span><br><span class="line">        BiConsumer&lt;String,Integer&gt; biConsumer = (x,y) -&gt; System.out.println(x+<span class="string">&quot;---&quot;</span>+y);</span><br><span class="line">        biConsumer.accept(<span class="string">&quot;你好&quot;</span>,<span class="number">666</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------测试ToLongFunction接口---------------------&quot;</span>);</span><br><span class="line">        ToLongFunction&lt;String&gt; toLongFunction = x -&gt; x.length();</span><br><span class="line">        System.out.println(toLongFunction.applyAsLong(<span class="string">&quot;feyugbqiFBUKEHIOHNFOUEW&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------测试DoubleFunction接口--------------------&quot;</span>);</span><br><span class="line">        DoubleFunction&lt;Double&gt; doubleFunction = x -&gt; x*<span class="number">0.1</span>;</span><br><span class="line">        System.out.println(doubleFunction.apply(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4、引用"><a href="#4、引用" class="headerlink" title="4、引用"></a>4、引用</h3><h4 id="4-1、方法引用"><a href="#4-1、方法引用" class="headerlink" title="4.1、方法引用"></a>4.1、方法引用</h4><h5 id="4-1-1、方法引用的定义："><a href="#4-1-1、方法引用的定义：" class="headerlink" title="4.1.1、方法引用的定义："></a>4.1.1、方法引用的定义：</h5><p>&emsp;&emsp;若 Lambda 表达式体中的内容已有方法实现，则我们可以使用“方法引用”</p><h5 id="4-1-2、方法引用的格式："><a href="#4-1-2、方法引用的格式：" class="headerlink" title="4.1.2、方法引用的格式："></a>4.1.2、方法引用的格式：</h5><ul><li><p>对象 :: 实例方法</p></li><li><p>类 :: 静态方法</p></li><li><p>类 :: 实例方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer = x -&gt; System.out.println(x);</span><br><span class="line">        consumer.accept(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------测试对象 :: 实例方法----------&quot;</span>);</span><br><span class="line">        consumer = System.out::println;</span><br><span class="line">        consumer.accept(<span class="string">&quot;测试方法引用&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注意：Lambda 表达实体中调用方法的参数列表、返回类型必须和函数式接口中抽象方法保持一致</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; comparator = (x,y) -&gt; Integer.compare(x,y);</span><br><span class="line">        System.out.println(comparator.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------测试 类 :: 静态方法--------------------&quot;</span>);</span><br><span class="line">        Comparator&lt;Integer&gt; com =  Integer::compare;</span><br><span class="line">        System.out.println(com.compare(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BiPredicate&lt;String,String&gt; biPredicate = (x,y) -&gt; x.equals(y);</span><br><span class="line">        System.out.println(biPredicate.test(<span class="string">&quot;山&quot;</span>, <span class="string">&quot;水&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------测试 类::实例方法--------------------&quot;</span>);</span><br><span class="line">        BiPredicate&lt;String,String&gt; biPredicate2 = String::equals;</span><br><span class="line">        System.out.println(biPredicate2.test(<span class="string">&quot;山&quot;</span>, <span class="string">&quot;山&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注意：Lambda 参数列表中的第一个参数是方法的调用者，第二个参数是方法的参数时，才能使用 ClassName :: Method</p><h4 id="4-2、构造器引用"><a href="#4-2、构造器引用" class="headerlink" title="4.2、构造器引用"></a>4.2、构造器引用</h4><p>&emsp;&emsp;格式：ClassName :: new</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Supplier&lt;List&gt; supplier = () -&gt; <span class="keyword">new</span> ArrayList();</span><br><span class="line">        List list = supplier.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------测试 ClassName :: new-----------------&quot;</span>);</span><br><span class="line">        Supplier&lt;Set&gt; setSupplier = HashSet::<span class="keyword">new</span>;</span><br><span class="line">        Set set = setSupplier.get();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注意：需要调用的构造器的参数列表要与函数时接口中抽象方法的参数列表保持一致</p><h4 id="4-3、数组引用"><a href="#4-3、数组引用" class="headerlink" title="4.3、数组引用"></a>4.3、数组引用</h4><p>&emsp;&emsp;格式：Type:: new</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------匿名内部类写法--------------------&quot;</span>);</span><br><span class="line">        Function&lt;Integer, String[]&gt; function = <span class="keyword">new</span> Function&lt;Integer, String[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String[] apply(Integer t) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String[t];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        String[] array = function.apply(<span class="number">5</span>);</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------Lambda表达式写法--------------------&quot;</span>);</span><br><span class="line">        Function&lt;Integer, String[]&gt; function1 = t -&gt; <span class="keyword">new</span> String[t];</span><br><span class="line">        System.out.println(Arrays.toString(function1.apply(<span class="number">5</span>)));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------类型引用写法--------------------&quot;</span>);</span><br><span class="line">        Function&lt;Integer, String[]&gt; function2 = String[]::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(Arrays.toString(function2.apply(<span class="number">5</span>)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5、Lambda表达式应用"><a href="#5、Lambda表达式应用" class="headerlink" title="5、Lambda表达式应用"></a>5、Lambda表达式应用</h3><p>&emsp;&emsp;Lambda表达式一般我们会用于重写某个匿名内部类的方法或者是遍历集合，但除此之外，其实还有某些地方会使用，如：</p><h4 id="5-1、lambda表达式快速创建线程"><a href="#5-1、lambda表达式快速创建线程" class="headerlink" title="5.1、lambda表达式快速创建线程"></a>5.1、lambda表达式快速创建线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;,String.valueOf(i)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2、集合中删除某些指定元素，或对元素进行排序"><a href="#5-2、集合中删除某些指定元素，或对元素进行排序" class="headerlink" title="5.2、集合中删除某些指定元素，或对元素进行排序"></a>5.2、集合中删除某些指定元素，或对元素进行排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    list.removeIf(str -&gt; str.equals(<span class="string">&quot;C&quot;</span>));</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list2.add(<span class="number">33</span>);</span><br><span class="line">    list2.add(<span class="number">12</span>);</span><br><span class="line">    list2.add(<span class="number">78</span>);</span><br><span class="line">    list2.sort((o1,o2) -&gt; o1 - o2);</span><br><span class="line">    System.out.println(list2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210502165539248.png" alt="image-20210502165539248"></p><h2 id="二、Stream-API"><a href="#二、Stream-API" class="headerlink" title="二、Stream API"></a>二、Stream API</h2><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210502170210419.png" alt="image-20210502170210419"></p><h3 id="1、什么是stream？"><a href="#1、什么是stream？" class="headerlink" title="1、什么是stream？"></a>1、什么是stream？</h3><p>&emsp;&emsp;stream将要处理的元素集合看作一种流，在流的过程中，借助<code>Stream API</code>对流中的元素进行操作，比如：筛选、排序、聚合等。</p><h4 id="1-1、stream可以由数组或集合创建，对流的操作分为两种："><a href="#1-1、stream可以由数组或集合创建，对流的操作分为两种：" class="headerlink" title="1.1、stream可以由数组或集合创建，对流的操作分为两种："></a>1.1、stream可以由数组或集合创建，对流的操作分为两种：</h4><ul><li>中间操作，每次返回一个新的流，可以有多个。</li><li>终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。</li></ul><h4 id="1-2、stream的特性："><a href="#1-2、stream的特性：" class="headerlink" title="1.2、stream的特性："></a>1.2、stream的特性：</h4><ul><li>stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。</li><li>stream不会改变数据源，通常情况下会产生一个新的集合或一个值。</li><li>stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</li></ul><h3 id="2、Stream的创建"><a href="#2、Stream的创建" class="headerlink" title="2、Stream的创建"></a>2、Stream的创建</h3><p>&emsp;&emsp;stream可以通过集合或数组来创建，创建方式一般分为以下几种：</p><h4 id="2-1、通过-java-util-Collection-stream-方法用集合创建流"><a href="#2-1、通过-java-util-Collection-stream-方法用集合创建流" class="headerlink" title="2.1、通过 java.util.Collection.stream() 方法用集合创建流"></a>2.1、通过 <code>java.util.Collection.stream()</code> 方法用集合创建流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">// 创建一个顺序流</span></span><br><span class="line">Stream&lt;String&gt; stream = list.stream();</span><br><span class="line"><span class="comment">// 创建一个并行流</span></span><br><span class="line">Stream&lt;String&gt; parallelStream = list.parallelStream();</span><br></pre></td></tr></table></figure><h4 id="2-2、使用java-util-Arrays-stream-T-array-方法用数组创建流"><a href="#2-2、使用java-util-Arrays-stream-T-array-方法用数组创建流" class="headerlink" title="2.2、使用java.util.Arrays.stream(T[] array)方法用数组创建流"></a>2.2、使用<code>java.util.Arrays.stream(T[] array)</code>方法用数组创建流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line">IntStream stream = Arrays.stream(array);</span><br></pre></td></tr></table></figure><h4 id="2-3、使用Stream的静态方法：of-、iterate-、generate"><a href="#2-3、使用Stream的静态方法：of-、iterate-、generate" class="headerlink" title="2.3、使用Stream的静态方法：of()、iterate()、generate()"></a>2.3、使用<code>Stream</code>的静态方法：<code>of()、iterate()、generate()</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">3</span>).limit(<span class="number">4</span>);</span><br><span class="line">stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class="number">3</span>);</span><br><span class="line">stream3.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里需要注意：<code>stream</code>是顺序流，由主线程按顺序对流执行操作，而<code>parallelStream</code>是并行流，内部以多线程并行执行的方式对流进行操作，但前提是流中的数据处理没有顺序要求。例如筛选集合中的奇数，两者的处理不同之处：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210502180436589.png" alt="image-20210502180436589"></p><p>&emsp;&emsp;顺序流可以通过parallel()转换为并行流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">// 创建一个顺序流</span></span><br><span class="line">Stream&lt;String&gt; stream = list.stream();</span><br><span class="line"><span class="comment">//将一个顺序流转换为一个并行流</span></span><br><span class="line">Stream&lt;String&gt; parallel = stream.parallel();</span><br></pre></td></tr></table></figure><h3 id="3、stream的使用"><a href="#3、stream的使用" class="headerlink" title="3、stream的使用"></a>3、stream的使用</h3><p>案例准备代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.g4b.juc.java8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary; <span class="comment">// 薪资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> String sex; <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> String area;  <span class="comment">// 地区</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>,<span class="number">18</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="number">23</span>,<span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>,<span class="number">27</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">&quot;Anni&quot;</span>, <span class="number">8200</span>,<span class="number">39</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">&quot;Owen&quot;</span>, <span class="number">9500</span>,<span class="number">32</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">&quot;Alisa&quot;</span>, <span class="number">7900</span>,<span class="number">45</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(personList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1、遍历-匹配（foreach-find-match）"><a href="#3-1、遍历-匹配（foreach-find-match）" class="headerlink" title="3.1、遍历/匹配（foreach/find/match）"></a>3.1、遍历/匹配（foreach/find/match）</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/2020110914450139.png" alt="2020110914450139"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//匹配第一个符合条件的值</span></span><br><span class="line">    Optional&lt;Integer&gt; first = list.stream().filter(x -&gt; x &gt; <span class="number">6</span>).findFirst();</span><br><span class="line">    System.out.println(<span class="string">&quot;第一个符合条件的值：&quot;</span>+first.get());</span><br><span class="line">    <span class="comment">//匹配任意一个符合条件的值，适合使用并行流</span></span><br><span class="line">    Optional&lt;Integer&gt; any = list.parallelStream().filter(x -&gt; x &gt; <span class="number">6</span>).findAny();</span><br><span class="line">    System.out.println(<span class="string">&quot;任意一个符合条件的值：&quot;</span>+any.get());</span><br><span class="line">    <span class="comment">//是否存在大于6的值</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = list.stream().anyMatch(x -&gt; x &gt; <span class="number">6</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;是否存在大于6的值：&quot;</span>+flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">第一个符合条件的值：<span class="number">7</span></span><br><span class="line">任意一个符合条件的值：<span class="number">8</span></span><br><span class="line">是否存在大于<span class="number">6</span>的值：<span class="keyword">true</span></span><br></pre></td></tr></table></figure><h4 id="3-2、筛选（filter）"><a href="#3-2、筛选（filter）" class="headerlink" title="3.2、筛选（filter）"></a>3.2、筛选（filter）</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/20201109144706541.jpg" alt="20201109144706541"></p><p>测试目标：输出员工中工资高于8000的人的姓名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; nameResultList = personList.stream().filter(x -&gt; x.getSalary() &gt; <span class="number">8000</span>).map(Person::getName).collect(Collectors.toList());</span><br><span class="line">    System.out.println(nameResultList.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">[Tom, Anni, Owen]</span><br></pre></td></tr></table></figure><h4 id="3-3、聚合（max-min-count"><a href="#3-3、聚合（max-min-count" class="headerlink" title="3.3、聚合（max/min/count)"></a>3.3、聚合（max/min/count)</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210502230035630.png" alt="image-20210502230035630"></p><p>测试目标1：输出员工中工资最高的人的姓名</p><p>测试目标2：输出员工中工资高于8000的人数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String maxSalaryer = personList.stream().max(Comparator.comparing(Person::getSalary)).map(Person::getName).get();</span><br><span class="line">    System.out.println(<span class="string">&quot;员工中工资最高的人是：&quot;</span>+maxSalaryer);</span><br><span class="line">    <span class="keyword">long</span> count = personList.stream().filter(x -&gt; x.getSalary() &gt; <span class="number">8000</span>).count();</span><br><span class="line">    System.out.println(<span class="string">&quot;员工中工资高于8000的总人数是：&quot;</span>+count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">员工中工资最高的人是：Owen</span><br><span class="line">员工中工资高于<span class="number">8000</span>的总人数是：<span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="3-4、映射-map-flatMap"><a href="#3-4、映射-map-flatMap" class="headerlink" title="3.4、映射(map/flatMap)"></a>3.4、映射(map/flatMap)</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/20201109145252340.jpg" alt="20201109145252340"></p><p>测试目标：给每位员工的薪资提高1000元，测试操作原来的集合和不操作原来的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Person&gt; newPersonList = personList.stream().map(person -&gt; &#123;</span><br><span class="line">        Person newPerson = <span class="keyword">new</span> Person(person.getName(),person.getSalary()+ <span class="number">1000</span>, person.getAge(), person.getSex(), person.getArea());</span><br><span class="line">        <span class="keyword">return</span> newPerson;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;不操作原集合提薪前的集合：&quot;</span>+personList);</span><br><span class="line">    System.out.println(<span class="string">&quot;不操作原集合提薪后的集合：&quot;</span>+newPersonList);</span><br><span class="line">    List&lt;Person&gt; newPersonList2 = personList.stream().map(person -&gt; &#123;</span><br><span class="line">        person.setSalary(person.getSalary() + <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;操作原集合提薪前的集合：&quot;</span>+personList);</span><br><span class="line">    System.out.println(<span class="string">&quot;操作原集合提薪后的集合：&quot;</span>+newPersonList2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">不操作原集合提薪前的集合：[Person(name=Tom, salary=<span class="number">8900</span>, age=<span class="number">18</span>, sex=male, area=New York), Person(name=Jack, salary=<span class="number">7000</span>, age=<span class="number">23</span>, sex=male, area=Washington), Person(name=Lily, salary=<span class="number">7800</span>, age=<span class="number">27</span>, sex=female, area=Washington), Person(name=Anni, salary=<span class="number">8200</span>, age=<span class="number">39</span>, sex=female, area=New York), Person(name=Owen, salary=<span class="number">9500</span>, age=<span class="number">32</span>, sex=male, area=New York), Person(name=Alisa, salary=<span class="number">7900</span>, age=<span class="number">45</span>, sex=female, area=New York)]</span><br><span class="line">不操作原集合提薪后的集合：[Person(name=Tom, salary=<span class="number">9900</span>, age=<span class="number">18</span>, sex=male, area=New York), Person(name=Jack, salary=<span class="number">8000</span>, age=<span class="number">23</span>, sex=male, area=Washington), Person(name=Lily, salary=<span class="number">8800</span>, age=<span class="number">27</span>, sex=female, area=Washington), Person(name=Anni, salary=<span class="number">9200</span>, age=<span class="number">39</span>, sex=female, area=New York), Person(name=Owen, salary=<span class="number">10500</span>, age=<span class="number">32</span>, sex=male, area=New York), Person(name=Alisa, salary=<span class="number">8900</span>, age=<span class="number">45</span>, sex=female, area=New York)]</span><br><span class="line">操作原集合提薪前的集合：[Person(name=Tom, salary=<span class="number">9900</span>, age=<span class="number">18</span>, sex=male, area=New York), Person(name=Jack, salary=<span class="number">8000</span>, age=<span class="number">23</span>, sex=male, area=Washington), Person(name=Lily, salary=<span class="number">8800</span>, age=<span class="number">27</span>, sex=female, area=Washington), Person(name=Anni, salary=<span class="number">9200</span>, age=<span class="number">39</span>, sex=female, area=New York), Person(name=Owen, salary=<span class="number">10500</span>, age=<span class="number">32</span>, sex=male, area=New York), Person(name=Alisa, salary=<span class="number">8900</span>, age=<span class="number">45</span>, sex=female, area=New York)]</span><br><span class="line">操作原集合提薪后的集合：[Person(name=Tom, salary=<span class="number">9900</span>, age=<span class="number">18</span>, sex=male, area=New York), Person(name=Jack, salary=<span class="number">8000</span>, age=<span class="number">23</span>, sex=male, area=Washington), Person(name=Lily, salary=<span class="number">8800</span>, age=<span class="number">27</span>, sex=female, area=Washington), Person(name=Anni, salary=<span class="number">9200</span>, age=<span class="number">39</span>, sex=female, area=New York), Person(name=Owen, salary=<span class="number">10500</span>, age=<span class="number">32</span>, sex=male, area=New York), Person(name=Alisa, salary=<span class="number">8900</span>, age=<span class="number">45</span>, sex=female, area=New York)]</span><br></pre></td></tr></table></figure><p>flatMap的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.g4b.juc.java8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//测试案例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlatMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        List&lt;Class&gt; tomList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Class&gt; jackList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Class music = <span class="keyword">new</span> Class(<span class="number">1</span>,<span class="string">&quot;音乐&quot;</span>);</span><br><span class="line">        Class chinese = <span class="keyword">new</span> Class(<span class="number">2</span>,<span class="string">&quot;语文&quot;</span>);</span><br><span class="line">        Class math = <span class="keyword">new</span> Class(<span class="number">3</span>,<span class="string">&quot;数学&quot;</span>);</span><br><span class="line">        Collections.addAll(tomList,math,music);</span><br><span class="line">        Collections.addAll(jackList,chinese,music);</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">1002</span>,<span class="string">&quot;Tom&quot;</span>,tomList));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> Student(<span class="number">1001</span>,<span class="string">&quot;Jack&quot;</span>,jackList));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(studentList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer studentId;</span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Class&gt; classList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer classId;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;需求：假设现在有一个学生类，学生类下面有一个课程类的list列表，此时我们有一个需求，获取所有学生的所有课程的名称，那么我们此时的操作可能是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; classNameList = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">        List&lt;Class&gt; classList = student.getClassList();</span><br><span class="line">        <span class="keyword">for</span> (Class aClass : classList) &#123;</span><br><span class="line">            classNameList.add(aClass.getClassName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(classNameList.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">[数学, 语文, 音乐]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;那么，出现这种嵌套循环就会让人感觉不是很方便，所以此时我们就可以考虑使用flatMap来解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; claasNameList = studentList.stream().map(Student::getClassList).flatMap(Collection::stream).distinct().map(Class::getClassName).collect(Collectors.toList());</span><br><span class="line">    System.out.println(claasNameList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">[数学, 语文, 音乐]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;除上以外，map和flatMap更多用来获取两个集合的并集、交集和差集，我们以上面tomList和jackList来进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取两个人课程的交集</span></span><br><span class="line">    List&lt;String&gt; collect = tomList.stream().filter(jackList::contains).map(Class::getClassName).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;两个人课程的交集&quot;</span> + collect);</span><br><span class="line">    <span class="comment">//获取两个人课程的并集</span></span><br><span class="line">    List&lt;String&gt; classList = Stream.of(tomList, jackList).flatMap(Collection::stream).distinct().map(Class::getClassName).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;两个人课程的并集&quot;</span> + classList);</span><br><span class="line">    <span class="comment">//获取tom课程和jack课程的差集</span></span><br><span class="line">    List&lt;String&gt; classes1 = tomList.stream().filter(c -&gt; !jackList.contains(c)).map(Class::getClassName).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;tom课程和jack课程的差集&quot;</span> + classes1);</span><br><span class="line">    <span class="comment">//获取jack课程和tom课程的差集</span></span><br><span class="line">    List&lt;String&gt; classes2 = jackList.stream().filter(c -&gt; !tomList.contains(c)).map(Class::getClassName).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;jack课程和tom课程的差集&quot;</span> + classes2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">两个人课程的交集[音乐]</span><br><span class="line">两个人课程的并集[数学, 音乐, 语文]</span><br><span class="line">tom课程和jack课程的差集[数学]</span><br><span class="line">jack课程和tom课程的差集[语文]</span><br></pre></td></tr></table></figure><h4 id="3-5、归约-reduce"><a href="#3-5、归约-reduce" class="headerlink" title="3.5、归约(reduce)"></a>3.5、归约(reduce)</h4><p>&emsp;&emsp;归约，其实就是把多个值转变为1个值，例如求和、乘积、求最大值最小值等等。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210503162603025.png" alt="image-20210503162603025"></p><p>测试目标：求所有员工的工资之和，并查询最高工资</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询工资之和，方式1</span></span><br><span class="line">    Optional&lt;Integer&gt; sumSalary = personList.stream().map(Person::getSalary).reduce(Integer::sum);</span><br><span class="line">    System.out.println(<span class="string">&quot;工资之和（方式1）为：&quot;</span>+sumSalary.get());</span><br><span class="line">    <span class="comment">//查询工资之和，方式2</span></span><br><span class="line">    Integer sumSalary2 = personList.stream().reduce(<span class="number">0</span>, (sum, p) -&gt; sum += p.getSalary(), (sum1, sum2) -&gt; sum1 + sum2);</span><br><span class="line">    System.out.println(<span class="string">&quot;工资之和（方式2）为：&quot;</span>+sumSalary2);</span><br><span class="line">    <span class="comment">//查询工资之和，方式3</span></span><br><span class="line">    Integer sumSalary3 = personList.stream().reduce(<span class="number">0</span>, (sum, p) -&gt; sum += p.getSalary(), Integer::sum);</span><br><span class="line">    System.out.println(<span class="string">&quot;工资之和（方式3）为：&quot;</span>+sumSalary3);</span><br><span class="line">    <span class="comment">//查询最高工资，方式1</span></span><br><span class="line">    Integer maxSalary = personList.stream().reduce(<span class="number">0</span>, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(), Integer::max);</span><br><span class="line">    System.out.println(<span class="string">&quot;最高工资（方式1）为：&quot;</span>+maxSalary);</span><br><span class="line">    <span class="comment">//查询最高工资，方式2</span></span><br><span class="line">    Integer maxSalary2 = personList.stream().reduce(<span class="number">0</span>, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(), (max1, max2) -&gt; max1 &gt; max2 ? max1 : max2);</span><br><span class="line">    System.out.println(<span class="string">&quot;最高工资（方式2）为：&quot;</span>+maxSalary2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">工资之和（方式<span class="number">1</span>）为：<span class="number">49300</span></span><br><span class="line">工资之和（方式<span class="number">2</span>）为：<span class="number">49300</span></span><br><span class="line">工资之和（方式<span class="number">3</span>）为：<span class="number">49300</span></span><br><span class="line">最高工资（方式<span class="number">1</span>）为：<span class="number">9500</span></span><br><span class="line">最高工资（方式<span class="number">2</span>）为：<span class="number">9500</span></span><br></pre></td></tr></table></figure><h4 id="3-6、收集-collect"><a href="#3-6、收集-collect" class="headerlink" title="3.6、收集(collect)"></a>3.6、收集(collect)</h4><h5 id="3-6-1、归集-toList-toSet-toMap"><a href="#3-6-1、归集-toList-toSet-toMap" class="headerlink" title="3.6.1、归集(toList/toSet/toMap)"></a>3.6.1、归集(toList/toSet/toMap)</h5><p>测试目标：获取数据转为list、set、map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">20</span>);</span><br><span class="line">    List&lt;Integer&gt; resultList = list.stream().filter(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;能模2的数据有：&quot;</span> + resultList);</span><br><span class="line">    Set&lt;Integer&gt; resultSet = list.stream().filter(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>).collect(Collectors.toSet());</span><br><span class="line">    System.out.println(<span class="string">&quot;能模2的数据(不重复)有：&quot;</span> + resultSet);</span><br><span class="line">    Map&lt;String, Person&gt; resultMap = personList.stream().collect(Collectors.toMap(Person::getName, p -&gt; p));</span><br><span class="line">    System.out.println(<span class="string">&quot;返回的Map是：&quot;</span>+resultMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">能模<span class="number">2</span>的数据有：[<span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">20</span>]</span><br><span class="line">能模<span class="number">2</span>的数据(不重复)有：[<span class="number">4</span>, <span class="number">20</span>, <span class="number">6</span>]</span><br><span class="line">返回的Map是：&#123;Tom=Person(name=Tom, salary=<span class="number">8900</span>, age=<span class="number">18</span>, sex=male, area=New York), Owen=Person(name=Owen, salary=<span class="number">9500</span>, age=<span class="number">32</span>, sex=male, area=New York), Anni=Person(name=Anni, salary=<span class="number">8200</span>, age=<span class="number">39</span>, sex=female, area=New York), Alisa=Person(name=Alisa, salary=<span class="number">7900</span>, age=<span class="number">45</span>, sex=female, area=New York), Jack=Person(name=Jack, salary=<span class="number">7000</span>, age=<span class="number">23</span>, sex=male, area=Washington), Lily=Person(name=Lily, salary=<span class="number">7800</span>, age=<span class="number">27</span>, sex=female, area=Washington)&#125;</span><br></pre></td></tr></table></figure><h5 id="3-6-2-统计-count-averaging"><a href="#3-6-2-统计-count-averaging" class="headerlink" title="3.6.2 统计(count/averaging)"></a>3.6.2 统计(count/averaging)</h5><ul><li>计数：count</li><li>平均值：averagingInt、averagingLong、averagingDouble</li><li>最值：maxBy、minBy</li><li>求和：summingInt、summingLong、summingDouble</li><li>统计以上所有：summarizingInt、summarizingLong、summarizingDouble</li></ul><p>测试目标：统计员工人数、平均工资、工资总额、最高工资</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> count = personList.stream().count();</span><br><span class="line">    System.out.println(<span class="string">&quot;员工人数：&quot;</span>+count);</span><br><span class="line">    Double averMoney = personList.stream().collect(Collectors.averagingInt(Person::getSalary));</span><br><span class="line">    System.out.println(<span class="string">&quot;平均工资：&quot;</span>+averMoney);</span><br><span class="line">    <span class="keyword">long</span> sumMoney = personList.stream().collect(Collectors.summingInt(Person::getSalary));</span><br><span class="line">    System.out.println(<span class="string">&quot;工资总和：&quot;</span>+sumMoney);</span><br><span class="line">    Integer maxMoney = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compare)).get();</span><br><span class="line">    System.out.println(<span class="string">&quot;最高工资：&quot;</span>+maxMoney);</span><br><span class="line">    IntSummaryStatistics collect = personList.stream().collect(Collectors.summarizingInt(Person::getSalary));</span><br><span class="line">    System.out.println(<span class="string">&quot;所有信息：&quot;</span>+collect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">员工人数：<span class="number">6</span></span><br><span class="line">平均工资：<span class="number">8216.666666666666</span></span><br><span class="line">工资总和：<span class="number">49300</span></span><br><span class="line">最高工资：<span class="number">9500</span></span><br><span class="line">所有信息：IntSummaryStatistics&#123;count=<span class="number">6</span>, sum=<span class="number">49300</span>, min=<span class="number">7000</span>, average=<span class="number">8216.666667</span>, max=<span class="number">9500</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="3-6-3、分组-partitioningBy-groupingBy"><a href="#3-6-3、分组-partitioningBy-groupingBy" class="headerlink" title="3.6.3、分组(partitioningBy/groupingBy)"></a>3.6.3、分组(partitioningBy/groupingBy)</h5><ul><li>分区：将<code>stream</code>按条件分为两个<code>Map</code>，比如员工按薪资是否高于8000分为两部分。</li><li>分组：将集合分为多个Map，比如员工按性别分组。有单级分组和多级分组。</li></ul><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210503191632568.png" alt="image-20210503191632568"></p><p>测试目标：第一个是将员工按薪资是否高于8000分为两部分、第二个是将员工按性别和地区分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> count = personList.stream().count();</span><br><span class="line">    System.out.println(<span class="string">&quot;员工人数：&quot;</span>+count);</span><br><span class="line">    Double averMoney = personList.stream().collect(Collectors.averagingInt(Person::getSalary));</span><br><span class="line">    System.out.println(<span class="string">&quot;平均工资：&quot;</span>+averMoney);</span><br><span class="line">    <span class="keyword">long</span> sumMoney = personList.stream().collect(Collectors.summingInt(Person::getSalary));</span><br><span class="line">    System.out.println(<span class="string">&quot;工资总和：&quot;</span>+sumMoney);</span><br><span class="line">    Integer maxMoney = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compare)).get();</span><br><span class="line">    System.out.println(<span class="string">&quot;最高工资：&quot;</span>+maxMoney);</span><br><span class="line">    IntSummaryStatistics collect = personList.stream().collect(Collectors.summarizingInt(Person::getSalary));</span><br><span class="line">    System.out.println(<span class="string">&quot;所有信息：&quot;</span>+collect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">薪资高于<span class="number">8000</span>的员工分组[Person(name=Tom, salary=<span class="number">8900</span>, age=<span class="number">18</span>, sex=male, area=New York), Person(name=Anni, salary=<span class="number">8200</span>, age=<span class="number">39</span>, sex=female, area=New York), Person(name=Owen, salary=<span class="number">9500</span>, age=<span class="number">32</span>, sex=male, area=New York)]</span><br><span class="line">薪资低于<span class="number">8000</span>的员工分组[Person(name=Jack, salary=<span class="number">7000</span>, age=<span class="number">23</span>, sex=male, area=Washington), Person(name=Lily, salary=<span class="number">7800</span>, age=<span class="number">27</span>, sex=female, area=Washington), Person(name=Alisa, salary=<span class="number">7900</span>, age=<span class="number">45</span>, sex=female, area=New York)]</span><br><span class="line">员工按照性别分组：&#123;female=[Person(name=Lily, salary=<span class="number">7800</span>, age=<span class="number">27</span>, sex=female, area=Washington), Person(name=Anni, salary=<span class="number">8200</span>, age=<span class="number">39</span>, sex=female, area=New York), Person(name=Alisa, salary=<span class="number">7900</span>, age=<span class="number">45</span>, sex=female, area=New York)], male=[Person(name=Tom, salary=<span class="number">8900</span>, age=<span class="number">18</span>, sex=male, area=New York), Person(name=Jack, salary=<span class="number">7000</span>, age=<span class="number">23</span>, sex=male, area=Washington), Person(name=Owen, salary=<span class="number">9500</span>, age=<span class="number">32</span>, sex=male, area=New York)]&#125;</span><br><span class="line">员工先按照性别分组，再按照地区分组：&#123;female=&#123;New York=[Person(name=Anni, salary=<span class="number">8200</span>, age=<span class="number">39</span>, sex=female, area=New York), Person(name=Alisa, salary=<span class="number">7900</span>, age=<span class="number">45</span>, sex=female, area=New York)], Washington=[Person(name=Lily, salary=<span class="number">7800</span>, age=<span class="number">27</span>, sex=female, area=Washington)]&#125;, male=&#123;New York=[Person(name=Tom, salary=<span class="number">8900</span>, age=<span class="number">18</span>, sex=male, area=New York), Person(name=Owen, salary=<span class="number">9500</span>, age=<span class="number">32</span>, sex=male, area=New York)], Washington=[Person(name=Jack, salary=<span class="number">7000</span>, age=<span class="number">23</span>, sex=male, area=Washington)]&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="3-6-4、接合-joining"><a href="#3-6-4、接合-joining" class="headerlink" title="3.6.4、接合(joining)"></a>3.6.4、接合(joining)</h5><p>&emsp;&emsp;<code>joining</code>可以将stream中的元素用特定的连接符（没有的话，则直接连接）连接成一个字符串。</p><p>测试目标：拼接所有的员工姓名作为一个字符串，用，隔开</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String result = personList.stream().map(Person::getName).collect(Collectors.joining(<span class="string">&quot;，&quot;</span>));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">Tom，Jack，Lily，Anni，Owen，Alisa</span><br></pre></td></tr></table></figure><h5 id="3-6-5-归约-reducing"><a href="#3-6-5-归约-reducing" class="headerlink" title="3.6.5 归约(reducing)"></a>3.6.5 归约(reducing)</h5><p>&emsp;&emsp;<code>Collectors</code>类提供的<code>reducing</code>方法，相比于<code>stream</code>本身的<code>reduce</code>方法，增加了对自定义归约的支持。</p><p>测试目标：返回所有员工的总工资</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Integer result = personList.stream().collect(Collectors.reducing(<span class="number">0</span>, Person::getSalary, (x, sum) -&gt; sum += x));</span><br><span class="line">    System.out.println(<span class="string">&quot;所有员工的总工资为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">所有员工的总工资为：<span class="number">49300</span></span><br></pre></td></tr></table></figure><h4 id="3-7、排序-sorted"><a href="#3-7、排序-sorted" class="headerlink" title="3.7、排序(sorted)"></a>3.7、排序(sorted)</h4><ul><li>sorted()：自然排序，流中元素需实现Comparable接口</li><li>sorted(Comparator com)：Comparator排序器自定义排序</li></ul><p>测试目标：将员工按照工资高低进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Object&gt; sortAsc1 = personList.stream().sorted(Comparator.comparing(Person::getSalary))</span><br><span class="line">            .map(person -&gt; &#123;</span><br><span class="line">                HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">                map.put(person.getName(), person.getSalary());</span><br><span class="line">                <span class="keyword">return</span> map;</span><br><span class="line">            &#125;).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;按照工资升序：&quot;</span> + sortAsc1);</span><br><span class="line">    List&lt;Object&gt; sortDesc1 = personList.stream().sorted(Comparator.comparing(Person::getSalary).reversed())</span><br><span class="line">            .map(person -&gt; &#123;</span><br><span class="line">                HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">                map.put(person.getName(), person.getSalary());</span><br><span class="line">                <span class="keyword">return</span> map;</span><br><span class="line">            &#125;).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;按照工资降序：&quot;</span> + sortDesc1);</span><br><span class="line">    List&lt;Object&gt; result = personList.stream().sorted((p1, p2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1.getSalary() == p2.getSalary()) &#123;</span><br><span class="line">            <span class="keyword">return</span> p2.getAge() - p1.getAge();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> p1.getSalary() - p2.getSalary();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).map(person -&gt; &#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(person.getName(), person.getSalary());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;先按工资升序再按年龄降序(自定义排序)：&quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">按照工资升序：[&#123;Jack=<span class="number">7000</span>&#125;, &#123;Lily=<span class="number">7800</span>&#125;, &#123;Alisa=<span class="number">7900</span>&#125;, &#123;Anni=<span class="number">8200</span>&#125;, &#123;Tom=<span class="number">8900</span>&#125;, &#123;Owen=<span class="number">9500</span>&#125;]</span><br><span class="line">按照工资降序：[&#123;Owen=<span class="number">9500</span>&#125;, &#123;Tom=<span class="number">8900</span>&#125;, &#123;Anni=<span class="number">8200</span>&#125;, &#123;Alisa=<span class="number">7900</span>&#125;, &#123;Lily=<span class="number">7800</span>&#125;, &#123;Jack=<span class="number">7000</span>&#125;]</span><br><span class="line">先按工资升序再按年龄降序(自定义排序)：[&#123;Jack=<span class="number">7000</span>&#125;, &#123;Lily=<span class="number">7800</span>&#125;, &#123;Alisa=<span class="number">7900</span>&#125;, &#123;Anni=<span class="number">8200</span>&#125;, &#123;Tom=<span class="number">8900</span>&#125;, &#123;Owen=<span class="number">9500</span>&#125;]</span><br></pre></td></tr></table></figure><h4 id="3-8、提取-组合"><a href="#3-8、提取-组合" class="headerlink" title="3.8、提取/组合"></a>3.8、提取/组合</h4><p>&emsp;&emsp;提供了合并、去重、限制、跳过等操作。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/20201109145946301.jpg"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/20201109150001270.jpg" alt="20201109150001270"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/20201109150012790.jpg" alt="20201109150012790"></p><p>测试目标：测试合并、去重、限制、跳过等操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test12</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] arr1 = &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span> &#125;;</span><br><span class="line">    String[] arr2 = &#123; <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//合并两个数组并去重</span></span><br><span class="line">    Stream&lt;String&gt; stream1 = Stream.of(arr1);</span><br><span class="line">    Stream&lt;String&gt; stream2 = Stream.of(arr2);</span><br><span class="line">    List&lt;String&gt; result1 = Stream.concat(stream1,stream2).distinct().collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;组合去重结果：&quot;</span>+result1);</span><br><span class="line">    <span class="comment">//获取流中的前几个数据</span></span><br><span class="line">    List&lt;Integer&gt; result2 = Stream.iterate(<span class="number">1</span>, x -&gt; x + <span class="number">2</span>).limit(<span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;从1开始，每次获取 +2 后的值，获取前5个：&quot;</span>+result2);</span><br><span class="line">    <span class="comment">//跳过前面几个数据</span></span><br><span class="line">    List&lt;Integer&gt; result3 = Stream.iterate(<span class="number">1</span>, x -&gt; x + <span class="number">2</span>).skip(<span class="number">2</span>).limit(<span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;从1开始，每次获取 +2 后的值，跳过前2个后获取前5个：&quot;</span>+result3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">组合去重结果：[a, b, c, d, e, f, g]</span><br><span class="line">从<span class="number">1</span>开始，每次获取 +<span class="number">2</span> 后的值，获取前<span class="number">5</span>个：[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">从<span class="number">1</span>开始，每次获取 +<span class="number">2</span> 后的值，跳过前<span class="number">2</span>个后获取前<span class="number">5</span>个：[<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDK8新特性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK8 </tag>
            
            <tag> Lambda </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch面试题</title>
      <link href="/blog/2021/04/23/ELasticSearch%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/blog/2021/04/23/ELasticSearch%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch面试题"><a href="#ElasticSearch面试题" class="headerlink" title="ElasticSearch面试题"></a>ElasticSearch面试题</h1><h2 id="1、为什么要使用ElasticSearch？"><a href="#1、为什么要使用ElasticSearch？" class="headerlink" title="1、为什么要使用ElasticSearch？"></a>1、为什么要使用ElasticSearch？</h2><p>&emsp;&emsp;系统中的数据，随着业务的发展和时间的推移， 将会<strong>非常多</strong>， 而业务中往往采用<strong>模糊查询</strong>进行数据的搜索，而模糊查询会导致<strong>查询引擎放弃索引</strong>，从而导致系统查询数据时都是<strong>全表扫描</strong>，在百万级别的数据库中查询<strong>效率是非常低下</strong>的，而我们使用ElasticSearch做一个全文索引，将经常查询的系统功能中的某些字段放入 ElasticSearch索引库里，可以<strong>提高查询速度</strong>。</p><h2 id="2、ElasticSearch-的-master-选举流程是怎样的"><a href="#2、ElasticSearch-的-master-选举流程是怎样的" class="headerlink" title="2、ElasticSearch 的 master 选举流程是怎样的"></a>2、ElasticSearch 的 master 选举流程是怎样的</h2><p>&emsp;&emsp;ElasticSearch 的选举是 ZenDiscovery 模块负责的，主要包含 Ping （节点之间通过这个 RPC 来发现彼此）和 Unicast （单播模块包含一个主机列表以控制哪些节点需要 ping 通）这两部分</p><p>1、对所有可以成为 master 的节点（<strong>node.master: true</strong>）根据 nodeId 字典排序，每次选举每个节点都把自<br>己所知道节点排一次序，然后选出第一个（第 0 位）节点，暂且认为它是 master 节点。</p><p>2、如果对某个节点的投票数达到一定的值（可以成为 master需要的节点数为： <strong>n/2+1</strong> ）并且该节点<strong>自己也选举自己</strong>，如果都符合，那这个节点就是 master ，否则重新选举一直到满足上述条件。</p><p>&emsp;&emsp;master节点的职责主要包括<strong>集群、节点和索引的管理</strong>，<strong>不负责文档级别的管理</strong>，此时master节点可以关闭node.data功能。</p><h2 id="3、ElasticSearch集群的脑裂问题"><a href="#3、ElasticSearch集群的脑裂问题" class="headerlink" title="3、ElasticSearch集群的脑裂问题"></a>3、ElasticSearch集群的脑裂问题</h2><h3 id="3-1、出现原因"><a href="#3-1、出现原因" class="headerlink" title="3.1、出现原因"></a>3.1、出现原因</h3><p>a、<strong>网络问题</strong>：集群间的<strong>网络延迟</strong>导致一些节点访问不到master，认为master挂掉了从而选举出新的master；</p><p>b、<strong>节点负载</strong>：主节点的角色<strong>既是master又是data</strong>，当<strong>访问量大</strong>时可能会导致ElasticSearch<strong>停止响应造成大面积延迟</strong>，其他节点<strong>得不到master的响应</strong>从而认为master挂掉了从而选举出新的master；</p><p>c、<strong>内存回收</strong>：data节点上的ElasticSearch<strong>进程占用的内存较大</strong>，从而引发JVM的规模的<strong>内存回收</strong>，造成ElasticSearch失去响应。</p><h3 id="3-2、解决方案"><a href="#3-2、解决方案" class="headerlink" title="3.2、解决方案"></a>3.2、解决方案</h3><p>a、<strong>减少误判</strong>：可以设置 discovery.zen.ping_timeout 节点状态的响应时间，默认为 3s，可以适当<strong>增大响应时间</strong>来减少其他节点对<strong>master状态的误判</strong>；</p><p>b、<strong>选举触发</strong> : 可以设置discovery.zen.minimum_master_nodes，该参数是用于<strong>控制选举行为发生的最小集群主节点数量</strong>。当备选主节点的个数大于等于该参数的值，且备选主节点中有该参数个节点认为主节点挂了，进行选举。默认值是1，官方建议为（ n/2）+1 个，其中n为主节点个数（即有资格成为主节点的节点个数）；</p><p>c、<strong>角色分离</strong>：即将<strong>master节点和data节点分离</strong>，限制角色。</p><p>&emsp;主节点配置为：node.master: true                   node.data: false</p><p>&emsp;从节点配置为：node.master: false                  node.data: true</p><h2 id="4、Elasticsearch索引文档的流程？"><a href="#4、Elasticsearch索引文档的流程？" class="headerlink" title="4、Elasticsearch索引文档的流程？"></a>4、Elasticsearch索引文档的流程？</h2><p>1、一个文档请求发送到任意集群节点上；</p><p>2、获得请求的节点成为协调节点默认使用文档ID参与计算，以便为路由提供合适的分片；</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<strong>shard = hash(document_id) % (num_of_primary_shards)</strong></p><p>3、当分片所在节点接收来自协调节点的请求后，会将请求的文档写入到Memory Buffer中，然后定时（默认是1s）写入FileSystem Cache，这个过程称为refresh；</p><p>4、在某些情况中，Memory Buffer 和 FileSystem Cache 中的数据可能会丢失，ElasticSearch通过translog的机制来保证数据的可靠性。它的机制是：接收到请求后，同时写入到translog中，只有当FileSystem cache的数据写如此盘中时，才会将translog清除掉，这个过程称为flush；</p><p>注：在flush的过程中，内存中的缓存将会被清除掉内容被写入一个新段，段的 fsync 将创建一个新的提交点， 并将内容刷新到磁盘，旧的 translog 将被删除并开始一个新的 translog。flush触发的时机是定时触发（默认30min）或者translog文件太大（默认512M）。</p><h2 id="5、ElasticSearch更新和删除文档的流程"><a href="#5、ElasticSearch更新和删除文档的流程" class="headerlink" title="5、ElasticSearch更新和删除文档的流程"></a>5、ElasticSearch更新和删除文档的流程</h2><p>&emsp;&emsp;虽然删除和更新文档也是写操作，但是由于ElasticSearch的文档不可变性，所以不能通过删除或修改文档来执行变更操作。</p><p>&emsp;&emsp;当执行删除请求时，我们的文档本质并没有被删除，而是由于磁盘上的每一个段都有对应的一个.del文件，删除的文档会在.del文件中被标记为删除。此时，虽然文档还是能够在查询过程中被匹配出来，但是他会在结果中被过滤掉。</p><p>&emsp;&emsp;当执行更新请求时，由于我们ElasticSearch中存在一个版本号，所以此时旧版本的文档会在.del文件上被标记为删除，而新版本的文档则会被索引到一个新段。此时，我们能够同时查询到两个版本的文档，但是在结果中，旧版本的文档会被过滤掉，只会返回最新版本的文档。</p><p>&emsp;&emsp;当执行段合并时，此时会真的将.del文件中被标记删除的文档执行物理删除。</p><h2 id="6、ElasticSearch的搜索流程"><a href="#6、ElasticSearch的搜索流程" class="headerlink" title="6、ElasticSearch的搜索流程"></a>6、ElasticSearch的搜索流程</h2><p>搜索被执行成一个两阶段过程，称为  Query Then Fetch；</p><p>1、在初始查询阶段，查询会<strong>广播到索引中每一个分片拷贝（主分片或者副本分片）</strong>。 每个分片在本地执行搜索并构建一个匹配文档的大小为 <strong>from + size 的优先队列</strong>。PS：在搜索的时候是会查询 Filesystem Cache 的，但是有部分数据还在 Memory Buffer，所以搜索是近实时的。</p><p>2、每个分片返回各自优先队列中<strong>所有文档的 ID 和排序值 给协调节点</strong>，协调节点合并这些值到自己的优先队列中来产生一个<strong>全局排序后的结果列表</strong>。</p><p>3、接下来就是取回阶段，协调节点辨别出哪些文档需要被取回并向<strong>相关的分片提交多个 GET 请求</strong>。每个分片<strong>加载并丰富文档</strong>，接着返回文档给协调节点。一旦所有的文档都被取回了， 协调节点返回结果给客户端。</p><p>&emsp;&emsp;Query Then Fetch 的搜索类型在文档相关性打分的时候参考的是本分片的数据，这样在文档数量较少 的时候可能不够准确，DFS Query Then Fetch 增加了一个预查询的处理，询问 Term 和 Document frequency，这个评分更准确，但是性能会变差。</p><h2 id="7、ElasticSearch在部署时，对Linux的设置有哪些优化方法？"><a href="#7、ElasticSearch在部署时，对Linux的设置有哪些优化方法？" class="headerlink" title="7、ElasticSearch在部署时，对Linux的设置有哪些优化方法？"></a>7、ElasticSearch在部署时，对Linux的设置有哪些优化方法？</h2><p>1、使用内存更高的机器部署ElasticSearch（64G最优，不要少于8G）；</p><p>2、选择更多核心数的机器；</p><p>3、负担得起的话，使用SSD会远远超过任何旋转介质，查询和索引性能都会有所提升；</p><p>4、确保运行你应用程序的 JVM 和服务器的 JVM 是完全一样的。 在 Elasticsearch 的几个地方，使用Java的本地序列化；</p><p>5、通过设置gateway.recover_after_nodes、gateway.expected_nodes、gateway.recover_after_time 可以在集群重启的时候避免过多的分片交换，这可能会让数据恢复从数个小时缩短为几秒钟；</p><p>6、不要随意修改垃圾回收器（CMS）和各个线程池的大小；</p><p>7、把内存的（少于）一半给 Lucene（但不要超过 32 GB！），可以通过 ES_HEAP_SIZE 环境变量设置。</p><h3 id="补充：在索引阶段性能提升的方法："><a href="#补充：在索引阶段性能提升的方法：" class="headerlink" title="补充：在索引阶段性能提升的方法："></a>补充：在索引阶段性能提升的方法：</h3><p>1、使用批量请求并调整其大小：每次批量数据 5–15 MB 大是个不错的起始点；</p><p>2、使用SSD；</p><p>3、段和合并：ElasticSearch 默认值是 20 MB/s，对机械磁盘应该是个不错的设置。如果你用的是 SSD， 可以考虑提高到 100–200 MB/s。如果你在做批量导入，完全不在意搜索，你可以彻底关掉合并限流。 另外还可以增加 index.translog.flush_threshold_size 设置，从默认的 512 MB 到更大一些的值，比如 1 GB，这可以在一次清空触发的时候在事务日志里积累出更大的段；</p><p>4、如果你的搜索结果不需要近实时的准确度，考虑把每个索引的 index.refresh_interval （刷新到文件系统缓存）由1s改到 30s；</p><p>5、如果你在做大批量导入，考虑通过设置 index.number_of_replicas: 0 关闭副本。</p><h2 id="8、在GC方面，在使用-ElasticSearch-时要注意什么？"><a href="#8、在GC方面，在使用-ElasticSearch-时要注意什么？" class="headerlink" title="8、在GC方面，在使用 ElasticSearch 时要注意什么？"></a>8、在GC方面，在使用 ElasticSearch 时要注意什么？</h2><p>1、倒排词典的索引需要常驻内存，无法 GC，需要监控 data node 上 segment memory 增长趋势；</p><p>2、field cache, filter cache, indexing cache, bulk queue 等等各类缓存，要设置合理的大小，并且要应该根据最坏的情况来看 heap 是否够用，避免采用 clear cache 等“自欺欺人”的方式来释放内存；</p><p>3、避免返回大量结果集的搜索与聚合。确实需要大量拉取数据的场景，可以采用 scan &amp; scroll api 来实现。</p><h2 id="9、-对于大数据量（上亿量级）的聚合如何实现？"><a href="#9、-对于大数据量（上亿量级）的聚合如何实现？" class="headerlink" title="9、 对于大数据量（上亿量级）的聚合如何实现？"></a>9、 对于大数据量（上亿量级）的聚合如何实现？</h2><p>&emsp;&emsp;ElasticSearch 提供的首个近似聚合是 cardinality 度量。它提供一个字段的基数，即该字段的 distinct 或者 unique 值的数目。它是基于 HLL 算法的。HLL 会先对我们的输入作哈希运算，然后根据哈希运算的结果中的bits 做概率估算从而得到基数。其特点是：可配置的精度，用来控制内存的使用（更精确 ＝ 更多内存）；小的数据集精度是非常高的；我们可以通过配置参数，来设置去重需要的固定内存使用量。无论数千还是数十亿的唯一值，内存使用量只与你配置的精确度相关。</p><h2 id="10、在并发情况下，ElasticSearch-如果保证读写一致？"><a href="#10、在并发情况下，ElasticSearch-如果保证读写一致？" class="headerlink" title="10、在并发情况下，ElasticSearch 如果保证读写一致？"></a>10、在并发情况下，ElasticSearch 如果保证读写一致？</h2><p>&emsp;&emsp;可以通过<strong>版本号使用乐观锁</strong>并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；</p><p>&emsp;&emsp;对于写操作，一致性级别支持 quorum[半数]/one[主分片]/all[所有分片]，默认为 quorum，即只有当大多数分片可用时才允许写操作。但即使大多数可用，也可能存在因为网络等原因导致写入副本失败，这样该副本被认为故障，分片将会在一个不同的节点上重建。</p><p>&emsp;&emsp;对于读操作，可以设置 replication 为 sync(默认)，这使得操作在主分片和副本分片都完成后才会返回； 如果设置 replication 为 async 时，也可以通过设置搜索请求参数_preference 为 primary 来查询主分片， 确保文档是最新版本。</p><h2 id="11、Elasticsearch-中的集群、节点、索引、文档是什么？"><a href="#11、Elasticsearch-中的集群、节点、索引、文档是什么？" class="headerlink" title="11、Elasticsearch 中的集群、节点、索引、文档是什么？"></a>11、Elasticsearch 中的集群、节点、索引、文档是什么？</h2><p>1、集群是<strong>一个或多个节点（服务器）的集合</strong>，它们<strong>共同保存您的整个数据</strong>，并提供<strong>跨所有节点的联合索引和搜索</strong>功能。群集由唯一名称标识，默认情况下为 “elasticsearch“ 。此名称很重要，因为如果节点设置为按名称加入群集，则该节点只能是集群的一部分；</p><p>2、节点是属于<strong>集群一部分（单个服务器）</strong>。它用来<strong>存储数据并参与群集索引和搜索功能</strong>；</p><p>3、索引就像关系数据库中的<strong>数据库</strong>。它有一个定义多种类型的映射。索引是逻辑名称空间，映射到一个或多个主分片，并且可以有零个或多个副本分片。 <strong>MySQL =&gt; 数据库     相当于   Elastic s earch =&gt; 索引</strong>；</p><p>4、文档类似于关系数据库中的<strong>每一行数据</strong>。不同之处在于索引中的每个文档可以具有不同的结构（字段），但是对于<strong>通用字段应该具有相同的数据类型</strong>。 MySQL =&gt; Databases =&gt; Tables =&gt; Columns / Rows<br>ElasticSearch =&gt; Indices =&gt; Types =&gt; 具有属性的文档。</p><h2 id="12、Elasticsearch-中的倒排索引是什么？"><a href="#12、Elasticsearch-中的倒排索引是什么？" class="headerlink" title="12、Elasticsearch 中的倒排索引是什么？"></a>12、Elasticsearch 中的倒排索引是什么？</h2><p>&emsp;&emsp;倒排索引是搜索引擎的核心。搜索引擎的主要目标是在查找发生搜索条件的文档时提供快速搜索。 ES中的倒排索引 其实就是 <strong>Lucene 的倒排索引</strong>，区别于传统的正向索引，倒排索引会<strong>再存储数据时将关键词和数据进行关联</strong>，保存到倒排表中，然后在查询时，将查询内容进行分词后在倒排表中进行查询，最后匹配数据即可。</p><p>参考链接：<a href="https://www.bilibili.com/video/BV1hh411D7sb?p=1">https://www.bilibili.com/video/BV1hh411D7sb?p=1</a></p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> NoSQL </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch高级篇</title>
      <link href="/blog/2021/04/22/ElasticSearch%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
      <url>/blog/2021/04/22/ElasticSearch%E9%AB%98%E7%BA%A7%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch高级"><a href="#ElasticSearch高级" class="headerlink" title="ElasticSearch高级"></a>ElasticSearch高级</h1><h2 id="一、ElasticSearch集群的搭建"><a href="#一、ElasticSearch集群的搭建" class="headerlink" title="一、ElasticSearch集群的搭建"></a>一、ElasticSearch集群的搭建</h2><h3 id="1、为何要搭建-Elasticsearch-集群"><a href="#1、为何要搭建-Elasticsearch-集群" class="headerlink" title="1、为何要搭建 Elasticsearch 集群"></a>1、为何要搭建 Elasticsearch 集群</h3><p>&emsp;&emsp;为什么我们需要搭建集群？它有什么优势呢？</p><h4 id="高可用性"><a href="#高可用性" class="headerlink" title="高可用性"></a>高可用性</h4><p>&emsp;&emsp;Elasticsearch 作为一个搜索引擎，我们对它的基本要求就是存储海量数据并且可以在非常短的时间内查询到我们想要的信息。所以第一步我们需要保证的就是 Elasticsearch 的高可用性。</p><p>&emsp;&emsp;那么怎样提高 Elasticsearch 的高可用性呢？这时集群的作用就体现出来了。假如 Elasticsearch 只放在一台服务器上，即单机运行，假如这台主机突然断网了或者被攻击了，那么整个 Elasticsearch 的服务就不可用了。但如果改成 Elasticsearch 集群的话，有一台主机宕机了，还有其他的主机可以支撑，这样就仍然可以保证服务是可用的。</p><p>&emsp;&emsp;那么假如一台主机宕机了，那么不就无法访问这台主机的数据了吗？那假如我要访问的数据正好存在这台主机上，那不就获取不到了吗？难道其他的主机里面也存了一份一模一样的数据？那这岂不是很浪费吗？</p><p>&emsp;&emsp;在 Elasticsearch 中，一台主机宕机了，这台主机里面存的数据依然是可以被访问到的，因为在其他的主机上也有备份，但备份的时候也不是整台主机备份，是分片备份的，那这里就又引出了一个概念——分片。</p><p>&emsp;&emsp;分片，英文叫做 Shard，顾名思义，分片就是对数据切分成了多个部分。我们知道 Elasticsearch 中一个索引（Index）相当于是一个数据库，但索引存储的时候并不是整个存一起的，它是被分片存储的，Elasticsearch 默认会把一个索引分成五个分片，当然这个数字是可以自定义的。分片是数据的容器，数据保存在分片内，分片又被分配到集群内的各个节点里。当你的集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里，所以相当于一份数据被分成了多份并保存在不同的主机上。</p><p>&emsp;&emsp;那这还是没解决问题啊，如果一台主机挂掉了，那么这个分片里面的数据不就无法访问了？别的主机都是存储的其他的分片。其实是可以访问的，因为其他主机存储了这个分片的备份，叫做副本，这里就引出了另外一个概念——副本。</p><p>&emsp;&emsp;副本，英文叫做 Replica，同样顾名思义，副本就是对原分片的复制，和原分片的内容是一样的，Elasticsearch 默认会生成一份副本，所以相当于是五个原分片和五个分片副本，相当于一份数据存了两份，并分了十个分片，当然副本的数量也是可以自定义的。这时我们只需要将某个分片的副本存在另外一台主机上，这样当某台主机宕机了，我们依然还可以从另外一台主机的副本中找到对应的数据。所以从外部来看，数据结果是没有任何区别的。</p><p>&emsp;&emsp;一般来说，Elasticsearch 会尽量把一个索引的不同分片存储在不同的主机上，分片的副本也尽可能存在不同的主机上，这样可以提高容错率，从而提高可用性。</p><p>&emsp;&emsp;但这时假如你只有一台主机，那不就没办法了吗？分片和副本其实是没意义的，一台主机挂掉了，就全挂掉了。</p><h4 id="健康状态"><a href="#健康状态" class="headerlink" title="健康状态"></a>健康状态</h4><p>针对一个索引，Elasticsearch 中其实有专门的衡量索引健康状况的标志，分为三个等级：</p><ul><li>green（绿色）：这代表所有的主分片和副本分片都已分配，你的集群是 100% 可用的。</li><li>yellow（黄色）：所有的主分片已经分片了，但至少还有一个副本是缺失的。不会有数据丢失，所以搜索结果依然是完整的。不过，你的高可用性在某种程度上被弱化。如果更多的分片消失，你就会丢数据了。所以可把 yellow 想象成一个需要及时调查的警告。</li><li>red（红色）：至少一个主分片以及它的全部副本都在缺失中。这意味着你在缺少数据，搜索只能返回部分数据，而分配到这个分片上的写入请求会返回一个异常。</li></ul><p>&emsp;&emsp;如果你只有一台主机的话，其实索引的健康状况也是 yellow，因为一台主机，集群没有其他的主机可以防止副本，所以说，这就是一个不健康的状态，因此集群也是十分有必要的。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210415170843264.png" alt="image-20210415170843264"></p><h4 id="存储空间"><a href="#存储空间" class="headerlink" title="存储空间"></a>存储空间</h4><p>&emsp;&emsp;另外，既然是集群，那么存储空间肯定也是联合起来的，假如一台主机的存储空间是固定的，那么集群它相对于单个主机也有更多的存储空间，可存储的数据量也更大。</p><h3 id="2、Linux环境下搭建ElasticSearch集群"><a href="#2、Linux环境下搭建ElasticSearch集群" class="headerlink" title="2、Linux环境下搭建ElasticSearch集群"></a>2、Linux环境下搭建ElasticSearch集群</h3><h4 id="2-1、环境准备"><a href="#2-1、环境准备" class="headerlink" title="2.1、环境准备"></a>2.1、环境准备</h4><ul><li>安装包下载：见上一篇<a href="http://cheng_qiwei.gitee.io/blog/2021/04/14/ElasticSearch%E5%9F%BA%E7%A1%80%E7%AF%87/">文档</a></li></ul><h4 id="2-2、安装部署ElasticSearch"><a href="#2-2、安装部署ElasticSearch" class="headerlink" title="2.2、安装部署ElasticSearch"></a>2.2、安装部署ElasticSearch</h4><h5 id="2-2-1、解压安装包"><a href="#2-2-1、解压安装包" class="headerlink" title="2.2.1、解压安装包"></a>2.2.1、解压安装包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf elasticsearch-7.12.0-linux-x86_64.tar.gz -C /usr/local/es/</span><br></pre></td></tr></table></figure><p>这里注意不要安装在<code>/root</code>目录下</p><h5 id="2-2-2、创建data目录和log目录"><a href="#2-2-2、创建data目录和log目录" class="headerlink" title="2.2.2、创建data目录和log目录"></a>2.2.2、创建data目录和log目录</h5><p>在elasticsearch-7.12.0的目录下创建data目录，用于保存数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/es/elasticsearch-7.12.0/ &amp;&amp; mkdir data</span><br></pre></td></tr></table></figure><h5 id="2-2-3、修改配置文件"><a href="#2-2-3、修改配置文件" class="headerlink" title="2.2.3、修改配置文件"></a>2.2.3、修改配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ./config/elasticsearch.yml</span><br></pre></td></tr></table></figure><p>修改结果如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ======================== Elasticsearch Configuration =========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">myelasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点名称</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示该节点会不会作为主节点，true表示会；false表示不会</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前节点是否用于存储数据，是：true、否：false</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据保存路径</span></span><br><span class="line"><span class="attr">path.data:</span> <span class="string">/usr/local/es/elasticsearch-node-1/data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志保存路径</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/usr/local/es/elasticsearch-node-1/logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lock the memory on startup</span></span><br><span class="line"><span class="attr">bootstrap.memory_lock:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点ip地址</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">192.168</span><span class="number">.66</span><span class="number">.128</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a custom port for HTTP:</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># es7.x 之后新增的配置，写入候选主节点的设备地址，在开启服务后可以被选为主节点</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> [<span class="string">&quot;192.168.66.128&quot;</span>,<span class="string">&quot;192.168.66.129&quot;</span>,<span class="string">&quot;192.168.66.130&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止脑裂</span></span><br><span class="line"><span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断结点是否脱离时间配置</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_timeout:</span> <span class="string">60s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断结点是否脱离次数配置</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_retries:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举master</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>,<span class="string">&quot;node-2&quot;</span>,<span class="string">&quot;node-3&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示开启跨域访问支持，此值默认为fals</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示跨域访问允许的域名地址，可使用正则表达式，“*”则表示允许所有域名访问</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h5 id="2-2-4、修改JVM参数"><a href="#2-2-4、修改JVM参数" class="headerlink" title="2.2.4、修改JVM参数"></a>2.2.4、修改JVM参数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi config/jvm.options</span><br><span class="line"></span><br><span class="line">-Xms4g  →  -Xms512m</span><br><span class="line">-Xmx4g  →  -Xmx512m</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将配置进行修改</span></span><br><span class="line">8-13:-XX:+UseConcMarkSweepGC</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改为</span></span><br><span class="line">8-13:-XX:+UseG1GC</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618584006615.png" alt="1618584006615"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618586292054.png" alt="1618586292054"></p><h5 id="2-2-5、创建普通用户"><a href="#2-2-5、创建普通用户" class="headerlink" title="2.2.5、创建普通用户"></a>2.2.5、创建普通用户</h5><p>&emsp;&emsp;由于es无法使用root用户启动，所以我们需要创建一个用户用于es的启动，这里要注意密码不要设置过于简单，会不通过。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建用户组   groupadd esgroup</span><br><span class="line">创建用户     useradd -g esgroup es</span><br><span class="line">设置权限     chown -R es:esgroup /usr/local/es/</span><br><span class="line">设置密码     passwd es</span><br><span class="line">cqw1314520</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618584684323.png" alt="1618584684323"></p><h5 id="2-2-6、修改linux内核参数"><a href="#2-2-6、修改linux内核参数" class="headerlink" title="2.2.6、修改linux内核参数"></a>2.2.6、修改linux内核参数</h5><p>我们需要修改Linux文件的最大打开数，否则会启动报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.conf </span><br><span class="line"></span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* soft nproc  4096</span><br><span class="line">* hard nproc  4096</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line">echo &quot;vm.max_map_count=262144&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h5 id="2-2-7、修改完成后，复制文件夹，拷贝出新的两个节点并放置到其他两台虚拟机中"><a href="#2-2-7、修改完成后，复制文件夹，拷贝出新的两个节点并放置到其他两台虚拟机中" class="headerlink" title="2.2.7、修改完成后，复制文件夹，拷贝出新的两个节点并放置到其他两台虚拟机中"></a>2.2.7、修改完成后，复制文件夹，拷贝出新的两个节点并放置到其他两台虚拟机中</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 改名</span></span><br><span class="line">mv elasticsearch-7.12.0/ elasticsearch-node-1</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618632686053.png" alt="1618632686053"></p><h5 id="2-2-8、修改子节点配置文件"><a href="#2-2-8、修改子节点配置文件" class="headerlink" title="2.2.8、修改子节点配置文件"></a>2.2.8、修改子节点配置文件</h5><p>&emsp;&emsp;根据截图进行修改对应内容，同时，由于改名，节点1也需要进行data和log目录路径修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ======================== Elasticsearch Configuration =========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">myelasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点名称</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示该节点会不会作为主节点，true表示会；false表示不会</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前节点是否用于存储数据，是：true、否：false</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据保存路径</span></span><br><span class="line"><span class="attr">path.data:</span> <span class="string">/usr/local/es/elasticsearch-node-2/data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志保存路径</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/usr/local/es/elasticsearch-node-2/logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lock the memory on startup</span></span><br><span class="line"><span class="attr">bootstrap.memory_lock:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点ip地址</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">192.168</span><span class="number">.66</span><span class="number">.129</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a custom port for HTTP:</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># es7.x 之后新增的配置，写入候选主节点的设备地址，在开启服务后可以被选为主节点</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> [<span class="string">&quot;192.168.66.128&quot;</span>,<span class="string">&quot;192.168.66.129&quot;</span>,<span class="string">&quot;192.168.66.130&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止脑裂</span></span><br><span class="line"><span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断结点是否脱离时间配置</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_timeout:</span> <span class="string">60s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断结点是否脱离次数配置</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_retries:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举master</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>,<span class="string">&quot;node-2&quot;</span>,<span class="string">&quot;node-3&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示开启跨域访问支持，此值默认为fals</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示跨域访问允许的域名地址，可使用正则表达式，“*”则表示允许所有域名访问</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618632788502.png" alt="1618632788502"></p><h4 id="2-3、启动ElasticSearch集群"><a href="#2-3、启动ElasticSearch集群" class="headerlink" title="2.3、启动ElasticSearch集群"></a>2.3、启动ElasticSearch集群</h4><p><font color='red'>这里需要注意，至少启动两个节点，如果只启动一个节点，则会出现访问失败、连接失败等问题…</font></p><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到es用户</span></span><br><span class="line">su es </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动命令,这里 -d 代表后台启动</span></span><br><span class="line">bash ./bin/elasticsearch -d</span><br></pre></td></tr></table></figure><p>使用命令开启端口防火墙权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9200/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=9300/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>7、查看结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618633146820.png" alt="1618633146820"></p><p>使用head工具观察：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618647178078.png" alt="1618647178078"></p><p>或者访问：<a href="http://ip:9200/_cluster/health%E6%9F%A5%E7%9C%8B%E5%81%A5%E5%BA%B7%E6%83%85%E5%86%B5">http://IP:9200/_cluster/health查看健康情况</a></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618651033029.png" alt="1618651033029"></p><h2 id="二、Es原理相关知识点"><a href="#二、Es原理相关知识点" class="headerlink" title="二、Es原理相关知识点"></a>二、Es原理相关知识点</h2><h3 id="1、单节点集群"><a href="#1、单节点集群" class="headerlink" title="1、单节点集群"></a>1、单节点集群</h3><p>&emsp;&emsp;使用我们的单机版es，创建索引（最新版本中，集群版本不支持单节点启动）</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618654099201.png" alt="1618654099201"></p><h3 id="2、故障转移"><a href="#2、故障转移" class="headerlink" title="2、故障转移"></a>2、故障转移</h3><p>&emsp;&emsp;当集群中只有一个节点在运行时，意味着会有一个单点故障问题——没有冗余。 幸运的是，我们只需再启动一个节点即可防止数据丢失。当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 cluster.name 配置，它就会自动发现集群并加入到其中。但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表。之所以配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上运行的节点才会自动组成集群。</p><p>&emsp;&emsp;如果启动了第二个节点，我们的集群将会拥有两个节点的集群: 所有主分片和副本分片都已被分配。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618654360643.png" alt="1618654360643"></p><h3 id="3、水平扩容"><a href="#3、水平扩容" class="headerlink" title="3、水平扩容"></a>3、水平扩容</h3><p>&emsp;&emsp;当启动了第三个节点，我们的集群将会拥有三个节点的集群 : 为了分散负载而对分片进行重新分配。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618654670366.png" alt="1618654670366"></p><h3 id="Question1：在上面的基础上，如果我们想要扩容超过6-个节点怎么办呢？"><a href="#Question1：在上面的基础上，如果我们想要扩容超过6-个节点怎么办呢？" class="headerlink" title="Question1：在上面的基础上，如果我们想要扩容超过6 个节点怎么办呢？"></a>Question1：在上面的基础上，如果我们想要扩容超过6 个节点怎么办呢？</h3><p>&emsp;&emsp;主分片的数目在索引创建时就已经确定了下来。实际上，这个数目定义了这个索引能够存储 的最大数据量。（实际大小取决于你的数据、硬件和使用场景。） 但是，读操作搜索和返回数据 可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片时，也将拥有越高的吞吐量。在运行中的集群上是可以动态调整副本分片数目的，我们可以按需伸缩集群。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618668699205.png" alt="1618668699205"></p><p>&emsp;&emsp;当然，如果只是在相同节点数目的集群上增加更多的副本分片并不能提高性能，因为每个分片从节点上获得的资源会变少。 你需要增加更多的硬件资源来提升吞吐量。但是更多的副本分片数提高了数据冗余量：按照上面的节点配置，我们可以在失去2 个节点的情况下不丢失任何数据。</p><h3 id="4、应对故障"><a href="#4、应对故障" class="headerlink" title="4、应对故障"></a>4、应对故障</h3><p>&emsp;&emsp;此时，我们关闭的节点是一个主节点。而集群必须拥有一个主节点来保证正常工作，所以发生的第一件事情就是选举一个新的主节点： Node 2 。在我们关闭 Node 1 的同时也失去了主分片 1 和 2 ，并且在缺失主分片的时候索引也不能正常工作。 如果此时来检查集群的状况，我们看到的状态将会为red ：不是所有主分片都在正常工作。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618668953595.png" alt="1618668953595"></p><p>&emsp;&emsp;幸运的是，在其它节点上存在着这两个主分片的完整副本，所以新的主节点立即将这些分片在 Node 2 和 Node 3 上对应的副本分片提升为主分片， 此时集群的状态将会为yellow 。这个提升主分片的过程是瞬间发生的。</p><h3 id="Question2：为什么我们集群状态是yellow-而不是-green-呢？"><a href="#Question2：为什么我们集群状态是yellow-而不是-green-呢？" class="headerlink" title="Question2：为什么我们集群状态是yellow 而不是 green 呢？"></a>Question2：为什么我们集群状态是yellow 而不是 green 呢？</h3><p>&emsp;&emsp;虽然我们拥有所有的三个主分片，但是由于我们设置了每个主分片需要对应2 份副本分片，而此时只存在一份副本分片。 所以集群不能为 green 的状态，但是我们不必过于担心：如果我们同样关闭了 Node 2 ，我们的程序 依然 可以保持在不丢任何数据的情况下运行，因为Node 3 为每一个分片都保留着一份副本。如果我们重新启动Node 1 ，集群可以将缺失的副本分片再次进行分配，那么集群的 状态也将恢复成之前的状态。 如果 Node 1 依然拥有着之前的分片，它将尝试去重用它们，同时仅从主分片复制发生了修改的数据文件。和之前的集群相比，只是 Master 节点切换了。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618669319274.png" alt="1618669319274"></p><h3 id="5、路由计算"><a href="#5、路由计算" class="headerlink" title="5、路由计算"></a>5、路由计算</h3><p>&emsp;&emsp;当索引一个文档的时候，文档会被存储到一个主分片中。Elasticsearch 如何知道一个文档应该存放到哪个分片中呢？当我们创建文档时，它如何决定这个文档应当被存储在分片1 还是分片 2 中呢？首先这肯定不会是随机的，否则将来要获取文档的时候我们就不知道从何处寻找了。实际上，这个过程是根据下面这个公式决定的：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618669573377.png" alt="1618669573377"></p><p>公式解析：</p><p>&emsp;&emsp;routing是一个可变值，默认是文档的 _id ，也可以设置成一个自定义的值。 routing 通过hash 函数生成一个数字，然后这个数字再除以 number_of_primary_shards （主分片的数量后得到余数。这个分布在 0 到 number_of_primary_shards（分片数量）-1 之间的余数，就是我们所寻求的文档所在分片的位置。</p><p>&emsp;&emsp;所有的文档的API get 、 index 、 delete 、 bulk 、 update 以及 mget ）都接受一个叫做 routing 的路由参数 ，通过这个参数我们可以自定义文档到分片的映射。一个自定义的路由参数可以用来确保所有相关的文档 例如所有属于同一个用户的文档 都被存储到同一个分片中。</p><h3 id="6、分片控制"><a href="#6、分片控制" class="headerlink" title="6、分片控制"></a>6、分片控制</h3><p>&emsp;&emsp;我们可以发送请求到集群中的任一节点。每个节点都有能力处理任意请求。 每个节点都知道集群中任一文档位置，所以可以直接将请求转发到需要的节点上。 我们将这类转发的节点称为。**协调节点 (coordinating node)**。</p><p>接下来，我们通过写流程、读流程和更新流程来了解协调节点的作用：</p><h4 id="6-1、写流程"><a href="#6-1、写流程" class="headerlink" title="6.1、写流程"></a>6.1、写流程</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618673590979.png" alt="1618673590979"></p><blockquote><p>新建、索引和删除文档所需要的步骤顺序：</p><p>1、客户端向任意集群节点发送请求；</p><p>2、获得请求的节点成为协调节点，该节点使用文档的id计算该文档属于哪个主分片，将文档发送给计算出来结果的那个主分片所在的节点；</p><p>3、主分片负责将数据进行保存，并将数据发送给对应的副本进行同步；</p><p>4、副本保存完成后，向主分片进行反馈；</p><p>5、主分片向客户端进行反馈，客户端获取返回结果。</p></blockquote><p>&emsp;&emsp;在客户端收到成功响应时，文档变更已经在主分片和所有副本分片执行完成，变更是安全的。有一些可选的请求参数允许你影响这个过程，可能以数据安全为代价提升性能。这些选项很少使用，因为 Elasticsearch 已经很快，但是为了完整起见， 请参考下面内容：</p><p>参数： consistency </p><p>&emsp;&emsp;consistency，即一致性。在默认设置下，即使仅仅是在试图执行一个 写 操作之前，主分片都会要求 必须要有 规定数量 ( quorum)（或者换种说法，也即必须要有大多数）的分片副本处于活跃可用状态，才会去执行 写 操作 其中分片副本可以是主分片或者副本分片 。这是为了避免在发生网络分区故障（ networkpartition ）的时候进行 写 操作，进而导致数据不一致。 规定数量 即：                                                                                                                                   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;int( (primary + number_of_replicas) / 2 ) + 1<br>&emsp;&emsp;consistency参数的值可以设为<font color='red'>one （只要主分片状态 ok 就允许执行 写 操作）,all （必须要主分片和所有副本分片的状态没问题才允许执行 写 操作） , 或quorum 。默认值为 quorum , 即大多数的分片副本状态没问题就允许执行 写操作。</font>注意，规定数量的计算公式中 number_of_replicas 指的是在索引设置中的设定副本分片数，而不是指当前处理活动状态的副本分片数。如果你的索引设置中指定了当前索引拥有三个副本分片，那规定数量的计算结果即：<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;int( (primary + 3 replicas) / 2 ) + 1 = 3<br>&emsp;&emsp;如果此时你只启动两个节点，那么处于活跃状态的分片副本数量就达不到规定数量，也因此您将无法索引和删除任何文档。<br>参数：timeout     </p><p>&emsp;&emsp;如果没有足够的副本分片会发生什么？Elasticsearch 会等待，希望更多的分片出现。默认情况下，它最多等待 1 分钟。 如果你需要，你可以使用 timeout 参数使它更早终止： 100 100 毫秒， 30s 是 30 秒。 </p><p>&emsp;&emsp;新索引默认有1 个副本分片，这意味着为满足规定数量应该需要两个活动的分片副本。 但是，这些默认的设置会阻止我们在单一节点上做任何事情。为了避免这个问题，要求只有当 number_of_replicas 大于 1 的时候，规定数量才会执行。</p><h4 id="6-2、读流程"><a href="#6-2、读流程" class="headerlink" title="6.2、读流程"></a>6.2、读流程</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618673574467.png" alt="1618673574467"></p><blockquote><p> 检索文档的步骤顺序：</p><p>1、客户端发送查询请求到任意节点；</p><p>2、获得请求的节点成为协调节点，该节点计算数据所在的分片及全部副本的位置；</p><p>3、为了能够负债均衡，可以轮询所有节点；</p><p>4、将请求发送给具体的节点进行查询；</p><p>5、节点返回查询结果，并将结果反馈给客户端。</p></blockquote><h4 id="6-3、更新流程"><a href="#6-3、更新流程" class="headerlink" title="6.3、更新流程"></a>6.3、更新流程</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618673859453.png" alt="1618673859453"></p><blockquote><p>1、客户端发送查询请求到任意节点；</p><p>2、获得请求的节点成为协调节点，该节点使用文档的id计算该文档属于哪个主分片，将需要修改的内容发送给计算出来结果的那个主分片所在的节点；</p><p>3、节点从主分片上检索文档，修改数据，并且尝试重新索引主分片的文档。 如果文档已经被另一个进程修改，它会重试本步骤 ，超过 retry_on_conflict 次后放弃。</p><p>4、如果 该节点成功地更新文档，它将新版本的文档并行转发到 其他的副本上覆盖，重新建立索引。一旦所有副本分片都返回成功， 该节点将向协调节点也返回成功，协调节点向客户端返回成功。</p></blockquote><p>注意：当主分片把更改转发到副本分片时，它不会转发更新请求。 相反，它会<strong>转发完整文档的新版本</strong>。请记住，这些更改将会异步转发到副本分片，并且不能保证它们以发送它们相同的顺序到达。 如果 Elasticsearch 仅转发更改请求，则可能以错误的顺序应用更改，导致得到损坏的文档。</p><h3 id="7、分片原理"><a href="#7、分片原理" class="headerlink" title="7、分片原理"></a>7、分片原理</h3><p>&emsp;&emsp;分片是 Elasticsearch <font color='red'>最小的工作单元</font>。传统的数据库每个字段存储单个值，但这对全文检索并不够。文本字段中的每个单词需要被搜索，对数据库意味着需要单个字段有索引多值的能力。最好的支持 是 一个字段多个值需求的数据结构是<font color='red'>倒排索引</font>。</p><h4 id="7-1、倒排索引"><a href="#7-1、倒排索引" class="headerlink" title="7.1、倒排索引"></a>7.1、倒排索引</h4><p>&emsp;&emsp;说起倒排索引，就不得不说一下与他对应的正向索引。</p><p>&emsp;&emsp;所谓的正向索引，就是搜索引擎会将待搜索的文件都对应一个文件ID ，搜索时将这个ID 和搜索关键字进行对应，形成 K V 对，然后对关键字进行统计计数。从广义来说，正向索引（doc values） 本质上是一个序列化的 列式存储 。列式存储 适用于聚合、排序、脚本等操作，所有的数字、地理坐标、日期、IP 和不分析（ not_analyzed ）字符类型都会默认开启。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618720994762.png" alt="1618720994762"></p><p>&emsp;&emsp;但是互联网上收录在搜索引擎中的文档的数目是个天文数字，这样的索引结构根本无法满足实时返回排名结果的要求。 而倒排索引的优势在于<strong>查找包含某个项的文档</strong>。所以，搜索引擎会将正向索引重新构建为倒排索引，即把文件ID 对应到关键词的映射转换为关键词到文件 ID 的映射，每个关键词都对应着一系列的文件，这些文件中都出现这个关键词。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618731007150.png" alt="1618731007150"></p><h4 id="7-2、文档搜索"><a href="#7-2、文档搜索" class="headerlink" title="7.2、文档搜索"></a>7.2、文档搜索</h4><p>&emsp;&emsp;早期的全文检索会为整个文档集合建立一个很大的倒排索引并将其写入到磁盘。一旦新的索引就绪，旧的就会被其替换，这样最近的变化便可以被检索到。倒排索引被写入磁盘后是不可改变的。</p><p>而这个不变性具有重要的价值：</p><blockquote><p>1、<strong>不需要锁</strong>。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题。</p><p>2、一旦索引被读入内核的文件系统缓存，便会留在那里，由于其不变性，只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。</p><p>3、而对于其他缓存（像上面讲到的filter缓存），在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化。</p><p>4、写入单个大的倒排索引允许数据被压缩，减少磁盘 I/O 和需要被缓存到内存的索引的使用量。</p></blockquote><p>&emsp;&emsp;当然，一个不变的索引也有不好的地方。主要事实是它是不可改变的! 假如你需要让一个新的文档可被搜索，你需要重建整个索引。这要么对一个索引所能包含的数据量造成了很大的限制，要么对索引可被更新的频率造成了很大的限制。那么如何在保留不变性的基础上实现倒排索引的更新呢？</p><h4 id="7-3、动态更新索引"><a href="#7-3、动态更新索引" class="headerlink" title="7.3、动态更新索引"></a>7.3、动态更新索引</h4><p>&emsp;&emsp;实现倒排索引的更新，唯一的方式是<font color='red'>使用更多的索引</font>。通过增加新的补充索引来反映修改，而不是直接重写整个倒排索引。每一个倒排索引都会被轮流查询到 从最早的开始查询完后再对结果进行合并。这也是ElasticSearch基于Lucene所引入的<font color='red'>按段搜索</font>的概念。</p><p>&emsp;&emsp;当一个查询被触发，所有已知的段按顺序被查询。词项统计会对所有段的结果进行聚合，以保证每个词和每个文档的关联都被准确计算。 这种方式可以用相对较低的成本将新文档添加到索引。<br>&emsp;&emsp;段是不可改变的，所以既不能把文档从旧的段中移除，也不能修改旧的段来进行反映文档的更新。 取而代之的是，每个提交点会包含一个 .del 文件，文件中会列出这些被删除文档的段信息。</p><p><font color='red'>注意：</font></p><blockquote><p>&emsp;&emsp;当一个文档被 “删除” 时，它实际上只是在 .del 文件中被 标记 删除。一个被标记删除的文档仍然可以被查询匹配到，文档仍然可以被查询匹配到， 但它会在最终结果被返回前从结果集中移除。但它会在最终结果被返回前从结果集中移除。<br>&emsp;&emsp;文档更新也是类似的操作方式：当一个文档被更新时，旧版本文档被标记删除，文档的新版本被索引到一个新的段中。 可能两个版本的文档都会被一个查询匹配到，但被删除的那个旧版本文档在结果集返回前就已经被移除。</p></blockquote><h4 id="7-4、近实时搜索"><a href="#7-4、近实时搜索" class="headerlink" title="7.4、近实时搜索"></a>7.4、近实时搜索</h4><p>&emsp;&emsp;随着按段搜索的发展，一个新的文档从索引到可被 搜索的延迟显著降低了。新文档在几分钟之内即可被检索，但这样还是不够快。如图，一个新的文档从索引到可被搜索的延时为：</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<strong>延时 = 主分片操作时的延时 + 并行写入副本的最大延时</strong></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618746041856.png" alt="1618746041856"></p><h5 id="7-4-1、写操作在内存与磁盘中的流程"><a href="#7-4-1、写操作在内存与磁盘中的流程" class="headerlink" title="7.4.1、写操作在内存与磁盘中的流程"></a>7.4.1、写操作在内存与磁盘中的流程</h5><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618757764643.png" alt="1618757764643"></p><blockquote><p>1、一个文档被索引之后，就会被添加到内存缓冲区，然后追加到了 translog；</p><p>2、分片每秒会被刷新1次在（refresh：1s）；</p><p>把内存缓冲区中的文档写入文件系统缓存os cache中，同时使该缓存能够被搜索，同时清空内存缓冲区</p><p>3、每隔一段较长的时间文件系统缓存执行一次刷新（flush：30min，或者transLog太大时）</p><p>此时会将之前追加的日志创建成一个新的transLog，并将一个提交点写入磁盘，旧的translog被删除。</p><p>在flush到磁盘时，此时就会合并之前的操作，例如，之前修改一个文档是保存一份文档的新版本，同时对旧版本标记删除，合并时就真的会将旧版本进行删除，删除文档同理。</p></blockquote><h2 id="三、文档分析"><a href="#三、文档分析" class="headerlink" title="三、文档分析"></a>三、文档分析</h2><p>ElasticSearch对文档分析，其实包含下面的过程：<br>a、将一块文本分成适合于倒排索引的独立的 词条；<br>b、将这些词条统一化为标准格式以提高它们的 可搜索性 ，或者 recall。</p><h3 id="1、分析器的功能"><a href="#1、分析器的功能" class="headerlink" title="1、分析器的功能"></a>1、分析器的功能</h3><p>&emsp;&emsp;分析器执行分析的操作，其实是将字符过滤器、分词器和Token过滤器三个功能封装在一起。</p><h4 id="1-1、字符过滤器（character-filter）"><a href="#1-1、字符过滤器（character-filter）" class="headerlink" title="1.1、字符过滤器（character filter）"></a>1.1、字符过滤器（character filter）</h4><p>&emsp;&emsp;字符过滤器会在最早执行，它的功能主要是在分此前整理字符串。例如：去掉html标签，或者转换字符（&amp; –&gt;  and）等等。</p><blockquote><p>字符过滤器的类型一般有三种</p><p>a、<strong>html_scrip 自动去除html过滤器</strong>：把过滤内容中所有的html标签进行过滤；</p><p>&emsp;&emsp;它包含一个配置项：escaped_tags 功能是保留某些标签，例如保留<code>&lt;a&gt;&lt;/a&gt;</code>标签，则配置”escaped_tags”: [“a”]即可。</p><p>b、<strong>mapping 映射过滤器</strong>：把某些内容映射为其他内容；</p><p>&emsp;&emsp;例如：把<code>&amp;</code>转换为<code>and</code>，把<code>|</code>转为<code>or</code>。</p><p>c、<strong>Pattern 正则过滤器</strong>：可以通过正则表达式对文档内容进行替换。</p><p>&emsp;&emsp;例如：把文档中所有的<code>-</code>替换成<code>_</code>，他有一个配置项：replacement 功能是填写替换的内容。</p></blockquote><h4 id="1-2、分词器（tokenizer）"><a href="#1-2、分词器（tokenizer）" class="headerlink" title="1.2、分词器（tokenizer）"></a>1.2、分词器（tokenizer）</h4><p>&emsp;&emsp;紧接其后，字符串会来到分词器这里，将字符串分成单个的词条。一个简单的分词器遇到空格或标点符号的时候，可能会将文本拆分成词条。</p><h4 id="1-3、Token过滤器（token-filter）"><a href="#1-3、Token过滤器（token-filter）" class="headerlink" title="1.3、Token过滤器（token filter）"></a>1.3、Token过滤器（token filter）</h4><p>&emsp;&emsp;最后词条按照顺序通过每个Token过滤器，在这个过程中，可能会对词条进行改变，例如：删除一些没意义的词条（a 、the 、and），或者改变词条（将Quick –&gt; quick），或者增加词条（类似jump和leap这种同义词）等等。</p><h3 id="2、ElasticSearch的内置分析器"><a href="#2、ElasticSearch的内置分析器" class="headerlink" title="2、ElasticSearch的内置分析器"></a>2、ElasticSearch的内置分析器</h3><p>&emsp;&emsp;Elasticsearch附带了可以直接使用的预包装的分析器。接下来我们简单介绍几种：</p><h4 id="2-1、简单分析器"><a href="#2-1、简单分析器" class="headerlink" title="2.1、简单分析器"></a>2.1、简单分析器</h4><p>&emsp;&emsp;简单分析器会在任何不是字母的地方分割文本并将词条小写。如：</p><p>set,a.file_index  ===&gt;   set,a,file,index</p><h4 id="2-2、空格分析器"><a href="#2-2、空格分析器" class="headerlink" title="2.2、空格分析器"></a>2.2、空格分析器</h4><p>&emsp;&emsp;空格分析器会在任何空格的地方划分文本。如：</p><p>set   a  file_index ===&gt;  set,a,file_index</p><h4 id="2-3、语言分析器"><a href="#2-3、语言分析器" class="headerlink" title="2.3、语言分析器"></a>2.3、语言分析器</h4><p>&emsp;&emsp;特定的语言分析器可以对不同语言进行分析，由于可以考虑语言的特点，它们分析的结果往往更加符合实际情况。例如：英语分析器自带一组英语无用词库，可以将一些没有意义的词汇进行删除（the 、a），亦或者可以提取英语单词的词干（logs  ==&gt;  log），亦或者我们之前提到的IK分词器，能够对中文进行合理的分割。</p><h3 id="3、测试分析器"><a href="#3、测试分析器" class="headerlink" title="3、测试分析器"></a>3、测试分析器</h3><p>测试命令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,<span class="comment">//标准分析器</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;Text to analyze&quot;</span><span class="comment">//分析内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618841410863.png" alt="1618841410863"></p><p>名词解释：</p><p>token：指实际存储到索引的词条；</p><p>position：指词条在原始文本中出现的位置；</p><p>start_offset  和  end_offset：指字符在原始字符串中的位置。</p><h3 id="4、自定义分析器"><a href="#4、自定义分析器" class="headerlink" title="4、自定义分析器"></a>4、自定义分析器</h3><p>&emsp;&emsp;虽然Elasticsearch 带有一些现成的分析器，然而在分析器上 Elasticsearch 真正的强大之处在于，你可以通过在一个适合你的特定数据的设置之中组合字符过滤器、分词器、词汇单元过滤器来创建自定义的分析器。</p><p>自定义一个分析器：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;char_filter&quot;</span>: &#123;  <span class="comment">//自定义字符过滤器，设置映射规则</span></span><br><span class="line">          <span class="attr">&quot;&amp;_to_and&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;mapping&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;mappings&quot;</span>: [ <span class="string">&quot;&amp;=&gt; and &quot;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>:&#123;  <span class="comment">//过滤器，过滤指定字符</span></span><br><span class="line">        <span class="attr">&quot;my_stopwords&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;stop&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;stopwords&quot;</span>: [ <span class="string">&quot;the&quot;</span>, <span class="string">&quot;a&quot;</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span>: &#123;   <span class="comment">//自定义分词器</span></span><br><span class="line">        <span class="attr">&quot;my_analyzer&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;custom&quot;</span>,  <span class="comment">//告诉ES这是一个自定义分词器</span></span><br><span class="line">          <span class="attr">&quot;char_filter&quot;</span>: [ <span class="string">&quot;html_strip&quot;</span>, <span class="string">&quot;&amp;_to_and&quot;</span> ],  <span class="comment">//设置两个字符过滤器</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span>: <span class="string">&quot;standard&quot;</span>,  <span class="comment">//设置内置分词器作为基本分词器</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span>: [ <span class="string">&quot;lowercase&quot;</span>, <span class="string">&quot;my_stopwords&quot;</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分词测试：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618846054509.png" alt="1618846054509"></p><h2 id="四、文档冲突"><a href="#四、文档冲突" class="headerlink" title="四、文档冲突"></a>四、文档冲突</h2><p>&emsp;&emsp;Elasticsearch是分布式的。当文档创建、更新或删除时， 新版本的文档必须复制到集群中的其他节点。 Elasticsearch 也是异步和并发的，这意味着这些复制请求被并行发送，并且到达目的地时也许顺序是乱的 。 所以Elasticsearch 需要一种方法确保文档的旧版本不会覆盖新的版本。</p><p>&emsp;&emsp;我们之前在做各种各样的操作的时候，我们都知道每个文档中都存在一个版本号，当文件被修改时，版本号就会递增。ElasticSearch使用<font color='red'>CAS加版本号</font>来确保变更是被顺序执行的。如果版本不是当前版本号，我们的请求就会失败。</p><p>&emsp;&emsp;当然，旧的版本使用的是version，但是新的版本不建议了，会提示以下错误，提示我们使用 if_seq_no和 if_primary_term。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618847618574.png" alt="1618847618574"></p><p>参考链接：<a href="https://www.bilibili.com/video/BV1hh411D7sb?p=1">https://www.bilibili.com/video/BV1hh411D7sb?p=1</a></p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> NoSQL </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch基础篇</title>
      <link href="/blog/2021/04/14/ElasticSearch%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/blog/2021/04/14/ElasticSearch%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch基础篇"><a href="#ElasticSearch基础篇" class="headerlink" title="ElasticSearch基础篇"></a>ElasticSearch基础篇</h1><h1 id="一、入门介绍"><a href="#一、入门介绍" class="headerlink" title="一、入门介绍"></a>一、入门介绍</h1><p>&emsp;&emsp;Lucene是一套信息检索工具包，是一个<font color='red'>jar包</font>，不包含搜索引擎系统！它包含：索引结构、读写索引的工具、排序，搜索规则。。。工具类！<br>Lucene和ElasticSearch关系：<br>&emsp;&emsp;ElasticSearch是基于Lucene做了一些封装和增强（上手十分简单！）</p><h2 id="1、ElasticSearch概述"><a href="#1、ElasticSearch概述" class="headerlink" title="1、ElasticSearch概述"></a>1、ElasticSearch概述</h2><p>&emsp;&emsp;Elaticsearch，简称为ES， ES是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。ES也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。<br>&emsp;&emsp;据国际权威的数据库产品评测机构DB Engines的统计，在2016年1月，ElasticSearch已超过Solr等，成为排名第一的搜索引擎类应用。</p><h2 id="2、历史"><a href="#2、历史" class="headerlink" title="2、历史"></a>2、历史</h2><p>&emsp;&emsp;多年前，一个叫做Shay Banon的刚结婚不久的失业开发者，由于妻子要去伦敦学习厨师，他便跟着也去了。在他找工作的过程中，为了给妻子构建一个食谱的搜索引擎，他开始构建一个早期版本的Lucene。<br>&emsp;&emsp;直接基于Lucene工作会比较困难，所以Shay开始抽象Lucene代码以便Java程序员可以在应用中添加搜索功能。他发布了他的第一个开源项目，叫做“Compass”。<br>&emsp;&emsp;后来Shay找到一份工作，这份工作处在高性能和内存数据网格的分布式环境中，因此高性能的、实时的、分布式的搜索引擎也是理所当然需要的。然后他决定重写Compass库使其成为一个独立的服务叫做Elasticsearch。<br>&emsp;&emsp;第一个公开版本出现在2010年2月，在那之后Elasticsearch已经成为Github上最受欢迎的项目之一，代码贡献者超过300人。一家主营Elasticsearch的公司就此成立，他们一边提供商业支持一边开发新功能，不过Elasticsearch将永远开源且对所有人可用。<br>Shay的妻子依旧等待着她的食谱搜索……</p><h2 id="3、谁在使用ES"><a href="#3、谁在使用ES" class="headerlink" title="3、谁在使用ES"></a>3、谁在使用ES</h2><p>1、维基百科，类似百度百科，全文检索，高亮，搜索推荐</p><p>2、The Guardian（国外新闻网站），类似搜狐新闻，用户行为日志（点击，浏览，收藏，评论）+社交网络数据（对某某新闻的相关看法），数据分析，给到每篇新闻文章的作者，让他知道他的文章的公众反馈（好，坏，热门，垃圾，鄙视，崇拜）</p><p>3、Stack Overflow（国外的程序异常讨论论坛），IT问题，程序的报错，提交上去，有人会跟你讨论和回答，全文检索，搜索相关问题和答案，程序报错了，就会将报错信息粘贴到里面去，搜索有没有对应的答案</p><p>4、GitHub（开源代码管理），搜索上千亿行代码</p><p>5、电商网站，检索商品</p><p>6、日志数据分析，logstash采集日志，ES进行复杂的数据分析，ELK技术，elasticsearch+logstash+kibana</p><p>7、商品价格监控网站，用户设定某商品的价格阈值，当低于该阈值的时候，发送通知消息给用户，比如说订阅牙膏的监控，如果高露洁牙膏的家庭套装低于50块钱，就通知我，我就去买</p><p>8、BI系统，商业智能，Business Intelligence。比如说有个大型商场集团，BI，分析一下某某区域最近3年的用户消费金额的趋势以及用户群体的组成构成，产出相关的数张报表，**区，最近3年，每年消费金额呈现100%的增长，而且用户群体85%是高级白领，开一个新商场。ES执行数据分析和挖掘，Kibana进行数据可视化</p><p>9、国内：站内搜索（电商，招聘，门户，等等），IT系统搜索（OA，CRM，ERP，等等），数据分析（ES热门的一个使用场景）</p><h1 id="二、ES和solr的差别"><a href="#二、ES和solr的差别" class="headerlink" title="二、ES和solr的差别"></a>二、ES和solr的差别</h1><h2 id="1、Elasticsearch简介"><a href="#1、Elasticsearch简介" class="headerlink" title="1、Elasticsearch简介"></a>1、Elasticsearch简介</h2><p>&emsp;&emsp;Elasticsearch是一个实时分布式搜索和分析引擎。它让你以前所未有的速度处理大数据成为可能。它用于<font color='red'>全文搜索、结构化搜索、分析以及将这三者混合使用</font>：</p><p>&emsp;&emsp;维基百科使用Elasticsearch提供全文搜索并高亮关键字，以及输入实时搜索(search-asyou-type)和搜索纠错(did-you-mean)等搜索建议功能。</p><p>&emsp;&emsp;英国卫报使用Elasticsearch结合用户日志和社交网络数据提供给他们的编辑以实时的反馈，以便及时了解公众对新发表的文章的回应。</p><p>&emsp;&emsp;StackOverflow结合全文搜索与地理位置查询，以及more-like-this功能来找到相关的问题和答案。</p><p>&emsp;&emsp;Github使用Elasticsearch检索1300亿行的代码。</p><p>&emsp;&emsp;但是Elasticsearch不仅用于大型企业，它还让像DataDog以及Klout这样的创业公司将最初的想法变成可扩展的解决方案。Elasticsearch可以在你的笔记本上运行，也可以在数以百计的服务器上处理PB级别的数据 。</p><p>&emsp;&emsp;Elasticsearch是一个基于Apache Lucene™的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。</p><p>&emsp;&emsp;但是，Lucene只是一个库。想要使用它，你必须使用Java来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p><p>&emsp;&emsp;Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的<strong>RESTful API</strong>  来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><h2 id="2、Solr简介"><a href="#2、Solr简介" class="headerlink" title="2、Solr简介"></a>2、Solr简介</h2><p>&emsp;&emsp;Solr 是Apache下的一个顶级开源项目，采用Java开发，它是基于Lucene的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化。</p><p>&emsp;&emsp;Solr可以独立运行，运行在Jetty、Tomcat等这些Servlet容器中，Solr 索引的实现方法很简单，<strong>用 POST方法向 Solr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr根据xml文档添加、删除、更新索引</strong>。Solr 搜索只需要发送 HTTP GET 请求，然后对 Solr 返回Xml、json等格式的查询结果进行解析，组织页面布局。Solr不提供构建UI的功能，Solr提供了一个管理界面，通过管理界面可以查询Solr的配置和运行情况。</p><p>&emsp;&emsp;solr是基于lucene开发企业级搜索服务器，实际上就是封装了lucene。</p><p>&emsp;&emsp;Solr是一个独立的企业级搜索应用服务器，它对外提供类似于<strong>Web-service</strong>的API接口。用户可以通过http请求，向搜索引擎服务器提交一定格式的文件，生成索引；也可以通过提出查找请求，并得到返回结果。</p><h2 id="3、Lucene简介"><a href="#3、Lucene简介" class="headerlink" title="3、Lucene简介"></a>3、Lucene简介</h2><p>&emsp;&emsp;Lucene是apache软件基金会4 jakarta项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。Lucene的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。Lucene是一套用于全文检索和搜寻的开源程式库，由Apache软件基金会支持和提供。Lucene提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在Java开发环境里Lucene是一个成熟的免费开源工具。就其本身而言，Lucene是当前以及最近几年最受欢迎的免费Java信息检索程序库。人们经常提到信息检索程序库，虽然与搜索引擎有关，但不应该将信息检索程序库与搜索引擎相混淆。</p><p>&emsp;&emsp;Lucene是一个全文检索引擎的架构。那什么是全文搜索引擎？</p><p>&emsp;&emsp;全文搜索引擎是名副其实的搜索引擎，国外具代表性的有Google、Fast/AllTheWeb、AltaVista、Inktomi、Teoma、WiseNut等，国内著名的有百度（Baidu）。它们都是通过从互联网上提取的各个网站的信息（以网页文字为主）而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户，因此他们是真正的搜索引擎。</p><p>&emsp;&emsp;从搜索结果来源的角度，全文搜索引擎又可细分为两种，一种是拥有自己的检索程序（Indexer），俗称“蜘蛛”（Spider）程序或“机器人”（Robot）程序，并自建网页数据库，搜索结果直接从自身的数据库中调用，如上面提到的7家引擎；另一种则是租用其他引擎的数据库，并按自定的格式排列搜索结果，如Lycos引擎。</p><h2 id="4、ElasticSearch和solr比较"><a href="#4、ElasticSearch和solr比较" class="headerlink" title="4、ElasticSearch和solr比较"></a>4、ElasticSearch和solr比较</h2><p><img src="http://cheng_qiwei.gitee.io/blog/img/354604-20180122010705803-1082290454.png"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/354604-20180122010730865-1548826450.png" alt="354604-20180122010730865-1548826450"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/354604-20180122010754100-1951694800.png" alt="354604-20180122010754100-1951694800"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/354604-20180122011131225-347761833.png"></p><h1 id="三、ElasticSearch安装"><a href="#三、ElasticSearch安装" class="headerlink" title="三、ElasticSearch安装"></a>三、ElasticSearch安装</h1><p>&emsp;&emsp;声明：由于ElasticSearch使用Java开发，所以需要Java开发环境，其对JDK的版本最低要求是：JDK1.8！同时，由于要使用ElasticSearch客户端，界面工具，所以还需要nodejs的环境！</p><h2 id="1、下载资源【基于21-04-07】"><a href="#1、下载资源【基于21-04-07】" class="headerlink" title="1、下载资源【基于21-04-07】"></a>1、下载资源【基于21-04-07】</h2><h3 id="1-1、官方环境"><a href="#1-1、官方环境" class="headerlink" title="1.1、官方环境"></a>1.1、官方环境</h3><p>ElasticSearch[目前最新7.12.0]：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>logstash[目前最新7.12.0]：<a href="https://www.elastic.co/cn/downloads/logstash">https://www.elastic.co/cn/downloads/logstash</a></p><p>kibana[目前最新7.12.0]：<a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></p><p>ik分词器[目前最新7.12.0]：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>elasticsearch-head-master下载[目前最新5.0.0]：<a href="https://github.com/mobz/elasticsearch-head/releases/tag/v5.0.0">https://github.com/mobz/elasticsearch-head/releases/tag/v5.0.0</a></p><h3 id="1-2、华为云的镜像去下载"><a href="#1-2、华为云的镜像去下载" class="headerlink" title="1.2、华为云的镜像去下载"></a>1.2、华为云的镜像去下载</h3><p>速度很快，自己找对应版本就可以<br>ElasticSearch[目前最新7.9.3]： <a href="https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D">https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D</a></p><p>logstash[目前最新7.9.3]： <a href="https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D">https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D</a></p><p>kibana[目前最新7.9.3]： <a href="https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D">https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D</a></p><h2 id="2、window环境安装ElasticSearch"><a href="#2、window环境安装ElasticSearch" class="headerlink" title="2、window环境安装ElasticSearch"></a>2、window环境安装ElasticSearch</h2><h3 id="2-1、安装ElasticSearch"><a href="#2-1、安装ElasticSearch" class="headerlink" title="2.1、安装ElasticSearch"></a>2.1、安装ElasticSearch</h3><p>&emsp;&emsp;解压安装包即可</p><h3 id="2-2、熟悉目录"><a href="#2-2、熟悉目录" class="headerlink" title="2.2、熟悉目录"></a>2.2、熟悉目录</h3><p>bin：启动文件(.bat)<br>config：配置文件<br>​    log4j2.properties：日志配置文件<br>​    jvm.options：java虚拟机的配置<br>​    elasticsearch.yml：ES的配置文件 端口9200 ！跨域问题<br>data：索引数据目录<br>lib：相关Jar包<br>logs：日志<br>modules：功能模块<br>plugins：插件</p><p>jvm的配置调整一下，需要更改虚拟机配置改为256M</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210407155353343.png" alt="image-20210407155353343"></p><p>调整ElasticSearch.yml文件，添加以下内容，解决跨域问题</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-3、启动"><a href="#2-3、启动" class="headerlink" title="2.3、启动"></a>2.3、启动</h3><p>&emsp;&emsp;双击ElasticSearch下的bin目录中的elasticsearch.bat启动，控制台显示的日志（等待启动完<br>毕！）：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210407173536506.png" alt="image-20210407173536506"></p><h3 id="2-4、访问测试"><a href="#2-4、访问测试" class="headerlink" title="2.4、访问测试"></a>2.4、访问测试</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210407173520663.png" alt="image-20210407173520663"></p><h2 id="3、windows环境安装可视化界面ES-head"><a href="#3、windows环境安装可视化界面ES-head" class="headerlink" title="3、windows环境安装可视化界面ES head"></a>3、windows环境安装可视化界面ES head</h2><p>&emsp;&emsp;Head是elasticsearch的集群管理工具，可以用于数据的浏览查询。</p><h3 id="3-1、安装head"><a href="#3-1、安装head" class="headerlink" title="3.1、安装head"></a>3.1、安装head</h3><h4 id="3-1-1、解压安装包即可"><a href="#3-1-1、解压安装包即可" class="headerlink" title="3.1.1、解压安装包即可"></a>3.1.1、解压安装包即可</h4><h4 id="3-1-2、解压之后安装依赖并启动，访问端口9100"><a href="#3-1-2、解压之后安装依赖并启动，访问端口9100" class="headerlink" title="3.1.2、解压之后安装依赖并启动，访问端口9100"></a>3.1.2、解压之后安装依赖并启动，访问端口9100</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p><font color='red'>&emsp;&emsp;注：由于ES进程和客户端进程端口号不同，存在跨域问题，所以我们要在ES的配置文件中配置下跨域问题</font></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408100717533.png" alt="image-20210408100717533"></p><p>初学就把ES当做一个数据库！可以建立索引（库），文档（库中的数据）</p><p>head就当做一个数据展示工具！后面所有的查询用Kibana！</p><h2 id="4、了解ELK"><a href="#4、了解ELK" class="headerlink" title="4、了解ELK"></a>4、了解ELK</h2><p>&emsp;&emsp;ELK是Elasticsearch、Logstash、Kibana三大开源框架首字母大写简称。市面上也被成为Elastic Stack。其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用Elasticsearch作为底层支持框架，可见Elasticsearch提供的搜索能力确实强大,市面上很多时候我们简称Elasticsearch为ES。Logstash是ELK的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka等）。Kibana可以将elasticsearch的数据通过友好的页面展示出来，提供实时分析的功能。</p><p>&emsp;&emsp;市面上很多开发只要提到ELK能够一致说出它是一个日志分析架构技术栈总称，但实际上ELK不仅仅适用于**<font color='red'>日志分析，它还可以支持其它任何数据分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。</font>**</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408102825233.png" alt="image-20210408102825233"></p><h2 id="5、windows环境安装Kibana"><a href="#5、windows环境安装Kibana" class="headerlink" title="5、windows环境安装Kibana"></a>5、windows环境安装Kibana</h2><p>&emsp;&emsp;Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查询动态。设置Kibana非常简单。无需编码或者额外的基础架构，几分钟内就可以完成Kibana安装并启动Elasticsearch索引监测。</p><h3 id="5-1、安装Kibana"><a href="#5-1、安装Kibana" class="headerlink" title="5.1、安装Kibana"></a>5.1、安装Kibana</h3><p>5.1.1、将压缩包解压即可（需要一些时间），是一个标准的工程<br>5.1.2、然后进入到bin目录下，启动服务就可以了（需要等待启动完成），ELK基本上都是拆箱即用的</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408102253163.png" alt="image-20210408102253163"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408102401994.png" alt="image-20210408102401994"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408102414725.png" alt="image-20210408102414725"></p><h3 id="5-2、语言配置"><a href="#5-2、语言配置" class="headerlink" title="5.2、语言配置"></a>5.2、语言配置</h3><p>&emsp;&emsp;Kibana支持中文，中文包位置：kibana\x-pack\plugins\translations\ translations\zh-CN.json，只需要在配置文件 kibana.yml 中加入如下内容并重启Kibana即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i18n.locale: &quot;zh-CN&quot;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408103349839.png" alt="image-20210408103349839"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408103659934.png" alt="image-20210408103659934"></p><h1 id="四、ES核心概念"><a href="#四、ES核心概念" class="headerlink" title="四、ES核心概念"></a>四、ES核心概念</h1><h2 id="1、ElasticSearch与传统关系型数据库的比较"><a href="#1、ElasticSearch与传统关系型数据库的比较" class="headerlink" title="1、ElasticSearch与传统关系型数据库的比较"></a>1、ElasticSearch与传统关系型数据库的比较</h2><p>&emsp;&emsp;在前面的学习中，我们已经掌握了es是什么，同时也把es的服务已经安装启动，那么es是如何去存储数据，数据结构是什么，又是如何实现搜索的呢？我们先来聊聊ElasticSearch的相关概念吧！</p><p>问题：集群，节点，索引，类型，文档，分片，映射是什么？</p><h2 id="2、索引（index）"><a href="#2、索引（index）" class="headerlink" title="2、索引（index）"></a>2、索引（index）</h2><p>&emsp;&emsp;索引是ES的一个逻辑存储，对应关系型数据库中的数据库，ES可以把索引数据存放到服务器中，也可以sharding(分片)后存储到多台服务器上。每个索引有一个或多个分片，每个分片可以有多个副本。</p><p>&emsp;&emsp;一个ElasticSearch可以就是一个集群，默认的集群名称就是elasticsearch。一个集群至少有一个节点，而一个节点就是一个elasricsearch进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个5个分片 ( primary shard ,又称主分片 ) 构成的，<font color='red'>每份分片是一个Lucene的索引</font>，每一个主分片会有一个副本 ( replica shard ,又称复制分片 )。</p><p>&emsp;&emsp;在一个多节点的ElasticSearch集群中，<font color='red'>主分片和对应的复制分片都不会在同一个节点内，这样有利于某个节点挂掉 了，数据也不至于丢失</font>。 实际上，一个分片是一个Lucene索引，一个包含倒排索引的文件目录，倒排索引的结构使 得elasticsearch在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字。</p><h3 id="2-1、分片（shard）"><a href="#2-1、分片（shard）" class="headerlink" title="2.1、分片（shard）"></a><font color='red'>2.1、分片（shard）</font></h3><p>&emsp;&emsp;如果我们的索引数据量很大，超过硬件存放单个文件的限制，就会影响查询请求的速度，ES引入了分片技术。一个分片本身就是一个完整的搜索引擎，文档存储在分片中，而分片会被分配到集群中的各个节点中，随着集群的扩大和缩小，ES会自动的将分片在节点之间进行迁移，以保证集群能保持一种平衡。分片有以下特点：</p><ol><li>ES的一个索引可以包含多个分片（shard）；</li><li>每一个分片（shard）都是一个最小的工作单元，承载部分数据；</li><li>每个shard都是一个lucene实例，有完整的建立索引和处理请求的能力；</li><li>增减节点时，shard会自动在nodes中负载均衡；</li><li>一个文档只能完整的存放在一个shard上（主节点）</li><li>一个索引中含有shard的数量，默认值为5，在索引创建后这个值是不能被更改的。</li><li>优点：水平分割和扩展我们存放的内容索引；分发和并行跨碎片操作提高性能/吞吐量；</li><li>每一个shard关联的副本分片（replica shard）的数量，默认值为1，这个设置在任何时候都可以修改。</li><li>Pshard（主分片）和对应的Rshard（副本）<strong>不能同时存在于同一个节点</strong>，所以最低的可用配置是两个节点，互为主备。</li><li>primary shard【主分片】是可读可写的，而replica shard【分片副本】是只读的。</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">分片的好处：</span><br><span class="line">1.当某一台服务器宕机，可以保证其他数据的完整性（非最优方案）</span><br><span class="line">2.横向扩容：当数据量增大时，只需要添加一个新的结点，然后创建新的索引，操作非常简单</span><br><span class="line">3.看似占用了更多的服务器资源，实际上replica shard带来了性能和集群吞吐量的提升，这点和横向扩容是相同的。</span><br><span class="line">不同的是，横向扩容是可以承载更多的数据，而replica shard是单纯的增加数据的副本，带来的是性能和高可用。</span><br></pre></td></tr></table></figure><p><font color='red'>&emsp;&emsp;被混淆的概念是，一个 Lucene 索引 我们在 Elasticsearch 称作 分片 。 一个 Elasticsearch 索引 是分片的集合。 当 Elasticsearch 在索引中搜索的时候， 他发送查询到每一个属于索引的分片(Lucene 索引)，然后合并每个分片的结果到一个全局的结果集。</font></p><h3 id="2-2、副本（replica）"><a href="#2-2、副本（replica）" class="headerlink" title="2.2、副本（replica）"></a>2.2、副本（replica）</h3><p>副本（replica shard）就是shard的冗余备份，它的主要作用：</p><ol><li>冗余备份，防止数据丢失；</li><li>shard异常时负责容错和负载均衡；</li></ol><h2 id="3、类型（type）"><a href="#3、类型（type）" class="headerlink" title="3、类型（type）"></a>3、类型（type）</h2><p>&emsp;&emsp;ES中，一个索引可以存储多个用于不同用途的对象，可以通过类型来区分索引中的不同对象，对应关系型数据库中表的概念。类型在各个版本的elasticsearch中的变化如下图：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618651424501.png" alt="1618651424501"></p><p>&emsp;&emsp;我们都知道elasticsearch是基于Lucene开发的搜索引擎，而ES中不同type下名称相同的filed最终在Lucene中的处理方式是一样的。举个例子，两个不同type下的两个user_name，在ES同一个索引下其实被认为是同一个filed，你必须在两个不同的type中定义相同的filed映射。否则，不同type中的相同字段名称就会在处理中出现冲突的情况，导致Lucene处理效率下降。</p><p>&emsp;&emsp;去掉type能够使数据存储在独立的index中，这样即使有相同的字段名称也不会出现冲突，就像ElasticSearch出现的第一句话一样“你知道的，为了搜索····”，去掉type就是为了提高ES处理数据的效率。</p><p>&emsp;&emsp;除此之外，在同一个索引的不同type下存储字段数不一样的实体会导致存储中出现稀疏数据，影响Lucene压缩文档的能力，导致ES查询效率的降低。</p><h2 id="4、文档（document）"><a href="#4、文档（document）" class="headerlink" title="4、文档（document）"></a>4、文档（document）</h2><p>&emsp;&emsp;存储在ES中的主要实体叫文档，可以理解为关系型数据库中表的一行数据记录。每个文档由多个<strong>字段（field）</strong>组成。区别于关系型数据库的是，ES是一个非结构化的数据库，每个文档可以有不同的字段，并且有一个唯一标识。</p><p>&emsp;&emsp;ElasticSearch是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，在ElasticSearch中，文档有几个 重要属性 :</p><ul><li><p>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含 key:value</p></li><li><p>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的！{就是一个JSON对象}</p></li><li><p>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在elasticsearch中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</p></li></ul><p>&emsp;&emsp;尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符 串也可以是整形。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型。</p><h2 id="5、映射（mapping）"><a href="#5、映射（mapping）" class="headerlink" title="5、映射（mapping）"></a>5、映射（mapping）</h2><p>&emsp;&emsp;mapping是处理数据的方式和规则方面做一些限制，如：某个字段的数据类型、默认值、分析器、是否被索引等等。这些都是映射里面可以设置的，其它就是处理ES里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p><h1 id="五、IK分词器"><a href="#五、IK分词器" class="headerlink" title="五、IK分词器"></a>五、IK分词器</h1><h2 id="1、什么是分词器？什么是IK分词器？"><a href="#1、什么是分词器？什么是IK分词器？" class="headerlink" title="1、什么是分词器？什么是IK分词器？"></a>1、什么是分词器？什么是IK分词器？</h2><p>&emsp;&emsp;分词器，是将用户输入的一段文本，分析成符合逻辑的一种工具。而IK分词器，则是把一段中文划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作。ElasticSearch默认的分词是将每个字看成一个词，比如 “我是程序员” 会被分为”我”,“是”,“程”,“序”,“员”，这显然是不符合要求的，所以我们需要安装使用IK中文分词器来解决这个问题。<br>&emsp;&emsp;IK提供了两个分词算法：ik_smart 和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word为最细粒度划分。</p><h2 id="2、ElasticSearch安装IK分词器"><a href="#2、ElasticSearch安装IK分词器" class="headerlink" title="2、ElasticSearch安装IK分词器"></a>2、ElasticSearch安装IK分词器</h2><p>2.1、下载后解压，并将目录拷贝到ElasticSearch根目录下的 plugins 目录中</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408153808172.png" alt="image-20210408153808172"></p><p>2.2、重新启动 ElasticSearch 服务，在启动过程中，你可以看到正在加载”analysis-ik”插件的提示信息，服务启动后，可以在命令行运行 elasticsearch-plugin list 命令，确认IK 插件安装成功。（ plugins 文件中不要放压缩包，否则会运行闪退！！）</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408154000428.png" alt="image-20210408154000428"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408154054397.png" alt="image-20210408154054397"></p><p>2.3、在 kibana 中测试 IK分词器，并就相关分词结果和 icu 分词器进行对比。<br>IK提供了两个分词算法：ik_smart 和 ik_max_word。</p><p>ik_smart ：最少切分</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408160321714.png" alt="image-20210408160321714"></p><p>ik_max_word： 最细粒度分词</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408160345465.png" alt="image-20210408160345465"></p><h2 id="3、IK分词器自定义词库"><a href="#3、IK分词器自定义词库" class="headerlink" title="3、IK分词器自定义词库"></a>3、IK分词器自定义词库</h2><p>这里先说一下IK分词器中的词库文件的意思：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IKAnalyzer.cfg.xml：IK分词配置文件</span><br><span class="line">主词库：main.dic</span><br><span class="line">英文停用词：stopword.dic，不会建立在倒排索引中</span><br><span class="line">特殊词库：</span><br><span class="line">    quantifier.dic：特殊词库：计量单位等</span><br><span class="line">    suffix.dic：特殊词库：后缀名</span><br><span class="line">    surname.dic：特殊词库：百家姓</span><br><span class="line">    preposition：特殊词库：语气词</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;虽然IK分词器能够帮助我们给中文进行分词，但是，随着当前互联网环境，各种热词的出现，使用IK分词器并不能完全满足我们的需求，所以，此时就需要我们自定义词库。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408162006057.png" alt="image-20210408162006057"></p><p>如图，如果我们想让系统识别“雨女无瓜”是一个词，需要编辑自定义词库。<br>自定义词库步骤：</p><h3 id="3-1、进入elasticsearch-plugins-ik-config目录"><a href="#3-1、进入elasticsearch-plugins-ik-config目录" class="headerlink" title="3.1、进入elasticsearch/plugins/ik/config目录"></a>3.1、进入elasticsearch/plugins/ik/config目录</h3><h3 id="3-2、新建一个owner-dic文件，编辑自定义内容"><a href="#3-2、新建一个owner-dic文件，编辑自定义内容" class="headerlink" title="3.2、新建一个owner.dic文件，编辑自定义内容"></a>3.2、新建一个owner.dic文件，编辑自定义内容</h3><p><font color='red'>注意查看创建的文件一定要是UTF-8编码，否则无效！</font></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408162954456.png" alt="image-20210408162954456"></p><h3 id="3-3、修改IKAnalyzer-cfg-xml（在ik-config目录下）"><a href="#3-3、修改IKAnalyzer-cfg-xml（在ik-config目录下）" class="headerlink" title="3.3、修改IKAnalyzer.cfg.xml（在ik/config目录下）"></a>3.3、修改IKAnalyzer.cfg.xml（在ik/config目录下）</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408163107567.png" alt="image-20210408163107567"></p><h3 id="3-4、修改完配置重新启动elasticsearch和Kibana，再次测试"><a href="#3-4、修改完配置重新启动elasticsearch和Kibana，再次测试" class="headerlink" title="3.4、修改完配置重新启动elasticsearch和Kibana，再次测试"></a>3.4、修改完配置重新启动elasticsearch和Kibana，再次测试</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408163702063.png" alt="image-20210408163702063"></p><h3 id="3-5、再次测试，发现雨女无瓜变成了一个词"><a href="#3-5、再次测试，发现雨女无瓜变成了一个词" class="headerlink" title="3.5、再次测试，发现雨女无瓜变成了一个词"></a>3.5、再次测试，发现雨女无瓜变成了一个词</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210408164619279.png" alt="image-20210408164619279"></p><h1 id="六、ElasticSearch基于Rest风格的操作"><a href="#六、ElasticSearch基于Rest风格的操作" class="headerlink" title="六、ElasticSearch基于Rest风格的操作"></a>六、ElasticSearch基于Rest风格的操作</h1><h2 id="1、Rest风格说明"><a href="#1、Rest风格说明" class="headerlink" title="1、Rest风格说明"></a>1、Rest风格说明</h2><p>&emsp;&emsp;Rest风格是一种软件架构风格，而不是标准，它只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p>操作命令：</p><table><thead><tr><th align="center">method</th><th align="center">url地址</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">PUT</td><td align="center">ip:9200/索引名称/类型名称/文档id</td><td align="center">创建文档（指定文档id）</td></tr><tr><td align="center">POST</td><td align="center">ip:9200/索引名称/类型名称</td><td align="center">创建文档（随机文档id）</td></tr><tr><td align="center">POST</td><td align="center">ip:9200/索引名称/类型名称/文档id/_update</td><td align="center">修改文档</td></tr><tr><td align="center">DELETE</td><td align="center">ip:9200/索引名称/类型名称/文档id</td><td align="center">删除文档</td></tr><tr><td align="center">GET</td><td align="center">ip:9200/索引名称/类型名称/文档id</td><td align="center">通过文档id查询文档</td></tr><tr><td align="center">POST</td><td align="center">ip:9200/索引名称/类型名称/_search</td><td align="center">查询所有数据</td></tr></tbody></table><p>拓展命令</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>GET _cat/health</td><td>查看ElasticSearch的健康状态</td></tr><tr><td>GET _cat/indices?v</td><td>查看所有的索引信息</td></tr></tbody></table><h2 id="2、关于索引和文档的操作"><a href="#2、关于索引和文档的操作" class="headerlink" title="2、关于索引和文档的操作"></a>2、关于索引和文档的操作</h2><blockquote><p><strong>基础操作</strong></p></blockquote><h3 id="2-1、创建一个索引和文档，当索引存在时，仅创建文档"><a href="#2-1、创建一个索引和文档，当索引存在时，仅创建文档" class="headerlink" title="2.1、创建一个索引和文档，当索引存在时，仅创建文档"></a>2.1、创建一个索引和文档，当索引存在时，仅创建文档</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT test1/type1/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">  &quot;age&quot;:20,</span><br><span class="line">  &quot;date&quot;:&quot;2021-04-11&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618128008636.png" alt="1618128008636"></p><p>返回结果 （也是以REST ful 风格返回的 ）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#! [types removal] Specifying types in document index requests is deprecated, use the typeless endpoints instead (/&#123;index&#125;/_doc/&#123;id&#125;, /&#123;index&#125;/_doc, or /&#123;index&#125;/_create/&#123;id&#125;).</span><br><span class="line"><span class="comment">// 警告信息：不支持在文档索引请求中指定类型，而是使用无类型的端点(/&#123;index&#125;/_doc/&#123;id&#125;， /&#123;index&#125;/_doc，或&#123;index&#125;/_create/&#123;id&#125;)。</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;test1&quot;</span>,<span class="comment">// 索引</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;type1&quot;</span>,<span class="comment">// 类型</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,<span class="comment">// 版本</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,<span class="comment">// 操作类型</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;<span class="comment">// 分片信息</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>那么我们是否需要指定字段的类型呢？最好还是进行指定。</li></ul><table><thead><tr><th align="center">类型</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">字符串</td><td align="center">text、 keyword</td></tr><tr><td align="center">数值类型</td><td align="center">long, integer, short, byte, double, float, half_float, scaled_float</td></tr><tr><td align="center">日期类型</td><td align="center">date</td></tr><tr><td align="center">布尔类型</td><td align="center">boolean</td></tr><tr><td align="center">二进制类型</td><td align="center">binary</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h3 id="2-2、创建一个索引，并指定类型"><a href="#2-2、创建一个索引，并指定类型" class="headerlink" title="2.2、创建一个索引，并指定类型"></a>2.2、创建一个索引，并指定类型</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT test2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;birthday&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618128978419.png" alt="1618128978419"></p><h3 id="2-3、查看索引-查看文档"><a href="#2-3、查看索引-查看文档" class="headerlink" title="2.3、查看索引/查看文档"></a>2.3、查看索引/查看文档</h3><h4 id="2-3-1、查看索引"><a href="#2-3-1、查看索引" class="headerlink" title="2.3.1、查看索引"></a>2.3.1、查看索引</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test2</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618129163728.png" alt="1618129163728"><br>&emsp;&emsp;假设按照2.1，我们并没有为我们的字段设置类型，那么当我们插入数据时，ElasticSearch就会去猜我们的类型，然后默认给我配置字段类型。</p><ul><li>这里需要注意的一个点：在elastisearch5版本之前，一个索引下可以创建多个类型，但是在elastisearch5后，一个索引只能对应一个类型，而id相当于关系型数据库的主键id若果不指定就会默认生成一个20位的uuid，属性相当关系型数据库的column(列)。</li></ul><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618129965125.png" alt="1618129965125"></p><h4 id="2-3-2、查看文档"><a href="#2-3-2、查看文档" class="headerlink" title="2.3.2、查看文档"></a>2.3.2、查看文档</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test1/type1/1</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618152483087.png" alt="1618152483087"></p><h3 id="2-4、修改文档"><a href="#2-4、修改文档" class="headerlink" title="2.4、修改文档"></a>2.4、修改文档</h3><blockquote><p>&emsp;&emsp;修改文档有两种方法进行修改，第一种如下图，使用和创建一样的命令 “<strong>PUT test1/type1/1</strong>”，但是这种方法需要我们把所有的字段都填充好，然后只修改我们需要修改的字段即可，如果漏掉不修改的字段的话，则会把其他文档删除。所以并不是建议使用这种方法进行修改操作。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT test1/type1/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;王五&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618130388644.png" alt="1618130388644"></p><blockquote><p>&emsp;&emsp;另一个修改的方法是使用 “<strong>post test1/type1/1/_update</strong>” 来进行修改，该方法可以值修改目标字段，而不会影响其他不需要修改的字段。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post test1/type1/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;name&quot;:&quot;王五&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618139591034.png" alt="1618139591034"></p><h3 id="2-5、删除索引-删除文档"><a href="#2-5、删除索引-删除文档" class="headerlink" title="2.5、删除索引/删除文档"></a>2.5、删除索引/删除文档</h3><h4 id="2-5-1、删除文档"><a href="#2-5-1、删除文档" class="headerlink" title="2.5.1、删除文档"></a>2.5.1、删除文档</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE test1/type1/1</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618151944650.png" alt="1618151944650"></p><p> <img src="http://cheng_qiwei.gitee.io/blog/img/1618151983146.png" alt="1618151983146"></p><h4 id="2-5-2、删除索引"><a href="#2-5-2、删除索引" class="headerlink" title="2.5.2、删除索引"></a>2.5.2、删除索引</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE test1</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618152072436.png" alt="1618152072436"></p><blockquote><p>复杂搜索</p></blockquote><p>添加测试数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT test1/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;狂神说&quot;,</span><br><span class="line">  &quot;age&quot;:23,</span><br><span class="line">  &quot;desc&quot;:&quot;一顿操作猛如虎&quot;,</span><br><span class="line">  &quot;tags&quot;:[&quot;技术宅&quot;,&quot;暖那&quot;,&quot;指南&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT test1/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;张珊&quot;,</span><br><span class="line">  &quot;age&quot;:3,</span><br><span class="line">  &quot;desc&quot;:&quot;格雷福斯&quot;,</span><br><span class="line">  &quot;tags&quot;:[&quot;路由&quot;,&quot;交友&quot;,&quot;指南&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT test1/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;李四&quot;,</span><br><span class="line">  &quot;age&quot;:30,</span><br><span class="line">  &quot;desc&quot;:&quot;mmp，不知道怎么形容&quot;,</span><br><span class="line">  &quot;tags&quot;:[&quot;靓女&quot;,&quot;旅游&quot;,&quot;唱歌&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618153275904.png" alt="1618153275904"></p><h3 id="2-6、根据单条件查询"><a href="#2-6、根据单条件查询" class="headerlink" title="2.6、根据单条件查询"></a>2.6、根据单条件查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET test1/_search?q=name:狂神</span><br><span class="line">GET test1/_search?q=name:狂神说</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618154163657.png" alt="1618154163657"></p><p>&emsp;&emsp;我们发现，只要查询的目标字段包含我们的查询值，就能够被查询出来。</p><h3 id="2-7、多条件复杂查询"><a href="#2-7、多条件复杂查询" class="headerlink" title="2.7、多条件复杂查询"></a>2.7、多条件复杂查询</h3><p>添加数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT test1/_doc/4</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;狂神说说说&quot;,</span><br><span class="line">  &quot;age&quot;:3,</span><br><span class="line">  &quot;desc&quot;:&quot;程序员~~~&quot;,</span><br><span class="line">  &quot;tags&quot;:[&quot;敲代码&quot;,&quot;码代码&quot;,&quot;删库跑路&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-1、指定输出内容"><a href="#2-7-1、指定输出内容" class="headerlink" title="2.7.1、指定输出内容"></a>2.7.1、指定输出内容</h3><p>&emsp;&emsp;有时候，我们并不需要输出文档中所有的内容，可能只需要输出某些字段就可以了。相当于sql中：SELECT name，age from ……</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET test1/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  , &quot;_source&quot;: [&quot;name&quot;,&quot;desc&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618156586615.png" alt="1618156586615"></p><p>&emsp;&emsp;这里我们会发现在结果中会有一项<code>_score</code>，这一项的作用是分数，用来判定结果应该怎么排序，分数越高说明越符合结果。</p><h3 id="2-7-2、对结果根据指定内容进行排序"><a href="#2-7-2、对结果根据指定内容进行排序" class="headerlink" title="2.7.2、对结果根据指定内容进行排序"></a>2.7.2、对结果根据指定内容进行排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET test1/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  , &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210412172751973.png" alt="image-20210412172751973"></p><p>&emsp;注意:在排序的过程中，只能使用可排序的属性进行排序。可以排序的属性有：<font color='red'>数字、日期、ID</font>，其他字段都不允许使用排序。在排序后，由于不需要使用<code>_score</code>发挥排序功能，所以该值被赋予null。</p><h3 id="2-7-3、分页查询"><a href="#2-7-3、分页查询" class="headerlink" title="2.7.3、分页查询"></a>2.7.3、分页查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET test1/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 1,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618235374696.png" alt="1618235374696"></p><h3 id="2-7-4、布尔查询"><a href="#2-7-4、布尔查询" class="headerlink" title="2.7.4、布尔查询"></a>2.7.4、布尔查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET test1/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: 23</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618235830392.png" alt="1618235830392"></p><p>同类型的关键词还有：</p><table><thead><tr><th>关键词</th><th>作用</th></tr></thead><tbody><tr><td>must</td><td>必须符合，必须包含，相当于关系数据库的条件and</td></tr><tr><td>must_not</td><td>必须不符合，必须不包含，相当于关系数据库的not XXX and not XXX</td></tr><tr><td>should</td><td>应该符合、应该包含，相当于关系数据库的条件or</td></tr></tbody></table><h3 id="2-7-5、过滤器查询"><a href="#2-7-5、过滤器查询" class="headerlink" title="2.7.5、过滤器查询"></a>2.7.5、过滤器查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET test1/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;age&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;: 5,</span><br><span class="line">            &quot;lte&quot;: 30</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618236985421.png" alt="1618236985421"></p><p>过滤器中同类型的关键词还有：</p><table><thead><tr><th>关键词</th><th>作用</th></tr></thead><tbody><tr><td>gte</td><td>大于等于</td></tr><tr><td>gt</td><td>大于</td></tr><tr><td>lte</td><td>小于等于</td></tr><tr><td>lt</td><td>小于</td></tr></tbody></table><h3 id="2-7-6、同一个字段多条件查询"><a href="#2-7-6、同一个字段多条件查询" class="headerlink" title="2.7.6、同一个字段多条件查询"></a>2.7.6、同一个字段多条件查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET test1/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;tags&quot;: &quot;南 技术宅&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  , &quot;_source&quot;: [&quot;name&quot;,&quot;tags&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618237486207.png" alt="1618237486207"></p><p>&emsp;&emsp;条件越符合，分数越高！</p><h3 id="2-7-7、精确查询"><a href="#2-7-7、精确查询" class="headerlink" title="2.7.7、精确查询"></a>2.7.7、精确查询</h3><p>&emsp;&emsp;关于精确查询，就需要说明一下分词，刚刚上面都是使用match关键词来进行查询，match在使用的时候会使用分词器进行解析，先解析文档，再通过文档进行查询，而如果需要进行精确查询，则应该使用关键词term。</p><p>&emsp;&emsp;另外，关于字符串的两个类型text和keyword，如果使用keyword作为字符串的类型时，系统会默认将其当成一个简单字符串而不会对其进行分词解析，如果使用text，则会进行解析，如下图：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618238101807.png" alt="1618238101807"></p><p>创建测试数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT test3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;desc&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT test3/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;狂神说Java&quot;,</span><br><span class="line">  &quot;desc&quot;:&quot;狂神说Java&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST test3/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;狂神说前端&quot;,</span><br><span class="line">  &quot;desc&quot;:&quot;狂神说前端&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET test3/_search</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618240186908.png" alt="1618240186908"></p><p>&emsp;&emsp;如上图：如果是对name进行查询，由于name是keyword类型，不会进行分词，所以只查询<code>狂</code>没办法查出内容，而desc是text类型，在查询的时候会进行分词，故能查询到数据。</p><h3 id="2-7-8、高亮查询"><a href="#2-7-8、高亮查询" class="headerlink" title="2.7.8、高亮查询"></a>2.7.8、高亮查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET test1/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618240573753.png" alt="1618240573753"></p><p>&emsp;&emsp;<code>&lt;em&gt;</code>是ElasticSearch的默认高亮标签，如果需要自定义高亮标签，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET test1/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;pre_tags&quot;: &quot;&lt;p class=&#x27;key&#x27; style=&#x27;color:red&#x27;&gt;&quot;,</span><br><span class="line">    &quot;post_tags&quot;: &quot;&lt;/p&gt;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618240745932.png" alt="1618240745932"></p><h1 id="七、springboot集成ElasticSearch"><a href="#七、springboot集成ElasticSearch" class="headerlink" title="七、springboot集成ElasticSearch"></a>七、springboot集成ElasticSearch</h1><h2 id="1、创建测试工程"><a href="#1、创建测试工程" class="headerlink" title="1、创建测试工程"></a>1、创建测试工程</h2><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618241960363.png" alt="1618241960363"></p><h2 id="2、修改pom文件"><a href="#2、修改pom文件" class="headerlink" title="2、修改pom文件"></a>2、修改pom文件</h2><p>&emsp;&emsp;创建工程后，我们需要做一个修改，要不然没办法和当前版本【7.12.0】进行连接，我们当前的springboot的版本是2.3.7，已经算是一个比较高的版本，但是其兼容的ElasticSearch的版本只是7.6.2版本，没办法与我们最新的7.12.0版本进行兼容，所以需要修改其版本。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618243216191.png" alt="1618243216191"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.12.0<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618243784374.png" alt="1618243784374"></p><h2 id="3、编写RestHighLevelClient作为连接与操作es的对象"><a href="#3、编写RestHighLevelClient作为连接与操作es的对象" class="headerlink" title="3、编写RestHighLevelClient作为连接与操作es的对象"></a>3、编写RestHighLevelClient作为连接与操作es的对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.g4b.cheng.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建esClient连接对象</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9200</span>,<span class="string">&quot;http&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、关于索引的操作"><a href="#4、关于索引的操作" class="headerlink" title="4、关于索引的操作"></a>4、关于索引的操作</h2><h3 id="4-1、创建索引"><a href="#4-1、创建索引" class="headerlink" title="4.1、创建索引"></a>4.1、创建索引</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618327422965.png" alt="1618327422965"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618327458353.png" alt="1618327458353"></p><h3 id="4-2、判断索引是否存在"><a href="#4-2、判断索引是否存在" class="headerlink" title="4.2、判断索引是否存在"></a>4.2、判断索引是否存在</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618327882435.png" alt="1618327882435"></p><h3 id="4-3、删除索引"><a href="#4-3、删除索引" class="headerlink" title="4.3、删除索引"></a>4.3、删除索引</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618327936525.png" alt="1618327936525"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618327960755.png" alt="18327960755"></p><h3 id="4-4、创建文档"><a href="#4-4、创建文档" class="headerlink" title="4.4、创建文档"></a>4.4、创建文档</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618329606711.png" alt="1618329606711"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618329648338.png" alt="1618329648338"></p><h3 id="4-5、判断文档是否存在"><a href="#4-5、判断文档是否存在" class="headerlink" title="4.5、判断文档是否存在"></a>4.5、判断文档是否存在</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618329950424.png" alt="1618329950424"></p><h3 id="4-6、查询文档信息"><a href="#4-6、查询文档信息" class="headerlink" title="4.6、查询文档信息"></a>4.6、查询文档信息</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618330069068.png" alt="1618330069068"></p><h3 id="4-7、修改文档"><a href="#4-7、修改文档" class="headerlink" title="4.7、修改文档"></a>4.7、修改文档</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618330309597.png" alt="1618330309597"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618330331727.png" alt="1618330331727"></p><h3 id="4-8、删除文档"><a href="#4-8、删除文档" class="headerlink" title="4.8、删除文档"></a>4.8、删除文档</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618330487465.png" alt="1618330487465"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1618330503605.png" alt="1618330503605"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除文档记录</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;zzy_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        deleteRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">        DeleteResponse deleteResponse = client.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(deleteResponse.status());</span><br><span class="line">        System.out.println(deleteResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特殊的，真是的项目一般都会批量插入数据！</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">        ArrayList&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">&quot;zzy1&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">&quot;zzy2&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">&quot;zzy3&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">&quot;zhao1&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">&quot;zhao2&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">&quot;zhao3&quot;</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//批处理请求</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//批量更新和批量删除，就在这里修改对应的请求就可以了</span></span><br><span class="line">            bulkRequest.add(<span class="keyword">new</span> IndexRequest(<span class="string">&quot;zzy_index&quot;</span>)</span><br><span class="line">                    .id(<span class="string">&quot;&quot;</span> + (i + <span class="number">1</span>))<span class="comment">//不指定ID，会生成随机ID</span></span><br><span class="line">                    .source(JSON.toJSONString(userList.get(i)), XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line">        BulkResponse bulkResponse = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(bulkResponse.hasFailures());<span class="comment">//是否失败 返回false 表示成功</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="comment">//SearchRequest 搜索请求</span></span><br><span class="line">    <span class="comment">//SearchSourceBuilder 条件构造</span></span><br><span class="line">    <span class="comment">//HighlightBuilder 构建高亮</span></span><br><span class="line">    <span class="comment">//TermQueryBuilder 精确查询</span></span><br><span class="line">    <span class="comment">//MatchAllQueryBuilder  匹配所有</span></span><br><span class="line">    <span class="comment">// xxxbulider  对应刚才看到的所有命令！</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(ESconst.ES_INDEX);</span><br><span class="line">        <span class="comment">//构建搜索条件</span></span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询条件 可以使用QueryBuilders工具来实现</span></span><br><span class="line">        <span class="comment">//QueryBuilders.termQuery() 精确匹配</span></span><br><span class="line">        <span class="comment">//QueryBuilders.matchAllQuery() 匹配所有</span></span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhao1&quot;</span>);</span><br><span class="line">        <span class="comment">//MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span></span><br><span class="line">        sourceBuilder.query(termQueryBuilder);</span><br><span class="line">        sourceBuilder.from();<span class="comment">//分页</span></span><br><span class="line">        sourceBuilder.size();</span><br><span class="line">        sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">        searchRequest.source(sourceBuilder);</span><br><span class="line">        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(JSON.toJSONString(searchResponse.getHits()));</span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-11、批量插入数据"><a href="#4-11、批量插入数据" class="headerlink" title="4.11、批量插入数据"></a>4.11、批量插入数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 批量插入文档</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/4/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testBulkDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BulkRequest request = <span class="keyword">new</span> BulkRequest(ES_INDEX);</span><br><span class="line">    request.timeout(TimeValue.timeValueSeconds(<span class="number">3</span>));</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Collections.addAll(userList ,<span class="keyword">new</span> User(<span class="string">&quot;小A&quot;</span>,<span class="number">10</span>,<span class="keyword">new</span> Date(<span class="number">1586849562</span>))</span><br><span class="line">            ,<span class="keyword">new</span> User(<span class="string">&quot;小B&quot;</span>,<span class="number">12</span>,<span class="keyword">new</span> Date(<span class="number">766308762</span>))</span><br><span class="line">            ,<span class="keyword">new</span> User(<span class="string">&quot;小C&quot;</span>,<span class="number">13</span>,<span class="keyword">new</span> Date(<span class="number">158449562</span>))</span><br><span class="line">            ,<span class="keyword">new</span> User(<span class="string">&quot;小D&quot;</span>,<span class="number">40</span>,<span class="keyword">new</span> Date(<span class="number">766306762</span>))</span><br><span class="line">            ,<span class="keyword">new</span> User(<span class="string">&quot;小E&quot;</span>,<span class="number">30</span>,<span class="keyword">new</span> Date(<span class="number">1586549562</span>))</span><br><span class="line">            ,<span class="keyword">new</span> User(<span class="string">&quot;小F&quot;</span>,<span class="number">32</span>,<span class="keyword">new</span> Date(<span class="number">1586849562</span>))</span><br><span class="line">            ,<span class="keyword">new</span> User(<span class="string">&quot;小G&quot;</span>,<span class="number">21</span>,<span class="keyword">new</span> Date(<span class="number">1586009562</span>)));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class="line">        request.add(<span class="keyword">new</span> IndexRequest().id(String.valueOf(i+<span class="number">1</span>))</span><br><span class="line">                .source(JSON.toJSONString(userList.get(i)),XContentType.JSON));</span><br><span class="line">    &#125;</span><br><span class="line">    BulkResponse response = restHighLevelClient.bulk(request,RequestOptions.DEFAULT);</span><br><span class="line">    log.info(<span class="string">&quot;返回批量插入文档结果是否失败：&quot;</span>+response.hasFailures());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210414160453565.png" alt="image-20210414160453565"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210414160505801.png" alt="image-20210414160505801"></p><h3 id="4-10、搜索"><a href="#4-10、搜索" class="headerlink" title="4.10、搜索"></a>4.10、搜索</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 搜索文档</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/4/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSearchDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(ES_INDEX);</span><br><span class="line">    SearchSourceBuilder searchBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    searchBuilder.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//所有的搜索方式都可以通过QueryBuilders工具类进行获取</span></span><br><span class="line">    MatchQueryBuilder matchQueryBuilder = QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小&quot;</span>);</span><br><span class="line">    searchBuilder.query(matchQueryBuilder)</span><br><span class="line">                .from(<span class="number">0</span>)</span><br><span class="line">                .size(<span class="number">3</span>);</span><br><span class="line">    request.source(searchBuilder);</span><br><span class="line">    SearchResponse response = restHighLevelClient.search(request,RequestOptions.DEFAULT);</span><br><span class="line">    log.info(<span class="string">&quot;返回查询结果：&#123;&#125;&quot;</span>,JSON.toJSONString(response.getHits()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210414161722807.png" alt="image-20210414161722807"></p><p>所有的内容都放在<strong>sourceAsMap</strong>中，可以遍历进行获取。</p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> NoSQL </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap和ConCurrentHashMap总结与面试</title>
      <link href="/blog/2021/04/10/HashMap%E5%92%8CConCurrentHashMap%E6%80%BB%E7%BB%93%E4%B8%8E%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/blog/2021/04/10/HashMap%E5%92%8CConCurrentHashMap%E6%80%BB%E7%BB%93%E4%B8%8E%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap和ConCurrentHashMap总结与面试"><a href="#HashMap和ConCurrentHashMap总结与面试" class="headerlink" title="HashMap和ConCurrentHashMap总结与面试"></a>HashMap和ConCurrentHashMap总结与面试</h1><h1 id="一、HashMap"><a href="#一、HashMap" class="headerlink" title="一、HashMap"></a>一、HashMap</h1><h2 id="1、HashMap底层数据结构"><a href="#1、HashMap底层数据结构" class="headerlink" title="1、HashMap底层数据结构"></a>1、HashMap底层数据结构</h2><p><strong>JDK7</strong>：数组+链表；</p><p><strong>JDK8</strong>:  数组+链表+红黑树（JDK8中即使用了单向链表，也使用了双向链表，双向链表主要是为了链表操作方便，应该在插入，扩容，链表转红黑树，红黑树转链表的过程中都要操作链表）；</p><h2 id="2、JDK8中的HashMap为什么要使用红黑树？"><a href="#2、JDK8中的HashMap为什么要使用红黑树？" class="headerlink" title="2、JDK8中的HashMap为什么要使用红黑树？"></a>2、JDK8中的HashMap为什么要使用红黑树？</h2><p>&emsp;&emsp;当元素个数小于一个阈值时，链表整体的插入查询效率要高于红黑树，当元素个数大于此阈值时，链表整体的插入查询效率要低于红黑树。此阈值在HashMap中为<font color='red'>8</font>；</p><h2 id="3、JDK8中的HashMap什么时候将链表转化为红黑树？"><a href="#3、JDK8中的HashMap什么时候将链表转化为红黑树？" class="headerlink" title="3、JDK8中的HashMap什么时候将链表转化为红黑树？"></a>3、JDK8中的HashMap什么时候将链表转化为红黑树？</h2><p>&emsp;&emsp;当发现<font color='red'>链表中的元素个数大于8</font>之后，还会判断一下当前数组的总长度，如果数组长度小于64时，此时并不会转化为红黑树，而是进行扩容。只有当链表中的<font color='red'>元素个数大于8</font>，并且<font color='red'>数组的长度大于等于64</font>时才会将链表转为红黑树。而之所以小于64个则进行扩容，是因为如果只有元素大于8个的条件，则后面可能出现remove元素的况，当元素低于6个时，则需要进行退化，<strong>频繁的相互转化</strong>是一笔不小的开销。通过<strong>标准的泊松分布</strong>计算出来链表的元素要大于8×8个，则可以进行树化。</p><h2 id="4、JDK8中HashMap的put方法的实现过程？"><a href="#4、JDK8中HashMap的put方法的实现过程？" class="headerlink" title="4、JDK8中HashMap的put方法的实现过程？"></a>4、JDK8中HashMap的put方法的实现过程？</h2><blockquote><ol><li><p>根据key值生成hashcode</p></li><li><p>判断当前HashMap对象中的数组是否为空，如果为空则初始化该数组</p></li><li><p>根据逻辑与运算，算出hashcode基于当前数组对应的数组下标i</p></li><li><p>判断数组的第i个位置的元素（tab[i]）是否为空</p><p>4.1、如果为空，则将key，value封装为Node对象赋值给tab[i]</p><p>4.2、如果不为空：</p><p>&emsp;4.2.1、如果put方法传入进来的key等于tab[i].key，那么证明存在相同的key</p><p>&emsp;4.2.2、如果不等于tab[i].key，则：</p><p>&emsp;&emsp;&emsp;4.2.2.1、如果tab[i]的类型是TreeNode，则表示数组的第i位置上是一颗红黑树，那么将key和value插入到红黑树中，并且在插入之前会判断在红黑树中是否存在相同的key</p><p>&emsp;&emsp;&emsp;4.2.2.2、如果tab[i]的类型不是TreeNode，则表示数组的第i位置上是一个链表，那么遍历链表寻找是否存在相同的key，并且在遍历的过程中会对链表中的结点数进行计数，当遍历到最后一个结点时，会将key,value封装为Node插入到链表的尾部，同时判断在插入新结点之前的链表结点个数是不是大于等于8（元素总数大于64），如果是，则将链表改为红黑树。</p><p>&emsp;4.2.3、如果上述步骤中发现存在相同的key，则根据onlyIfAbsent标记来判断是否需要更新value值，然后返回oldValue</p></li><li><p>modCount++</p></li><li><p>HashMap的元素个数size加1</p></li><li><p>如果size大于扩容的阈值，则进行扩容</p></li></ol></blockquote><h2 id="5、JDK8中HashMap的get方法的实现过程"><a href="#5、JDK8中HashMap的get方法的实现过程" class="headerlink" title="5、JDK8中HashMap的get方法的实现过程"></a>5、JDK8中HashMap的get方法的实现过程</h2><ol><li><p>根据key生成hashcode</p></li><li><p>如果数组为空，则直接返回空</p></li><li><p>如果数组不为空，则利用hashcode和数组长度通过逻辑与操作算出key所对应的数组下标i</p></li><li><p>如果数组的第i个位置上没有元素，则直接返回空</p></li><li><p>如果数组的第1个位上的元素的key等于get方法所传进来的key，则返回该元素，并获取该元素的value</p></li><li><p>如果不等于则判断该元素还有没有下一个元素，如果没有，返回空</p></li><li><p>如果有则判断该元素的类型是链表结点还是红黑树结点，如果是链表则遍历链表，如果是红黑树则遍历红黑树</p></li><li><p>找到即返回元素，没找到的则返回空</p></li></ol><h2 id="6、JDK7与JDK8中HashMap的不同点"><a href="#6、JDK7与JDK8中HashMap的不同点" class="headerlink" title="6、JDK7与JDK8中HashMap的不同点"></a>6、JDK7与JDK8中HashMap的不同点</h2><p>1、JDK8中使用了红黑树。</p><p>2、JDK7中链表的插入使用的<strong>头插法</strong>（扩容转移元素的时候也是使用的头插法，<strong>头插法速度更快，无需遍历链表</strong>，但是在<strong>多线程扩容的情况下使用头插法会出现循环链表的问题</strong>，导致CPU飙升），JDK8中链表使用的<strong>尾插法</strong>（JDK8中反正要去计算链表当前结点的个数，反正要遍历的链表的，所以直接使用尾插法）。</p><p>3、JDK7的Hash算法比JDK8中的更复杂，Hash算法越复杂，生成的hashcode则更散列，那么hashmap中的元素则更散列，更散列则hashmap的查询性能更好，由于JDK7中没有红黑树，所以只能优化Hash算法使得元素更散列，而JDK8中增加了红黑树，查询性能得到了保障，所以可以简化一下Hash算法。</p><p>4、扩容的过程中JDK7中有可能会重新对key进行哈希（重新Hash跟哈希种子有关系），而JDK8中（包括JDK7和JDK8的ConcurrentHashMap）都没有这部分逻辑。</p><p>5、JDK8中扩容的条件和JDK7中不一样，除开判断size是否大于阈值之外，JDK7中还判断了tab[i]是否为空，不为空的时候才会进行扩容，而JDK8中则移除该条件了。</p><p>6、JDK8中还多了一个API：putIfAbsent(key,value)【该健存在值，则不修改值】。</p><p>7、JDK7和JDK8扩容过程中转移元素的逻辑不一样，JDK7是每次转移一个元素，JDK8是先算出来当前位置上哪些元素在新数组的低位上，哪些在新数组的高位上，然后在一次性转移。</p><h1 id="二、ConcurrentHashMap"><a href="#二、ConcurrentHashMap" class="headerlink" title="二、ConcurrentHashMap"></a>二、ConcurrentHashMap</h1><h2 id="1、JDK7中的ConcurrentHashMap是怎么保证并发安全的？"><a href="#1、JDK7中的ConcurrentHashMap是怎么保证并发安全的？" class="headerlink" title="1、JDK7中的ConcurrentHashMap是怎么保证并发安全的？"></a>1、JDK7中的ConcurrentHashMap是怎么保证并发安全的？</h2><p>主要利用<font color='red'>Unsafe操作+ReentrantLock+分段思想</font>。</p><p>主要使用了Unsafe操作中的：</p><ul><li>compareAndSwapObject：通过cas的方式修改对象的属性</li><li>putOrderedObject：并发安全的给数组的某个位置赋值</li><li>getObjectVolatile：并发安全的获取数组某个位置的元素</li></ul><p>&emsp;&emsp;分段思想是为了提高ConcurrentHashMap的并发量，分段数越高则支持的最大并发量越高，程序员可以通过concurrencyLevel参数来指定并发量。ConcurrentHashMap的内部类Segment就是用来表示某一个段的。</p><p>&emsp;&emsp;每个Segment就是一个小型的HashMap的，当调用ConcurrentHashMap的put方法时，最终会调用到Segment的put方法，而Segment类继承了ReentrantLock，所以Segment自带可重入锁，当调用到Segment的put方法时，会先利用可重入锁加锁，加锁成功后再将待插入的key,value插入到小型HashMap中，插入完成后解锁。</p><h2 id="2、JDK7中的ConcurrentHashMap的底层原理"><a href="#2、JDK7中的ConcurrentHashMap的底层原理" class="headerlink" title="2、JDK7中的ConcurrentHashMap的底层原理"></a>2、JDK7中的ConcurrentHashMap的底层原理</h2><p>ConcurrentHashMap底层是由两层嵌套数组来实现的：</p><ol><li>ConcurrentHashMap对象中有一个属性segments，类型为Segment[];</li><li>Segment对象中有一个属性table，类型为HashEntry[];</li></ol><p>&emsp;&emsp;当调用ConcurrentHashMap的put方法时，先根据key计算出对应的Segment[]的数组下标j，确定好当前key,value应该插入到哪个Segment对象中，如果segments[j]为空，则利用自旋锁的方式在j位置生成一个Segment对象。然后调用Segment对象的put方法。</p><p>&emsp;&emsp;Segment对象的put方法会先加锁，然后也根据key计算出对应的HashEntry[]的数组下标i，然后将key,value封装为HashEntry对象放入该位置，此过程和JDK7的HashMap的put方法一样，然后解锁。</p><p>&emsp;&emsp;在加锁的过程中逻辑比较复杂，属于尝试加锁阶段，先通过自旋加锁，如果超过一定次数就会直接阻塞加锁。</p><h2 id="3、JDK8中的ConcurrentHashMap是怎么保证并发安全的？"><a href="#3、JDK8中的ConcurrentHashMap是怎么保证并发安全的？" class="headerlink" title="3、JDK8中的ConcurrentHashMap是怎么保证并发安全的？"></a>3、JDK8中的ConcurrentHashMap是怎么保证并发安全的？</h2><p>JDK8中主要利用<font color='red'>Unsafe操作+synchronized关键字</font>。</p><p>&emsp;&emsp;Unsafe操作的使用仍然和JDK7中的类似，主要负责并发安全的修改对象的属性或数组某个位置的值。</p><p>&emsp;&emsp;而synchronized主要负责在需要操作某个位置时进行加锁（该位置不为空），比如向某个位置的链表进行插入结点，向某个位置的红黑树插入结点。</p><p>JDK8中其实仍然有分段锁的思想，只不过JDK7中段数是可以控制的，而JDK8中是数组的每一个位置都有一把锁。</p><h2 id="4、JDK8中的ConcurrentHashMap为什么使用synchronized来进行加锁？"><a href="#4、JDK8中的ConcurrentHashMap为什么使用synchronized来进行加锁？" class="headerlink" title="4、JDK8中的ConcurrentHashMap为什么使用synchronized来进行加锁？"></a>4、JDK8中的ConcurrentHashMap为什么使用synchronized来进行加锁？</h2><p>&emsp;&emsp;JDK8中使用synchronized加锁时，是对链表头结点和红黑树根结点来加锁的，而ConcurrentHashMap会保证，数组中某个位置的元素一定是链表的头结点或红黑树的根结点，所以JDK8中的ConcurrentHashMap在对某个桶进行并发安全控制时，只需要使用synchronized对当前那个位置的数组上的元素进行加锁即可，对于每个桶，只有获取到了第一个元素上的锁，才能操作这个桶，不管这个桶是一个链表还是红黑树。</p><p>&emsp;&emsp;想比于JDK7中使用ReentrantLock来加锁，因为JDK7中使用了分段锁，所以对于一个ConcurrentHashMap对象而言，分了几段就得有几个ReentrantLock对象，表示得有对应的几把锁。</p><p>&emsp;&emsp;而JDK8中使用synchronized关键字来加锁就会更节省内存，并且jdk也已经对synchronized的底层工作机制进行了优化，效率更好。</p><h2 id="5、JDK8中的ConcurrentHashMap的put方法的实现流程"><a href="#5、JDK8中的ConcurrentHashMap的put方法的实现流程" class="headerlink" title="5、JDK8中的ConcurrentHashMap的put方法的实现流程"></a>5、JDK8中的ConcurrentHashMap的put方法的实现流程</h2><ol><li><p>首先根据key计算对应的数组下标i，如果该位置没有元素，则通过自旋的方法去向该位置赋值。</p></li><li><p>如果该位置有元素，则synchronized会加锁</p></li><li><p>加锁成功之后，在判断该元素的类型：</p><p>3.1、如果是链表节点则进行添加节点到链表中</p><p>3.2、如果是红黑树则添加节点到红黑树</p></li><li><p>添加成功后，判断是否需要进行树化</p></li><li><p>addCount，并发安全地对ConcurrentHashMap元素个数 + 1(采用了LongAdder思想)，然后判断是否需要扩容，并且元素个数加1成功后，会继续判断是否要进行扩容，如果需要，则会进行扩容。</p></li><li><p>同时一个线程在put时如果发现当前ConcurrentHashMap正在进行扩容则会去帮助扩容。</p></li></ol><h2 id="6、DK7和JDK8中，统计元素个数的实现逻辑有什么区别？"><a href="#6、DK7和JDK8中，统计元素个数的实现逻辑有什么区别？" class="headerlink" title="6、DK7和JDK8中，统计元素个数的实现逻辑有什么区别？"></a>6、DK7和JDK8中，统计元素个数的实现逻辑有什么区别？</h2><blockquote><p>JDK7:<br>1.第一次遍历累加Segment[]数组中的count属性<br>2.第二次遍历累加Segmeng[]数组中的count属性<br>3.如果在两次遍历过程中，结果不相等，则再遍历第三次累加，和第二次的结果对比，若相等则返回<br>4.若还是不等，则对Segment数组的上的所有元素加锁，然后计算</p></blockquote><blockquote><p>JDK8：<br>1.有一个baseCount的属性，供以CAS操作，并借鉴了LongAdder的设计思想<br>2.当baseCount在CAS竞争激烈时，使用CounterCell[]数组提供多个篮子进行资源分散<br>3.只要能对篮子中的值CAS成功后，即可<br>4.最终统计时，通过累加baseCount + CounterCell[] 得到结果。</p></blockquote><h2 id="7、JDK7和JDK8中的ConcurrentHashMap的不同点"><a href="#7、JDK7和JDK8中的ConcurrentHashMap的不同点" class="headerlink" title="7、JDK7和JDK8中的ConcurrentHashMap的不同点"></a>7、JDK7和JDK8中的ConcurrentHashMap的不同点</h2><p>包括了HashMap中的不同点以外，也有其他不同点，比如：</p><ol><li>JDK8中没有分段锁了，而是使用synchronized来进行控制</li><li>JDK8中的扩容性能更高，支持多线程同时扩容，实际上JDK7中也支持多线程扩容，因为JDK7中的扩容是针对每个Segment的，所以也可能多线程扩容，但是性能没有JDK8高，因为JDK8中对于任意一个线程都可以去帮助扩容</li><li>JDK8中的元素个数统计的实现也不一样了，JDK8中增加了CounterCell来帮助计数，而JDK7中没有，JDK7中是put的时候每个Segment内部计数，统计的时候是遍历每个Segment对象加锁统计。</li></ol><h2 id="8、JDK7和JDK8中，都支持多线程并发扩容吗？"><a href="#8、JDK7和JDK8中，都支持多线程并发扩容吗？" class="headerlink" title="8、JDK7和JDK8中，都支持多线程并发扩容吗？"></a>8、JDK7和JDK8中，都支持多线程并发扩容吗？</h2><p>都支持多线程扩容。<br>&emsp;&emsp;在JDK7中，扩容只是针对一个Segment对象中的HashEntry[]对象，所以能够达到多个线程同时扩容不同的Segment对象。<br>&emsp;&emsp;在JDK8中，每个线程迁移指定步长下标的元素，并发操作，达到多线程同时扩容一个tab数组。</p><p><strong>JDK8的扩容性能更高，因为JDK8对任意一个线程都可以帮助扩容，而JDK7一个线程扩容一个Segment</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Java源码 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> ConCurrentHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap和ConCurrentHashMap源码解析</title>
      <link href="/blog/2021/04/10/HashMap%E5%92%8CConCurrentHashMap/"/>
      <url>/blog/2021/04/10/HashMap%E5%92%8CConCurrentHashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap和ConCurrentHashMap源码解析"><a href="#HashMap和ConCurrentHashMap源码解析" class="headerlink" title="HashMap和ConCurrentHashMap源码解析"></a>HashMap和ConCurrentHashMap源码解析</h1><h1 id="一、Hashing哈希法的概念"><a href="#一、Hashing哈希法的概念" class="headerlink" title="一、Hashing哈希法的概念"></a>一、Hashing哈希法的概念</h1><p>&emsp;&emsp;散列法（Hashing）是一种将字符组成的字符串转换为固定长度（一般是更短长度）的数值或索引值的方法，称为散列法，也叫哈希法。由于通过更短的哈希值比用原始值进行数据库搜索更快，这种方法一般用来在数据库中建立索引并进行搜索，同时还用在各种解密算法中。</p><h2 id="1、由Hashing引申的HashTable、HashMap、TreeMap"><a href="#1、由Hashing引申的HashTable、HashMap、TreeMap" class="headerlink" title="1、由Hashing引申的HashTable、HashMap、TreeMap"></a>1、由Hashing引申的HashTable、HashMap、TreeMap</h2><p>&emsp;&emsp;HashTable 是早期Java类库提供的一个哈希表实现，本身是同步的，不支持 null 键和值，由于同步导致的性能开销，所以现在已经很少被推荐使用。</p><p>&emsp;&emsp;HashMap与 HashTable主要区别在于 HashMap 不是同步的，支持 null 键和值等。通常情况下，HashMap 进行 put 或者 get 操作，可以达到常数时间的性能，所以它是绝大部分利用键值对存取场景的首选。</p><p>&emsp;&emsp;TreeMap 则是基于红黑树的一种提供顺序访问的 Map，和 HashMap 不同，它的 get、put、remove 之类操作都是 O（log(n)）的时间复杂度，具体顺序可以由指定的 Comparator 来决定，或者根据键的自然顺序来判断。</p><h1 id="二、HashMap"><a href="#二、HashMap" class="headerlink" title="二、HashMap"></a>二、HashMap</h1><h2 id="1、HashMap的概念和底层结构"><a href="#1、HashMap的概念和底层结构" class="headerlink" title="1、HashMap的概念和底层结构"></a>1、HashMap的概念和底层结构</h2><p>&emsp;&emsp;HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</p><hr><h4 id="面试题1、HashMap的工作原理"><a href="#面试题1、HashMap的工作原理" class="headerlink" title="面试题1、HashMap的工作原理"></a><font color='red'>面试题1、HashMap的工作原理</font></h4><p>&emsp;&emsp;HashMap的工作原理 ：HashMap是基于散列法（又称哈希法）的原理，使用put(key, value)存储对象到HashMap中，使用get(key)从HashMap中获取对象。当我们给put()方法传递键和值时，我们先对键调用hashCode()方法，返回的hashCode用于找到bucket（桶）位置来储存Entry对象。HashMap是在bucket中储存键对象和值对象，作为Map.Entry。并不是仅仅只在bucket中存储值。</p><h4 id="面试题2：什么叫哈希碰撞（哈希冲突）？"><a href="#面试题2：什么叫哈希碰撞（哈希冲突）？" class="headerlink" title="面试题2：什么叫哈希碰撞（哈希冲突）？"></a><font color='red'>面试题2：什么叫哈希碰撞（哈希冲突）？</font></h4><p>&emsp;&emsp;不同的键值通过哈希函数运算得到相同的哈希值，解决哈希冲突的方式有开放寻址法和链表法，ThreadLocalMap由于其元素个数较少，采用的是开放寻址法，而HashMap采用的是链表法来解决哈希冲突，即所有散列值相同的元素都放在相同槽对应的链表中（也就是数组+链表的方式）。</p><hr><p>&emsp;&emsp;我们都知道，在JDK8之前，HashMap的数据结构是：<font color='red'>数组+链表</font>  的复合结构，数组被分为一个个的桶（bucket）每一个桶都是存储着一个或多个Entry对象，我们查看Entry对象的源码，发现每一个Entry对象包含Key【键】、value【值】、next【指向下一个Entry对象】,通过哈希值决定Entry对象在这个数组的寻址，哈希值相同的Entry对象，则以链表的形式存储。</p><p>我们可以通过源码看到，Entry有一个构造函数，该构造函数第三个参数是<strong>Entry&lt;K,V&gt; n</strong>，<strong>主要用于链表的头插入，传入链表的链表头，将新生成的Entry对象作为链表的头部，next属性指向原链表头，如下图2。</strong>这个也就是所谓的<font color='red'>“头插法”</font></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1616083123591.png" alt="1616083123591"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1616312977244.png" alt="1616312977244"></p><h2 id="2、HashMap的查询时间复杂度"><a href="#2、HashMap的查询时间复杂度" class="headerlink" title="2、HashMap的查询时间复杂度"></a>2、HashMap的查询时间复杂度</h2><p>&emsp;&emsp;HashMap的本质是一个数组，数组的每个索引被称为桶，每个桶里放着一个单链表，一个节点连着一个节点。很明显通过下标来检索数组元素时间复杂度为O(1)，而且遍历链表的时间复杂度是O(n)，所以在链表长度尽可能短的前提下，HashMap的查询复杂度接近O(1)。</p><p>问题：为什么HashMap会选择数组+链表的数据结构来保存数据？</p><p>&emsp;&emsp;对于数组，其存储区间连续，占用内存严重，寻址容易，插入与删除困难；而对于链表，存储区间离散，占用内存比较宽松，寻址困难，插入与删除容易；而HashMap综合应用了这两种结构，实现了寻址容易，插入与删除也容易。</p><h2 id="3、HashMap源码中各个常量、成员变量的意思"><a href="#3、HashMap源码中各个常量、成员变量的意思" class="headerlink" title="3、HashMap源码中各个常量、成员变量的意思"></a>3、HashMap源码中各个常量、成员变量的意思</h2><p>常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 HashMap 时未指定初始容量情况下的默认容量   </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; </span><br><span class="line">【<span class="number">1</span>&lt;&lt;<span class="number">4</span> =》  <span class="number">0000</span> <span class="number">0001</span> 左移<span class="number">4</span>位，变成 <span class="number">0001</span> <span class="number">0000</span> =》 <span class="number">16</span>】</span><br><span class="line"><span class="comment">//HashMap 的最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//HashMap 默认的装载因子,当 HashMap 中元素数量超过 容量*装载因子 时，进行　resize()扩容操作</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存Node&lt;K,V&gt;节点的数组</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由　hashMap 中 Node&lt;K,V&gt;　节点构成的 set</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记录 hashMap 当前存储的元素的数量</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记录　hashMap 发生结构性变化的次数（注意　value 的覆盖不属于结构性变化）</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">//threshold的值应等于 table.length * loadFactor, size 超过这个值时进行　resize()扩容</span></span><br><span class="line"><span class="keyword">int</span> threshold; </span><br><span class="line"></span><br><span class="line"><span class="comment">//记录 hashMap 加载因子</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure><h2 id="4、JDK1-7-HashMap源码"><a href="#4、JDK1-7-HashMap源码" class="headerlink" title="4、JDK1.7 HashMap源码"></a>4、JDK1.7 HashMap源码</h2><h3 id="4-1、HashMap的构造函数"><a href="#4-1、HashMap的构造函数" class="headerlink" title="4.1、HashMap的构造函数"></a>4.1、HashMap的构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里主要是判断一些初始化参数，例如初始化容量不小于0且不超过最大值，加载因子不小于等于0</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> + initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">//正常情况下，threshold的值应等于 table.length * loadFactor, size 超过这个值时进行　resize()扩容，但由于现在还未初始化table，所以默认设置该值为初始化容量大小。</span></span><br><span class="line">    threshold = initialCapacity;</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、HashMap的put方法"><a href="#4-2、HashMap的put方法" class="headerlink" title="4.2、HashMap的put方法"></a>4.2、HashMap的put方法</h3><p> <img src="http://cheng_qiwei.gitee.io/blog/img/1617286646051.png" alt="1617286646051"></p><p>&emsp;&emsp;我们从HashMap的构造方法中，我们发现，在new一个HashMap对象时，他并没有去真正赋予数组的大小，它其实是使用了懒加载，在put的时候才进行赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断table是否为空，为空则初始化table</span></span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当key为null时，把该对象添加到数组下标为0的位置上</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="comment">//计算key的hash值</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="comment">//根据hash值和数组长度计算下标【存放在数组的位置上，方法是hash &amp; （length -1）】</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">//遍历下标对应的列表，获取是否该Key存在于列表中，存在则替换该值并将旧的值返回</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//增加修改次数</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//若上面遍历不存在，则进行插入操作；</span></span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-1、inflateTable-int-toSize"><a href="#4-2-1、inflateTable-int-toSize" class="headerlink" title="4.2.1、inflateTable(int toSize);"></a>4.2.1、inflateTable(int toSize);</h4><p>该方法主要是初始化table数组，其源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inflateTable</span><span class="params">(<span class="keyword">int</span> toSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Find a power of 2 &gt;= toSize</span></span><br><span class="line">    <span class="comment">//返回2的次方，需要返回值大于等于toSize</span></span><br><span class="line">    <span class="keyword">int</span> capacity = roundUpToPowerOf2(toSize);</span><br><span class="line"></span><br><span class="line">    threshold = (<span class="keyword">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">    table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">    initHashSeedAsNeeded(capacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回2的次方，需要返回值大于等于number</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">roundUpToPowerOf2</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert number &gt;= 0 : &quot;number must be non-negative&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> number &gt;= MAXIMUM_CAPACITY</span><br><span class="line">        ? MAXIMUM_CAPACITY</span><br><span class="line">        : (number &gt; <span class="number">1</span>) ? Integer.highestOneBit((number - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化中最重要的方法，返回大于等于i的2的次方数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">highestOneBit</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    i |= (i &gt;&gt;  <span class="number">1</span>);</span><br><span class="line">    i |= (i &gt;&gt;  <span class="number">2</span>);</span><br><span class="line">    i |= (i &gt;&gt;  <span class="number">4</span>);</span><br><span class="line">    i |= (i &gt;&gt;  <span class="number">8</span>);</span><br><span class="line">    i |= (i &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> i - (i &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里以一个例子验证roundUpToPowerOf2方法    </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">eg:获取7最接近的2次平方的值</span><br><span class="line">0000 0111    =》7</span><br><span class="line">0000 0110    =》7 - 1 = 6</span><br><span class="line">&lt;&lt; 1</span><br><span class="line">0000 1100    =》12</span><br><span class="line">i |= (i &gt;&gt;  1);//0000 1100 | 0000 0110 = 0000 1110</span><br><span class="line">i |= (i &gt;&gt;  2);//0000 1110 | 0000 0011 = 0000 1111</span><br><span class="line">i |= (i &gt;&gt;  4);//以下也如此，主要是为了把后面的位数都填充为1但到此就已经完成，后面没意义</span><br><span class="line">i |= (i &gt;&gt;  8);</span><br><span class="line">i |= (i &gt;&gt; 16);</span><br><span class="line"></span><br><span class="line">return i - (i &gt;&gt;&gt; 1);  //0000 1111 - 0000 0111 = 0000 1000  =》 8</span><br></pre></td></tr></table></figure><h4 id="4-2-2、indexFor-int-h-int-length"><a href="#4-2-2、indexFor-int-h-int-length" class="headerlink" title="4.2.2、indexFor(int h, int length);"></a>4.2.2、indexFor(int h, int length);</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法主要是用来计算下标，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0010 0100  =》36(hash)</span><br><span class="line">length = 16</span><br><span class="line">hash &amp; length - 1</span><br><span class="line">0010 0100</span><br><span class="line">&amp;</span><br><span class="line">0000 1111</span><br><span class="line">0000 0100 =》 4</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里将低位全部变成1，再进行与运算后，下标必定会落在其范围中，这也是为什么规定了<strong>HashMap的容量必须是2的次方数</strong>的原因。但是，由于这里都是使用低位进行运算，而高位没有进行运算，所以可能会出现数据分布不均，所以在该方法的上一层计算hash的时候，做了很多右移并进行异或运算的操作，解决分布不均衡的问题。</p><h4 id="4-2-3、addEntry-int-hash-K-key-V-value-int-bucketIndex"><a href="#4-2-3、addEntry-int-hash-K-key-V-value-int-bucketIndex" class="headerlink" title="4.2.3、addEntry(int hash, K key, V value, int bucketIndex);"></a>4.2.3、addEntry(int hash, K key, V value, int bucketIndex);</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        <span class="comment">//当数组长度大于等于扩容的阈值时且数组下标对应链表不为空时，进行扩容，扩容的长度为原来的两倍</span></span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class="line">    table = newTable;</span><br><span class="line">    threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;<span class="comment">//rehash大几率时false，除非自己去修改hashSeed的值</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">            e.next = newTable[i];</span><br><span class="line">             <span class="comment">//替换数组中的链表头位置</span></span><br><span class="line">            newTable[i] = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;addEntry这个方法包含几个重要的逻辑，第一个是resize扩容，当数组长度大于等于扩容的阈值时且数组下标对应链表不为空时，进行扩容，扩容的长度为原来的两倍。而之所以需要进行扩容，是因为数组的长度固定时，当元素过多时，那么每个链表的元素就会增加，当链表过长时，根据上面讲的HashMap的查询时间复杂度，调用get方法就会更耗性能，所以通过扩容，将数据分散开来，提升访问性能。<strong>在Hash值未被重新计算的前提下，若链表元素被分配到其他新链表时，其新链表的下标=原下标+原数组长度</strong>。</p><p>&emsp;&emsp;在扩容的源码中，有一个initHashSeedAsNeeded的方法来计算是否需要进行重新hash的操作，在默认情况下，是永远不会进行该操作，除非配置了JVM启动参数<code>jdk.map.althashing.threshold</code>，这个操作是为了将链表打散，使扩容后的数据分布更加均匀。</p><h4 id="面试题3、JDK8之前HashMap多线程resize的时候造成闭环链表问题，如何解决"><a href="#面试题3、JDK8之前HashMap多线程resize的时候造成闭环链表问题，如何解决" class="headerlink" title="面试题3、JDK8之前HashMap多线程resize的时候造成闭环链表问题，如何解决"></a><font color='red'>面试题3、JDK8之前HashMap多线程resize的时候造成闭环链表问题，如何解决</font></h4><p>a、单线程正常的扩容过程</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210313231117108.png" alt="image-20210313231117108"></p><p>&emsp;&emsp;当数组的size从2扩容为4时，所有的值会进行重排【重新算出数组下标，下标只会是原来的位置或原来的下标+原数组的长度】，然后赋值到新的map上面，赋值完成后，当所有值都同时被保存在一测时，会出现当前的链表是之前链表的倒序的情况。</p><p>b、并发下的扩容</p><p>会出现问题的代码在下图：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/20170125112507421.png" alt="20170125112507421"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1615903731791.png" alt="1615903731791"></p><p>由于线程1、2同时执行，当线程2执行到红框那一行之后就被CPU挂起，而线程1把代码执行完毕后，就会如图2第二行最后的结果一致，接着CPU切换到线程1上来，先把K1安置，接着</p><p>e = next = K2；</p><p>e != null;此时循环继续；</p><p>next = e.next = K1；由于发生了改变，此时的next指回K1</p><p>但是由于K1已存在，所以指针直接指向K1，此时整个链表变成一个闭环，从而造成闭环链表问题。</p><p>在复杂的生产环境中，这种情况尽管不常见，但是可能会碰到。</p><p><font color='red'>解决方案是：在已知hashMap的数据长度时，在初始化的时候直接指定hashMap的长度，避免其进行扩容，就不会出现该情况。</font></p><h4 id="4-2-4、modCount"><a href="#4-2-4、modCount" class="headerlink" title="4.2.4、modCount++;"></a>4.2.4、modCount++;</h4><p>&emsp;&emsp;在put方法中，还有一个modCount++;的操作，modCount这个参数是用来计算该对象被修改的次数，是hashMap提供的一种快速失败的机制，用于迭代遍历时校验对象是否被修改，当集合在迭代过程中被其他线程修改时，就会抛出<code>ConcurrentModificationException</code>。【并发修改异常】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;    </span><br><span class="line"><span class="comment">//在遍历集合之前会将modCount赋值给expectedModCount，接着遍历过程中会不断验证modCount是否发生变化</span></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)        </span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">    Entry&lt;K,V&gt; e = next;    </span><br><span class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)        </span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </span><br><span class="line">    <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;        </span><br><span class="line">        Entry[] t = table;        </span><br><span class="line">        <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">    current = e;    </span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：那想要在遍历集合的过程中删除集合的元素，该如何实现？</p><p>&emsp;&emsp;我们可以通过使用Iterator迭代器遍历集合，调用迭代器的<code>remove</code>方法删除元素，该方法在删除元素的时候会重新对<code>expectedModCount</code>赋值，保证了<code>modCount == expectedModCount</code>。</p><h1 id="三、JDK1-7-ConcurrentHashMap源码"><a href="#三、JDK1-7-ConcurrentHashMap源码" class="headerlink" title="三、JDK1.7 ConcurrentHashMap源码"></a>三、JDK1.7 ConcurrentHashMap源码</h1><p>&emsp;&emsp;我们都知道，HashMap是线程不安全的，而HashTable是线程安全的，但是我们几乎不怎么使用HashTable，那是因为HashTable使用synchroized来保证线程安全，但这就导致在多线程竞争激烈的情况下HashTable的使用率极其低下。当一个线程在访问HashTable的同步方法时，其他线程也需要访问HashTable的同步方法时，会进入阻塞或轮询状态。</p><p>&emsp;&emsp;既然HashTable在多线程中是由于争抢一把锁导致性能低下，那么我们是否可以在容器中设置多把锁，每一把锁锁住一部分数据，那么在多线程访问中，线程间就不会出现锁竞争，从而提高并发访问效率。而这个设想，就是ConcurrentHashMap所使用的锁分离技术。首先将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p><h2 id="1、ConcurrentHashMap源码的常量与成员变量"><a href="#1、ConcurrentHashMap源码的常量与成员变量" class="headerlink" title="1、ConcurrentHashMap源码的常量与成员变量"></a>1、ConcurrentHashMap源码的常量与成员变量</h2><p>&emsp;&emsp;与HashMap相比，ConcurrentHashMap增加的属性有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//并发级别，用于计算一个Segment负责管理多少个Entry数组</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br><span class="line"><span class="comment">//规定了segment中的HashEntry数组最小容量，数组容量必须是2的次方数,次方数至少为1</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_SEGMENT_TABLE_CAPACITY = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//规定了segment数组的最大值不能超过2的16次方</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SEGMENTS = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="comment">//segmentMask = segment[].length - 1 用来执行【haschCode &amp; segmentMask】计算Hash值</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> segmentMask;</span><br></pre></td></tr></table></figure><h2 id="2、ConcurrentHashMap源码"><a href="#2、ConcurrentHashMap源码" class="headerlink" title="2、ConcurrentHashMap源码"></a>2、ConcurrentHashMap源码</h2><h3 id="2-1、ConcurrentHashMap的构造函数"><a href="#2-1、ConcurrentHashMap的构造函数" class="headerlink" title="2.1、ConcurrentHashMap的构造函数"></a>2.1、ConcurrentHashMap的构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="comment">//这里规定segment的最大容量不能超过2的16次方</span></span><br><span class="line">    <span class="keyword">if</span> (concurrencyLevel &gt; MAX_SEGMENTS)</span><br><span class="line">        concurrencyLevel = MAX_SEGMENTS;</span><br><span class="line">    <span class="comment">// 这里的sshift用于保存segment数组容量的2的次方数，ssize保存的是segment数组容量的2的次方值</span></span><br><span class="line">    <span class="keyword">int</span> sshift = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ssize = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//用来获取大于等于concurrencyLevel的2的次方数</span></span><br><span class="line">    <span class="comment">//默认的concurrencyLevel=16，循环4次后，sshift=4,ssize=16</span></span><br><span class="line">    <span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class="line">        ++sshift;</span><br><span class="line">        ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.segmentShift = <span class="number">32</span> - sshift;</span><br><span class="line">    <span class="keyword">this</span>.segmentMask = ssize - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//这里规定map的最大容量不能超过2的30次方</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="comment">//按照默认值计算 c = 1</span></span><br><span class="line">    <span class="keyword">int</span> c = initialCapacity / ssize;</span><br><span class="line">    <span class="keyword">if</span> (c * ssize &lt; initialCapacity)</span><br><span class="line">        ++c;</span><br><span class="line">    <span class="keyword">int</span> cap = MIN_SEGMENT_TABLE_CAPACITY;</span><br><span class="line">    <span class="comment">//因为cap = 2 &gt; c = 1，所以cap = 2</span></span><br><span class="line">    <span class="keyword">while</span> (cap &lt; c)</span><br><span class="line">        cap &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//在初始化Segment数组时默认初始化segment[0]，主要是为了生成原型，当初始化其他segment对象时无需再计算HashEntry数组大小</span></span><br><span class="line">    Segment&lt;K,V&gt; s0 =</span><br><span class="line">        <span class="keyword">new</span> Segment&lt;K,V&gt;(loadFactor, (<span class="keyword">int</span>)(cap * loadFactor),</span><br><span class="line">                         (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap]);</span><br><span class="line">    Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])<span class="keyword">new</span> Segment[ssize];</span><br><span class="line">    UNSAFE.putOrderedObject(ss, SBASE, s0); <span class="comment">// ordered write of segments[0]</span></span><br><span class="line">    <span class="comment">//将segment保存下来</span></span><br><span class="line">    <span class="keyword">this</span>.segments = ss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、ConcurrentHashMap的put方法"><a href="#2-2、ConcurrentHashMap的put方法" class="headerlink" title="2.2、ConcurrentHashMap的put方法"></a>2.2、ConcurrentHashMap的put方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    Segment&lt;K,V&gt; s;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">     <span class="comment">//计算需要存储的segment数组中的下标</span></span><br><span class="line">    <span class="keyword">int</span> j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class="line">    <span class="comment">//判断数组里面的Segment对象是否初始化，为空者执行ensureSegment(j);方法创建Segment对象</span></span><br><span class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          </span><br><span class="line">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="keyword">null</span>)</span><br><span class="line">        s = ensureSegment(j);</span><br><span class="line">    <span class="keyword">return</span> s.put(key, hash, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【计算需要存储的segment数组中的下标    <span class="keyword">int</span> j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;】</span><br><span class="line">按照上面的默认值计算 segmentShift = <span class="number">32</span> - <span class="number">4</span> = <span class="number">28</span>；segmentMask = <span class="number">16</span> -<span class="number">1</span> = <span class="number">15</span></span><br><span class="line">那么此时：hash右移<span class="number">28</span>位后，其值范围就只落在<span class="number">0</span>~<span class="number">15</span>之间，再去与上<span class="number">15</span>，既可以得到对应的下标。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接下来，如果发现该数组下的Segment对象为空，则会进行初始化</span></span><br><span class="line"><span class="comment">//在初始化之前会一直去尝试获取锁，在尝试获取的过程中就会去判断是否有其他线程为其生成对象，如果已经生成，这获取对应对象后直接跳出该方法，否则到最后使用cas自旋，将生成的Segment对象置入数组对应位置中，当有多个线程同时并发执行创建同一个数组下标的segment对象时，由于CAS自旋机制，最终只会有一个线程创建成功，其他线程将获取数组对象并返回，从而达到在并发情况下的线程安全。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Segment&lt;K,V&gt; <span class="title">ensureSegment</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Segment&lt;K,V&gt;[] ss = <span class="keyword">this</span>.segments;</span><br><span class="line">        <span class="keyword">long</span> u = (k &lt;&lt; SSHIFT) + SBASE; <span class="comment">// raw offset</span></span><br><span class="line">        Segment&lt;K,V&gt; seg;</span><br><span class="line">        <span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Segment&lt;K,V&gt; proto = ss[<span class="number">0</span>]; <span class="comment">// use segment 0 as prototype</span></span><br><span class="line">            <span class="keyword">int</span> cap = proto.table.length;</span><br><span class="line">            <span class="keyword">float</span> lf = proto.loadFactor;</span><br><span class="line">            <span class="keyword">int</span> threshold = (<span class="keyword">int</span>)(cap * lf);</span><br><span class="line">            HashEntry&lt;K,V&gt;[] tab = (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap];</span><br><span class="line">            <span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</span><br><span class="line">                == <span class="keyword">null</span>) &#123; <span class="comment">// recheck</span></span><br><span class="line">                Segment&lt;K,V&gt; s = <span class="keyword">new</span> Segment&lt;K,V&gt;(lf, threshold, tab);</span><br><span class="line">                <span class="keyword">while</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</span><br><span class="line">                       == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (UNSAFE.compareAndSwapObject(ss, u, <span class="keyword">null</span>, seg = s))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> seg;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后，当前面的Segment对象创建出来后，就会执行put的方法将数据保存到Segment对象中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, <span class="keyword">int</span> hash, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//尝试加锁 tryLock不阻塞</span></span><br><span class="line">    HashEntry&lt;K,V&gt; node = tryLock() ? <span class="keyword">null</span> : scanAndLockForPut(key, hash, value);</span><br><span class="line">    V oldValue;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line">        <span class="comment">//计算存储的HashEntry数组下标</span></span><br><span class="line">        <span class="keyword">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        <span class="comment">//获取HashEntry数组中的index下标，这里命名的first指的是HashEntry中的链表的头结点</span></span><br><span class="line">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);</span><br><span class="line">        <span class="comment">//遍历链表</span></span><br><span class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                K k;</span><br><span class="line">                <span class="keyword">if</span> ((k = e.key) == key ||</span><br><span class="line">                    (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">                    oldValue = e.value;</span><br><span class="line">                    <span class="comment">//如果是ifAbsent,则不更新值，直接返回旧值</span></span><br><span class="line">                    <span class="keyword">if</span> (!onlyIfAbsent) &#123;</span><br><span class="line">                        e.value = value;</span><br><span class="line">                        ++modCount;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//假设遍历到最后节点均未匹配到相同的key由于它是最后的链表节点，e.next==null</span></span><br><span class="line">                <span class="comment">//再次循环时，将会运行到下面的else条件新建节点</span></span><br><span class="line">                e = e.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//当获取锁失败时，会调用scanAndLockForPut提前生成node对象，这里只需设置链表头即可</span></span><br><span class="line">                <span class="keyword">if</span> (node != <span class="keyword">null</span>)</span><br><span class="line">                    node.setNext(first);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">//创建HashEntry对象，采用头插法，新的HashEntry对象的next属性指向first</span></span><br><span class="line">                    node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, first);</span><br><span class="line">                <span class="comment">//HashEntry总数+1</span></span><br><span class="line">                <span class="keyword">int</span> c = count + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//如果数量达到了扩容的阈值，则进行扩容</span></span><br><span class="line">                <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                    rehash(node);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">//添加HashEntry对象到数组中，并替换数组中的链表头（替换成新创建的HashEntry对象）</span></span><br><span class="line">                    setEntryAt(tab, index, node);</span><br><span class="line">                <span class="comment">//Setment中累加变化次数</span></span><br><span class="line">                ++modCount;</span><br><span class="line">                <span class="comment">//赋值新计算的count值</span></span><br><span class="line">                count = c;</span><br><span class="line">                oldValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//解锁ReentrantLock</span></span><br><span class="line">        unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个put方法首先会去尝试获取一把锁【tryLock】不会阻塞，如果没有获得锁，则会去执行scanAndLockForPut(key, hash, value)这个方法。这个方法的目的就是不断尝试获取锁（不会阻塞），获取不到则提前创建这次put操作的Entry对象，最后尝试超过设置的最大次数后，就直接调用阻塞的lock方法获取锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> HashEntry&lt;K,V&gt; <span class="title">scanAndLockForPut</span><span class="params">(K key, <span class="keyword">int</span> hash, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据Hash值计算数组下标并获取链表的表头</span></span><br><span class="line">    HashEntry&lt;K,V&gt; first = entryForHash(<span class="keyword">this</span>, hash);</span><br><span class="line">    HashEntry&lt;K,V&gt; e = first;</span><br><span class="line">    HashEntry&lt;K,V&gt; node = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//用这个变量来控制循环的逻辑</span></span><br><span class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// negative while locating node</span></span><br><span class="line">    <span class="comment">//循环尝试获取锁</span></span><br><span class="line">    <span class="keyword">while</span> (!tryLock()) &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt; f; <span class="comment">// to recheck first below</span></span><br><span class="line">        <span class="keyword">if</span> (retries &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//当链表的表头 == null 或者遍历链表后未匹配到元素时，创建HashEntry对象</span></span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="comment">// speculatively create node</span></span><br><span class="line">                    node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                <span class="comment">//设置retries=0用以下次循环时调用其他逻辑</span></span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当链表表头不为空时，遍历链表，寻址到链表元素时设置retries=0调用其他逻辑</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(e.key))</span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//当链表遍历到最后一个节点，e.next=null,当再次循环时，会调用创建HashEntry对象的逻辑</span></span><br><span class="line">                e = e.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当重试次数大于一定的次数时，直接调用阻塞的Lock方法</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class="line">            lock();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(retries &amp; 1) == 0 ：当retries是偶数时，返回true，表示每隔一次才去判断链表表头是否发生变化</span></span><br><span class="line">        <span class="comment">//重新获取链表表头，当链表表头与原来获取的first不同时，设置retries=-1，重新遍历</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((retries &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                 (f = entryForHash(<span class="keyword">this</span>, hash)) != first) &#123;</span><br><span class="line">            e = first = f; <span class="comment">// re-traverse if entry changed</span></span><br><span class="line">            retries = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在获取锁之后，接着就是计算下标，获取存放数组的位置，在插入时，就需要判断是否需要扩容，当满足条件<code>count + 1 &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY</code>时，将调用扩容方法**<font color='red'>rehash</font>**，这里扩容的方法与HashMap有所不同，首先ConcurrentHashMap不需要执行HashMap的reHash方法（重新计算数组下标），所以扩容后链表的元素只会存在于原来的下标或原来的下标+原数组长度，同时，在扩容的时候，也不是说直接遍历整个链表然后一个一个插进新的链表上，而是先遍历整个列表，计算所有元素的新下标，当在某一个元素开始直至结束，其下标均为相同的，则到时候会在该元素开始，将这一整节元素直接迁移到新节点上。然后再依次把其他元素拷贝过来。如图：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/123456789000.jpg" alt="123456789000.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：这里传的参数是新的HashEntry对象，其next属性指向原链表的头部</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">(HashEntry&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">    HashEntry&lt;K,V&gt;[] oldTable = table;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="comment">//向左偏移1位，扩容一倍大小</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//重新计算阈值</span></span><br><span class="line">    threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">    <span class="comment">//初始化新的HashEntry数组</span></span><br><span class="line">    HashEntry&lt;K,V&gt;[] newTable =</span><br><span class="line">        (HashEntry&lt;K,V&gt;[]) <span class="keyword">new</span> HashEntry[newCapacity];</span><br><span class="line">    <span class="comment">//HashEntry[].length - 1 用于计算Hash值</span></span><br><span class="line">    <span class="keyword">int</span> sizeMask = newCapacity - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldCapacity ; i++) &#123;</span><br><span class="line">        <span class="comment">//遍历旧的HashEntry数组</span></span><br><span class="line">        HashEntry&lt;K,V&gt; e = oldTable[i];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            HashEntry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="comment">//计算出新的HashEntry数组下标</span></span><br><span class="line">            <span class="keyword">int</span> idx = e.hash &amp; sizeMask;</span><br><span class="line">            <span class="comment">//当链表中只有一个元素时，直接将该元素赋值到数组中</span></span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>)   <span class="comment">//  Single node on list</span></span><br><span class="line">                newTable[idx] = e;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// Reuse consecutive sequence at same slot</span></span><br><span class="line">                HashEntry&lt;K,V&gt; lastRun = e;</span><br><span class="line">                <span class="keyword">int</span> lastIdx = idx;</span><br><span class="line">                <span class="comment">//该循环的目的是从链表尾部截取出一条与链表末尾节点的新数组下标相同，并且相连的链表</span></span><br><span class="line">                <span class="comment">//并存储该截取链表的头对象到lastRun对象，存储新数组下标到lastIdx中</span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; last = next;</span><br><span class="line">                     last != <span class="keyword">null</span>;</span><br><span class="line">                     last = last.next) &#123;</span><br><span class="line">                    <span class="keyword">int</span> k = last.hash &amp; sizeMask;</span><br><span class="line">                    <span class="keyword">if</span> (k != lastIdx) &#123;</span><br><span class="line">                        lastIdx = k;</span><br><span class="line">                        lastRun = last;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//直接移动尾部截取的链表到新的数组下标中</span></span><br><span class="line">                newTable[lastIdx] = lastRun;</span><br><span class="line">                <span class="comment">// Clone remaining nodes</span></span><br><span class="line">                <span class="comment">//重新顺着从原链表头开始遍历，遍历到lastRun，也就是链表截取处时，跳出循环</span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123;</span><br><span class="line">                    V v = p.value;</span><br><span class="line">                    <span class="keyword">int</span> h = p.hash;</span><br><span class="line">                    <span class="keyword">int</span> k = h &amp; sizeMask;</span><br><span class="line">                    HashEntry&lt;K,V&gt; n = newTable[k];</span><br><span class="line">                    <span class="comment">//采用头插法讲一个个元素分别插入到链表头中，并赋值给HashEntry数组</span></span><br><span class="line">                    newTable[k] = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(h, p.key, v, n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对原链表扩容完成之后，计算新的HashEntry的下标</span></span><br><span class="line">    <span class="keyword">int</span> nodeIndex = node.hash &amp; sizeMask; <span class="comment">// add the new node</span></span><br><span class="line">    <span class="comment">//替换链表头</span></span><br><span class="line">    node.setNext(newTable[nodeIndex]);</span><br><span class="line">    <span class="comment">//赋值到HashEntry数组中</span></span><br><span class="line">    newTable[nodeIndex] = node;</span><br><span class="line">    table = newTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、红黑树"><a href="#四、红黑树" class="headerlink" title="四、红黑树"></a>四、红黑树</h1><p>&emsp;&emsp;要讲红黑树，要先讲二叉查找树（Binary Search Tree，简称BST），它是一棵二叉树，它的左子节点的值比父节点的值要小，右节点的值要比父节点的值大。它的高度决定了它的查找效率。在理想的情况下，二叉查找树增删查改的时间复杂度为O(logN)（其中N为节点数），最坏的情况下为O(N)。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1617441217214.png" alt="1617441217214"></p><p>&emsp;&emsp;基于二叉查找树的弊端，就出现了一种新的树——平衡二叉树，平衡二叉树在插入和删除的时候，会通过旋转的操作将高度保持在logN，它的两种最经典的实现就是AVL树和红黑树，而由于AVL树的实现比较复杂且插入和删除效率低，所以在实际环境下的应用不如红黑树。在Java8中由于HashMap使用了红黑树取代链表，所以性能有所提升。</p><h2 id="1、红黑树的定义"><a href="#1、红黑树的定义" class="headerlink" title="1、红黑树的定义"></a>1、红黑树的定义</h2><p>在《算法导论》中对红黑树的定义如下：</p><ol><li>每个节点或是红的，或是黑的；</li><li>根节点是黑的；</li><li>每个叶节点是黑的（注意每一个节点都存在黑色的null节点）；</li><li>如果一个节点是红的，则它的两个儿子都是黑的（父子节点不能出现连个连续的红色结点）；</li><li>对每个节点，从该节点到其子孙节点的所有路径上包含相同数目的黑节点（黑色节点平衡）。</li></ol><h2 id="2、红黑树节点的调整"><a href="#2、红黑树节点的调整" class="headerlink" title="2、红黑树节点的调整"></a>2、红黑树节点的调整</h2><p>&emsp;&emsp;我们假设要插入的节点为N，其父节点为P，其祖父节点为G，其叔叔节点（父亲的兄弟节点）为U。假设其父节点P为黑色，则由于插入的新节点必定为红色节点，所以整棵树就满足红黑树的所有性质，不需要进行调整。但是，当父亲节点P为红色时，则出现连续两个红色节点，则不满足定义4的内容，父子节点不能出现连续的红色节点，所以此时就需要进行调整。</p><p>&emsp;&emsp;那么在调整的时候就会出现以下三种情况：</p><h3 id="2-1、新节点N的叔叔节点U是红色，将父节点和叔叔节点改为黑色，祖父节点G修改为红色"><a href="#2-1、新节点N的叔叔节点U是红色，将父节点和叔叔节点改为黑色，祖父节点G修改为红色" class="headerlink" title="2.1、新节点N的叔叔节点U是红色，将父节点和叔叔节点改为黑色，祖父节点G修改为红色"></a>2.1、新节点N的叔叔节点U是红色，将父节点和叔叔节点改为黑色，祖父节点G修改为红色</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1617613492816.png" alt="1617613492816"></p><h3 id="2-2、新节点N的叔叔U是黑色的，且N是左边的孩子，对祖父节点G进行一次右旋转即可"><a href="#2-2、新节点N的叔叔U是黑色的，且N是左边的孩子，对祖父节点G进行一次右旋转即可" class="headerlink" title="2.2、新节点N的叔叔U是黑色的，且N是左边的孩子，对祖父节点G进行一次右旋转即可"></a>2.2、新节点N的叔叔U是黑色的，且N是左边的孩子，对祖父节点G进行一次右旋转即可</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1617614066471.png" alt="1617614066471"></p><h3 id="2-3、新节点N的叔叔U是黑色的，且N是右边的孩子，此时对父节点进行一次左旋转，再进行2-2的操作即可"><a href="#2-3、新节点N的叔叔U是黑色的，且N是右边的孩子，此时对父节点进行一次左旋转，再进行2-2的操作即可" class="headerlink" title="2.3、新节点N的叔叔U是黑色的，且N是右边的孩子，此时对父节点进行一次左旋转，再进行2.2的操作即可"></a>2.3、新节点N的叔叔U是黑色的，且N是右边的孩子，此时对父节点进行一次左旋转，再进行2.2的操作即可</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1617614877460.png" alt="1617614877460"></p><h1 id="五、JDK1-8-HashMap源码"><a href="#五、JDK1-8-HashMap源码" class="headerlink" title="五、JDK1.8 HashMap源码"></a>五、JDK1.8 HashMap源码</h1><h2 id="1、HashMap1-8版本新增常量"><a href="#1、HashMap1-8版本新增常量" class="headerlink" title="1、HashMap1.8版本新增常量"></a>1、HashMap1.8版本新增常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当链表长度达到阈值8时，转换成红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"><span class="comment">//满足树化的最小数组长度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"><span class="comment">//当扩容红黑树拆分链表后判断其数量是否大于6，大于则重组红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><h2 id="2、红黑树存储的对象TreeNode"><a href="#2、红黑树存储的对象TreeNode" class="headerlink" title="2、红黑树存储的对象TreeNode"></a>2、红黑树存储的对象TreeNode</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//父节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    <span class="comment">//左子节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    <span class="comment">//右子节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    <span class="comment">//双向链表的前一个结点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="comment">//颜色</span></span><br><span class="line">    <span class="keyword">boolean</span> red;</span><br><span class="line">    <span class="comment">//继承Node得到，双向链表的下一个结点</span></span><br><span class="line">    <span class="comment">//Node&lt;K,V&gt; next;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TreeNode继承的LinkedHashMap.Entry</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//LinkedHashMap.Entry继承Map.Entry&lt;K,V&gt;</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里parent、left、right、red四个参数是红黑树相关的参数，prev和next两个属性说明TreeNode是一个双向链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里计算Hash值的方法相对于1.7的版本来讲，没有1,7版本那么复杂了，这是因为有了红黑树的保障。</p><h2 id="3、HashMap的put方法"><a href="#3、HashMap的put方法" class="headerlink" title="3、HashMap的put方法"></a>3、HashMap的put方法</h2><p><img src="http://cheng_qiwei.gitee.io/blog/img/9f382ca8fdd5ac711b569b980a6de59e.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">    <span class="comment">//对数组初始化或扩容</span></span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//(n - 1) &amp; hash 计算数组下标</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">//如果头结点的key等于插入的key，赋值给e</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">//如果P是个红黑树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果P是个链表，HashMap默认</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//使用尾插法插入链表尾部</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//当插入第九个元素（大于8个）时，调用树化方法</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//当插入的数据刚好落在链表中时</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否要更新，1.8新加上putIfAbsent的方法，只能插入新的key，如果是重复的key则不插入，并且返回旧值</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">//自增size后判断是否超过扩容因子（JDK1.7时还有判断当前链表是否有元素）</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在JDK1.7中，采用头插法插入到链表的头部，而在JDK1.8中，采用的是尾插法插入到链表中，并且当链表的数量大于8时，也就是添加第九个元素时，会调用树化方法treeifyBin，根据条件将链表转换成红黑树。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链表树化红黑树</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">//如果当前数组为空 或者 数组长度小于64时</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        <span class="comment">//对数组进行扩容</span></span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//遍历链表</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//把Node类型转换成红黑树的TreeNode类型</span></span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//缓存头结点</span></span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//建立双向链表关系</span></span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">//hd作为链表的头结点，也是红黑树的根节点，遍历链表把其他数值逐个插入到红黑树中</span></span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1617632286838.png" alt="1617632286838"></p><p>接下里这里是真正的将链表树化的逻辑，也是红黑树的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; root = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//this（链表的头结点），开始遍历</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">        <span class="comment">//获取链表的下一个结点</span></span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">        <span class="comment">//设置结点左右子结点都是NULL</span></span><br><span class="line">        x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如果root根节点对象等于null，则赋值root根节点对象，并且变黑色</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.parent = <span class="keyword">null</span>;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            root = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//新增结点的Key的值</span></span><br><span class="line">            K k = x.key;</span><br><span class="line">            <span class="comment">//新增结点的hash值</span></span><br><span class="line">            <span class="keyword">int</span> h = x.hash;</span><br><span class="line">            <span class="comment">//Key的数据类型</span></span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> dir, ph;</span><br><span class="line">                <span class="comment">//根节点的key值</span></span><br><span class="line">                K pk = p.key;</span><br><span class="line">                <span class="comment">//如果根结点的hash值大于新增结点的hash值，则放在左树上（dir = -1）代表左边</span></span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="comment">//否则放在右边</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//如果hash值相同，获取key的数据类型，判断是否实现Comparable接口，则调用实现的compareTo方法</span></span><br><span class="line">                <span class="comment">//如果compareTo还相同或者没实现Compareable接口，则调用tieBreakOrder</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    <span class="comment">//比较getClass().getName() 和 System.identityHashCode</span></span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line">        </span><br><span class="line">                <span class="comment">//一直遍历直到想放的位置没有结点，等于 null</span></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//赋值新节点x的父节点</span></span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="comment">//如果左边放左边，如果右边放右边</span></span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    <span class="comment">//执行插入红黑树过程</span></span><br><span class="line">                    root = balanceInsertion(root, x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把根节点存储到数组中,并且把红黑树的根节点设置成双向链表的根节点</span></span><br><span class="line">    moveRootToFront(tab, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">moveRootToFront</span><span class="params">(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; tab != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; root.hash;</span><br><span class="line">        TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index];</span><br><span class="line">        <span class="keyword">if</span> (root != first) &#123;</span><br><span class="line">            Node&lt;K,V&gt; rn;</span><br><span class="line">            <span class="comment">//把红黑树的根节点赋值在数组上</span></span><br><span class="line">            tab[index] = root;</span><br><span class="line">            <span class="comment">//获取红黑树的根节点在双向链表中的前一个结点rp</span></span><br><span class="line">            TreeNode&lt;K,V&gt; rp = root.prev;</span><br><span class="line">            <span class="comment">//如果红黑树根节点在双线链表中的下一个结点rn不为空</span></span><br><span class="line">            <span class="keyword">if</span> ((rn = root.next) != <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//下一个结点的prev指向rp（等于跳过了root）</span></span><br><span class="line">                ((TreeNode&lt;K,V&gt;)rn).prev = rp;</span><br><span class="line">            <span class="comment">//如果上一个结点rp不为空，它的next指向rn（等于跳过了root）</span></span><br><span class="line">            <span class="keyword">if</span> (rp != <span class="keyword">null</span>)</span><br><span class="line">                rp.next = rn;</span><br><span class="line">            <span class="comment">//如果原数组中的存储的链表头结点不为空，则通过头插法，把root插入到first之上</span></span><br><span class="line">            <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">                first.prev = root;</span><br><span class="line">            root.next = first;</span><br><span class="line">            root.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当插入一个新的节点时，该下标位置的数组为红黑树，则使用以下逻辑插入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">putTreeVal</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">int</span> h, K k, V v)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> searched = <span class="keyword">false</span>;</span><br><span class="line">    TreeNode&lt;K,V&gt; root = (parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> dir, ph; K pk;</span><br><span class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">            dir = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                  (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                 (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                searched = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">//查找key是否属于红黑树中</span></span><br><span class="line">                <span class="keyword">if</span> (((ch = p.left) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                     (q = ch.find(h, k, kc)) != <span class="keyword">null</span>) ||</span><br><span class="line">                    ((ch = p.right) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                     (q = ch.find(h, k, kc)) != <span class="keyword">null</span>))</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            dir = tieBreakOrder(k, pk);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; xpn = xp.next;</span><br><span class="line">            TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class="line">            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                xp.left = x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                xp.right = x;</span><br><span class="line">            xp.next = x;</span><br><span class="line">            x.parent = x.prev = xp;</span><br><span class="line">            <span class="keyword">if</span> (xpn != <span class="keyword">null</span>)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)xpn).prev = x;</span><br><span class="line">            moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1、红黑树的插入逻辑"><a href="#3-1、红黑树的插入逻辑" class="headerlink" title="3.1、红黑树的插入逻辑"></a>3.1、红黑树的插入逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  红黑树的插入逻辑</span></span><br><span class="line"><span class="comment">  @Params</span></span><br><span class="line"><span class="comment">  root 根节点</span></span><br><span class="line"><span class="comment">  x即将插入的结点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//新节点默认为红色</span></span><br><span class="line">    x.red = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//xp表示父节点，xpp表示x的祖父节点，xppl表示xpp的左孩子结点，xppr表示xpp的右孩子结点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">        <span class="comment">//如果x没有父节点，则表示x是第一个结点，自动成为根节点，根节点为黑色</span></span><br><span class="line">        <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果父节点是黑色的，不需要做调整</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">//上面逻辑已经处理了父节点是黑色的情况，所以下面的逻辑父节点一定是红色的</span></span><br><span class="line">        <span class="comment">//当新节点的父节点是xpp的左叶子节点时</span></span><br><span class="line">        <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">            <span class="comment">//叔叔节点不为空 且 叔叔节点等于红色（2.1的调整方式）</span></span><br><span class="line">            <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                <span class="comment">//叔叔节点变黑色</span></span><br><span class="line">                xppr.red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//父节点变黑色</span></span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//祖父节点变红色</span></span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">//子树调整完成，可能需要递归调整，把祖父节点赋值给x，递归调整</span></span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//进入else语句 叔叔节点为空或者等于黑色</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//当新节点落在父节点的右边时（2.3的调整方式）</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                    root = rotateLeft(root, x = xp);</span><br><span class="line">                    <span class="comment">//重新赋值xp 和xpp的值</span></span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果xp（也就是之前插入的新节点）不为null（2.2的调整方式）</span></span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//把xp变成黑色</span></span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="comment">//祖父节点不为null时，变成红色</span></span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="comment">//进行右旋</span></span><br><span class="line">                        root = rotateRight(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当新节点的父节点是xpp的右叶子节点，且它的叔叔节点不为空且红色</span></span><br><span class="line">            <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                xppl.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                    root = rotateRight(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、HashMap的扩容和红黑树的扩容"><a href="#3-2、HashMap的扩容和红黑树的扩容" class="headerlink" title="3.2、HashMap的扩容和红黑树的扩容"></a>3.2、HashMap的扩容和红黑树的扩容</h3><h4 id="3-2-1、HashMap的扩容"><a href="#3-2-1、HashMap的扩容" class="headerlink" title="3.2.1、HashMap的扩容"></a>3.2.1、HashMap的扩容</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            <span class="comment">//扩容，长度左移，相当于原来长度翻倍</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//新数组的大小乘以扩容因子</span></span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">//如果老数组不为空，也就是扩容逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//如果链表上只有一个元素，直接移动过去并且赋值到数组中</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">//如果数组上的是红黑树</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">//如果是链表，则先计算链表中的，应该落在原Index或者新Index（原index+原数组size）的</span></span><br><span class="line">                    <span class="comment">//拆分成两个链表，分别塞到数组两个下标中</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">//hash值和原数组长度相与，等于0原数组</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">//赋值低位index的头结点</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                <span class="comment">//链接低位index的结点</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            <span class="comment">//更新末尾结点</span></span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                             <span class="comment">//赋值高位index的头结点</span></span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                <span class="comment">//链接高位index的结点</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            <span class="comment">//更新末尾结点</span></span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//链表赋值到数组的低位index中</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                     <span class="comment">//链表赋值到数组的高位index中</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里普通数组进行扩容，是将原来的链表通过计算新的Hash值之后，存到两个新的链表上面，再重新设置到新数组的两个对应新位置上，通过上面的说明，新的两个链表只会是原链表的相应位置以及该位置再加上原数组长度的对应位置上。</p><h4 id="3-2-2、红黑树的扩容"><a href="#3-2-2、红黑树的扩容" class="headerlink" title="3.2.2、红黑树的扩容"></a>3.2.2、红黑树的扩容</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> bit)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数组上的红黑树根节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; b = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// Relink into lo and hi lists, preserving order</span></span><br><span class="line">    TreeNode&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历红黑树的双向链表</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="keyword">null</span>; e = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">        e.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                loHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">            loTail = e;</span><br><span class="line">            <span class="comment">//计数低位index的链表的个数</span></span><br><span class="line">            ++lc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                hiHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                hiTail.next = e;</span><br><span class="line">            hiTail = e;</span><br><span class="line">            <span class="comment">//计数高位index的链表的个数</span></span><br><span class="line">            ++hc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//拆分成两个链表之后，比较</span></span><br><span class="line">    <span class="keyword">if</span> (loHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果链表长度&lt;=6</span></span><br><span class="line">        <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            <span class="comment">//退化成链表赋值到数组中</span></span><br><span class="line">            tab[index] = loHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当hiHead == null时，则等于红黑树不需要拆分，直接把整棵树（也就是根节点）移动到数组上</span></span><br><span class="line">            tab[index] = loHead;</span><br><span class="line">            <span class="comment">//hiHead不为空时，对低位链表进行树化，整个链表重新创建红黑树</span></span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                loHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以下逻辑和低位链表逻辑相同</span></span><br><span class="line">    <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            <span class="comment">//新数组下标 = 原数组下标 + 原数组长度</span></span><br><span class="line">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index + bit] = hiHead;</span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="keyword">null</span>)</span><br><span class="line">                hiHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;红黑树的扩容逻辑是：首先的部分和链表相似，先遍历整颗红黑树，并向链表一样分成两个链表，这时会出现几种情况，如果1号链表的元素数量小于红黑树的最小值，那么首先说明两个链表都分到元素，才会导致原来红黑树的元素数量不足的情况，此时就需要进行树的退化，其次，如果元素的数量达到红黑树的最小值且另一个数组为空，那么说明整个红黑树都在该位置，那么此时将原红黑树（根节点）整个移植过来即可，否则再去重新创建新的红黑树。</p><h3 id="3-3、红黑树的退化"><a href="#3-3、红黑树的退化" class="headerlink" title="3.3、红黑树的退化"></a>3.3、红黑树的退化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历双向链表，把TreeNode类型转换成Node类型，建立单向链表，返回头结点</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">untreeify</span><span class="params">(HashMap&lt;K,V&gt; map)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt; q = <span class="keyword">this</span>; q != <span class="keyword">null</span>; q = q.next) &#123;</span><br><span class="line">        Node&lt;K,V&gt; p = map.replacementNode(q, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">            hd = p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tl.next = p;</span><br><span class="line">        tl = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、HashMap的get方法"><a href="#4、HashMap的get方法" class="headerlink" title="4、HashMap的get方法"></a>4、HashMap的get方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            <span class="comment">//如果刚好等于根节点，返回</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果它是红黑树，则调用红黑树的查找算法</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">//否则循环链表查找</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">getTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>).find(h, k, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* h: get的Key的hash值</span></span><br><span class="line"><span class="comment">* k: get的key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> ph, dir; K pk;</span><br><span class="line">        TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</span><br><span class="line">        <span class="comment">//判断hash在左边</span></span><br><span class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">            p = pl;</span><br><span class="line">        <span class="comment">//在右边</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">            p = pr;</span><br><span class="line">        <span class="comment">//相等且key相同，返回节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="comment">//如果左边等于null直接找右边</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</span><br><span class="line">            p = pr;</span><br><span class="line">        <span class="comment">//如果右边等于null直接找右边</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</span><br><span class="line">            p = pl;</span><br><span class="line">        <span class="comment">//如果key自定义了比较算法，compare之类的判断走哪一边</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</span><br><span class="line">                  (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                 (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">            p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">        <span class="comment">//否则递归查询</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = pl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、JDK1-8-ConcurrentHashMap源码"><a href="#六、JDK1-8-ConcurrentHashMap源码" class="headerlink" title="六、JDK1.8 ConcurrentHashMap源码"></a>六、JDK1.8 ConcurrentHashMap源码</h1><h2 id="1、ConcurrentHashMap新增的常量"><a href="#1、ConcurrentHashMap新增的常量" class="headerlink" title="1、ConcurrentHashMap新增的常量"></a>1、ConcurrentHashMap新增的常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示当前的整个ConcurrentHashMap正在扩容</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>;</span><br><span class="line"><span class="comment">//创建数组时用于Cas操作，设置成 -1 则代表CAS操作成功，然后创建数组，计算扩容的阈值并赋值到sizeCtl上</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcurrentHashMap中元素的最大值 2的31次方</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当扩容数组时，待迁移的数组长度值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> transferIndex;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储扩容时的数组，用以迁移新旧数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br></pre></td></tr></table></figure><h2 id="2、size方法"><a href="#2、size方法" class="headerlink" title="2、size方法"></a>2、size方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> n = sumCount();</span><br><span class="line">    <span class="keyword">return</span> ((n &lt; <span class="number">0L</span>) ? <span class="number">0</span> :</span><br><span class="line">            (n &gt; (<span class="keyword">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</span><br><span class="line">            (<span class="keyword">int</span>)n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//baseCount + CounterCell[] 的数据，累加起来就是总的Size</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">sumCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class="line">    <span class="keyword">long</span> sum = baseCount;</span><br><span class="line">    <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((a = as[i]) != <span class="keyword">null</span>)</span><br><span class="line">                sum += a.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在插入数据后，需要对数组长度+1，此时，并不是只通过一个字段（baseCount）来记录元素的个数，而是一个CounterCell数组（如图），首先他会向baseCount进行一次+1请求，请求成功则结束，如果请求失败，则通过产生一个随机数去&amp;上这个CounterCell数组的length-1来计算出这次的+1操作应该放入哪个对象，然后通过cas自旋来对+1，这样子就可以保证在多线程的情况下可以快速完成元素+1的操作。所以在获取ConcurrentHashMap的元素个数时，其实是获取CounterCell数组中每一个CounterCell元素的值的总和加上baseCount。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1617720237968.png" alt="1617720237968"></p><h2 id="3、put方法"><a href="#3、put方法" class="headerlink" title="3、put方法"></a>3、put方法</h2><p>&emsp;&emsp;首先，ConcurrentHashMap中，红黑树是保存一个<font color='red'><code>TreeBin</code></font>对象，<font color='red'><code>TreeBin</code></font>用于承载红黑树的整个结构，其中有一个<code>root</code>属性用于存储红黑树的根节点。这样做的目的是为了后面对红黑树根节点加锁时，直接对<font color='red'><code>TreeBin</code></font>对象加锁，可以不用考虑在加锁的过程中，红黑树的根节点发生旋转而变化的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把整个红黑树结构封在TreeBin对象中</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeBin</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//红黑树的根节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; root;</span><br><span class="line">    <span class="keyword">volatile</span> TreeNode&lt;K,V&gt; first;</span><br><span class="line">    <span class="keyword">volatile</span> Thread waiter;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> lockState;</span><br><span class="line">    <span class="comment">// values for lockState</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WRITER = <span class="number">1</span>; <span class="comment">// set while holding write lock</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WAITER = <span class="number">2</span>; <span class="comment">// set when waiting for write lock</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> READER = <span class="number">4</span>; <span class="comment">// increment value for setting read lock</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// key和value不能为NULL</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// key所对应的hashcode</span></span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过自旋的方式来插入数据</span></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="comment">// 如果数组为空，则初始化</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="comment">// 算出数组下标，然后获取数组上对应下标的元素，如果为null，则通过cas来赋值</span></span><br><span class="line">        <span class="comment">// 如果赋值成功，则退出自旋，否则是因为数组上当前位置已经被其他线程赋值了，</span></span><br><span class="line">        <span class="comment">// 所以失败，所以进入下一次循环后就不会再符合这个判断了</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果数组当前位置的元素的hash值等于MOVED，表示正在进行扩容，当前线程也帮助进行扩容</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 对数组当前位置的元素进行加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="comment">// 加锁后检查一下tab[i]上的元素是否发生了变化，如果发生了变化则直接进入下一次循环</span></span><br><span class="line">                <span class="comment">// 如果没有发生变化，则开始插入新key,value</span></span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="comment">// 如果tab[i]的hashcode是大于等于0的，那么就将元素插入到链表尾部</span></span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>; <span class="comment">// binCount表示当前链表上节点的个数，不包括新节点</span></span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="comment">// 遍历链表的过程中比较key是否存在一样的</span></span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="comment">// 插入到尾节点</span></span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果tab[i]是TreeBin类型，表示tab[i]位置是一颗红黑树</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                       value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 在新插入元素的时候，如果不算这个新元素链表上的个数大于等于8了，那么就要进行树化</span></span><br><span class="line">                <span class="comment">// 比如binCount为8，那么此时tab[i]上的链表长度为9，因为包括了新元素</span></span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="comment">// 存在key相同的元素</span></span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数组</span></span><br><span class="line"><span class="comment">// 一个线程在put时如果发现tab是空的，则需要进行初始化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// sizeCtl默认等于0，如果为-1表示有其他线程正在进行初始化，本线程不竞争CPU</span></span><br><span class="line">        <span class="comment">// yield表示放弃CPU，线程重新进入就绪状态，重新竞争CPU，如果竞争不到就等，如果竞争到了又继续循环</span></span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">        <span class="comment">// 通过cas将sizeCtl改为-1，如果改成功了则进行后续操作</span></span><br><span class="line">        <span class="comment">// 如果没有成功，则表示有其他线程在进行初始化或已经把数组初始化好了</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 当前线程将sizeCtl改为-1后，再一次判断数组是否为空</span></span><br><span class="line">                <span class="comment">// 会不会存在一个线程进入到此处之后，数组不为空了？</span></span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果在构造ConcurrentHashMap时指定了数组初始容量，那么sizeCtl就为初始化容量</span></span><br><span class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    <span class="comment">// 如果n为16，那么就是16-4=12</span></span><br><span class="line">                    <span class="comment">// sc = 3*n/4 = 0.75n, 初始化完成后sizeCtl的数字表示扩容的阈值</span></span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 此时sc为阈值</span></span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由链表树化成红黑树的操作</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; b; <span class="keyword">int</span> n, sc;</span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            tryPresize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="keyword">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//树化前加锁链表头结点</span></span><br><span class="line">            <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">//改成双向链表</span></span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; p =</span><br><span class="line">                            <span class="keyword">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                              <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> ((p.prev = tl) == <span class="keyword">null</span>)</span><br><span class="line">                            <span class="comment">//链表头结点</span></span><br><span class="line">                            hd = p;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            tl.next = p;</span><br><span class="line">                        tl = p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//通过TreeBin的构造方法创建红黑树并赋值到数组上</span></span><br><span class="line">                    setTabAt(tab, index, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先通过CAS更新baseCount（+1）</span></span><br><span class="line">    <span class="comment">// 如果更新失败则通过CAS更新CELLVALUE</span></span><br><span class="line">    <span class="comment">// 如果仍然失败则调用fullAddCount</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// as是一个CounterCell数组，一个CounterCell对象表示一个计数器，</span></span><br><span class="line">    <span class="comment">// 多个线程在添加元素时，手写都会尝试去更新baseCount，那么只有一个线程能更新成功，另外的线程将更新失败</span></span><br><span class="line">    <span class="comment">// 那么其他的线程就利用一个CounterCell对象来记一下数</span></span><br><span class="line">    CounterCell[] as; <span class="keyword">long</span> b, s;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> ||</span><br><span class="line">        !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class="line">        <span class="comment">// 某个线程更新baseCount失败了</span></span><br><span class="line">        CounterCell a; <span class="keyword">long</span> v; <span class="keyword">int</span> m;</span><br><span class="line">        <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 如果CounterCell[]是null</span></span><br><span class="line">        <span class="comment">// 或者CounterCell[]不为null的情况下CounterCell[]的长度小于1也就是等于0，</span></span><br><span class="line">        <span class="comment">// 或者CounterCell[]长度不为0的情况下随机计算一个CounterCell[]的下标，并判断此下标位置是否为空</span></span><br><span class="line">        <span class="comment">// 或者CounterCell[]中的某下标位置不为null的情况下通过cas修改CounterCell中的值失败了</span></span><br><span class="line">        <span class="comment">// 才调用fullAddCount方法，然后返回</span></span><br><span class="line">        <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="keyword">null</span> ||</span><br><span class="line">            !(uncontended =</span><br><span class="line">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class="line">            fullAddCount(x, uncontended);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果修改CELLVALUE成功了，这里的check就是binCount，这里为什么要判断小于等于1</span></span><br><span class="line">        <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果修改CELLVALUE成功了，则统计ConcurrentHashMap的元素个数</span></span><br><span class="line">        s = sumCount();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab, nt; <span class="keyword">int</span> n, sc;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果元素个数大于等于了阈值或-1就自旋扩容</span></span><br><span class="line">        <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            <span class="comment">// resizeStamp这个方法太难理解，反正就是返回一个数字，比如n=16,rs则=32795</span></span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(n);</span><br><span class="line">            <span class="comment">// 如果sc小于0,表示已经有其他线程在进行扩容了，sc+1</span></span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果全部元素已经转移完了，或者已经达到了最大并发扩容数限制则breack</span></span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 如果没有，则sizeCtl加1，然后进行转移元素</span></span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果sc是大于0的并且如果修改sizeCtl为一个特定的值，比如n=16, rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2= -2145714174</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                <span class="comment">// 转移元素，转移完了之后继续进入循环中</span></span><br><span class="line">                transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">            s = sumCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩容的方法，这里的扩容方式是从右边向左边扩容，每个线程依次去扩容步长长度的数据进行扩容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = tab.length, stride;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// stride表示步长，步长最小为16，如果CPU只有一核，那么步长为n</span></span><br><span class="line">    <span class="comment">// 既如果只有一个cpu,那么只有一个线程来进行扩容</span></span><br><span class="line">    <span class="comment">// 步长代表一个线程负责转移的桶的个数</span></span><br><span class="line">    <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">        stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新数组初始化，长度为两倍</span></span><br><span class="line">    <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">            nextTab = nt;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">            sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nextTable = nextTab;</span><br><span class="line">        <span class="comment">// 因为是两倍扩容，相当于两个老数组结合成了一个新数组，transferIndex表示第二个小数组的第一个元素的下标</span></span><br><span class="line">        transferIndex = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新数组的长度</span></span><br><span class="line">    <span class="keyword">int</span> nextn = nextTab.length;</span><br><span class="line">    ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// advance为true时，当前桶是否已经迁移完成，如果迁移完成则开始处理下一个桶</span></span><br><span class="line">    <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 是否完成</span></span><br><span class="line">    <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开始转移一个步长内的元素，i表示</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</span><br><span class="line">        <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextIndex, nextBound;</span><br><span class="line">            <span class="comment">// i先减1,如果减完之后小于bound，那么继续转移</span></span><br><span class="line">            <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                advance = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// transferIndex</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                i = -<span class="number">1</span>;</span><br><span class="line">                advance = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 通过cas来修改TRANSFERINDEX，如果修改成功则对bound和i进行赋值</span></span><br><span class="line">            <span class="comment">// 第一循环将进入到这里，来赋值bound和i</span></span><br><span class="line">            <span class="comment">// nextIndex就是transferIndex，假设为16，假如步长为4，那么就分为4个组，每组4个桶</span></span><br><span class="line">            <span class="comment">// 0-3,4-7,8-11,12-15</span></span><br><span class="line">            <span class="comment">// nextBound = 16-4=12</span></span><br><span class="line">            <span class="comment">// i=16-1=15</span></span><br><span class="line">            <span class="comment">// 所以bound表示一个步长里的最小的下标，i表示一个步长里的最大下标</span></span><br><span class="line">            <span class="comment">// TRANSFERINDEX是比较重要的，每个线程在进行元素的转移之前需要确定当前线程从哪个位置开始（从后往前）</span></span><br><span class="line">            <span class="comment">// TRANSFERINDEX每次减掉一个步长，所以当下一个线程准备转移元素时就可以从最新的TRANSFERINDEX开始了</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果没有修改成功则继续循环</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                     (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                      nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                   nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                bound = nextBound;</span><br><span class="line">                i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                advance = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// i表示一个步长里的最大下标, 如果i小于或者大于等于老数组长度，或者下标+老数组长度大于等等新数组长度</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">            <span class="keyword">int</span> sc;</span><br><span class="line">            <span class="comment">// 转移完成</span></span><br><span class="line">            <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                nextTable = <span class="keyword">null</span>;</span><br><span class="line">                table = nextTab;</span><br><span class="line">                <span class="comment">// sizeCtl = 1.5n  = 2n*0.75</span></span><br><span class="line">                sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 每个线程负责的转移任务结束后利用cas来对sizeCtl减1</span></span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="comment">// 当前线程负责的任务做完了，同时还有其他线程还在做任务，则回到上层重新申请任务来做</span></span><br><span class="line">                <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="comment">// 当前线程负责的任务做完了，也没有其他线程在做任务了，那么则表示扩容结束了</span></span><br><span class="line">                finishing = advance = <span class="keyword">true</span>;</span><br><span class="line">                i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从i位置开始转移元素</span></span><br><span class="line">        <span class="comment">// 如果老数组的i位置元素为null,则表示该位置上的元素已经被转移完成了，</span></span><br><span class="line">        <span class="comment">// 则通过cas设置为ForwardingNode，表示无需转移</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</span><br><span class="line">            advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</span><br><span class="line">        <span class="comment">// 如果i位置已经是ForwardingNode，则跳过该位置（就是桶）</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 加锁，开始转移</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="comment">// 加锁完了之后再次检查一遍tab[i]是否发生了变化</span></span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                    <span class="comment">// fh大于等于0表示是链表</span></span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// n是老数组的长度</span></span><br><span class="line">                        <span class="comment">// 因为n是2的幂次方数，所以runbit只有两种结果:0和n</span></span><br><span class="line">                        <span class="keyword">int</span> runBit = fh &amp; n;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 遍历链表，lastRun为当前链表上runbit连续相同的一小段的最后一段</span></span><br><span class="line">                        Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">                            <span class="keyword">int</span> b = p.hash &amp; n;</span><br><span class="line">                            <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                runBit = b;</span><br><span class="line">                                lastRun = p;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 如果最后一段的runBit为0，则则该段应该保持在当前位置</span></span><br><span class="line">                        <span class="comment">// 否则应该设置到i+n位置</span></span><br><span class="line">                        <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                            ln = lastRun;</span><br><span class="line">                            hn = <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            hn = lastRun;</span><br><span class="line">                            ln = <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//从头节点开始，遍历链表到lastRun结束</span></span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                            <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class="line">                            <span class="comment">// 如果ph &amp; n，则将遍历到的节点插入到ln的前面</span></span><br><span class="line">                            <span class="comment">// 否则将遍历到的节点插入到hn的前面</span></span><br><span class="line">                            <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 将ln链表赋值在新tab的i位置</span></span><br><span class="line">                        setTabAt(nextTab, i, ln);</span><br><span class="line">                        <span class="comment">// 将hn链表赋值在新tab的i+n位置</span></span><br><span class="line">                        setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        <span class="comment">// 这是老tab的i位置ForwardingNode节点，表示转移完成</span></span><br><span class="line">                        setTabAt(tab, i, fwd);</span><br><span class="line">                        advance = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                        TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                            <span class="keyword">int</span> h = e.hash;</span><br><span class="line">                            TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</span><br><span class="line">                                (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                                    lo = p;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = p;</span><br><span class="line">                                loTail = p;</span><br><span class="line">                                ++lc;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                                    hi = p;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = p;</span><br><span class="line">                                hiTail = p;</span><br><span class="line">                                ++hc;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                            (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class="line">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                            (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class="line">                        setTabAt(nextTab, i, ln);</span><br><span class="line">                        setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        setTabAt(tab, i, fwd);</span><br><span class="line">                        advance = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录当前数组的元素个数的方法，采用的是baseCount+CounterCell[]数组的计算方式</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">fullAddCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">boolean</span> wasUncontended)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">if</span> ((h = ThreadLocalRandom.getProbe()) == <span class="number">0</span>) &#123;</span><br><span class="line">        ThreadLocalRandom.localInit();      <span class="comment">// force initialization</span></span><br><span class="line">        h = ThreadLocalRandom.getProbe();</span><br><span class="line">        wasUncontended = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span> collide = <span class="keyword">false</span>;                <span class="comment">// True if last slot nonempty</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        CounterCell[] as; CounterCell a; <span class="keyword">int</span> n; <span class="keyword">long</span> v;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果counterCells不等于空</span></span><br><span class="line">        <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// h可以理解为当前线程的hashcode，如果对应的counterCells数组下标位置元素当前是空的</span></span><br><span class="line">            <span class="comment">// 那么则应该在该位置去生成一个CounterCell对象</span></span><br><span class="line">            <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// counterCells如果空闲</span></span><br><span class="line">                <span class="keyword">if</span> (cellsBusy == <span class="number">0</span>) &#123;            <span class="comment">// Try to attach new Cell</span></span><br><span class="line">                    <span class="comment">// 生成CounterCell对象</span></span><br><span class="line">                    CounterCell r = <span class="keyword">new</span> CounterCell(x); <span class="comment">// Optimistic create</span></span><br><span class="line">                    <span class="comment">// 再次判断counterCells如果空闲，并且cas成功修改cellsBusy为1</span></span><br><span class="line">                    <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                        U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                        <span class="keyword">boolean</span> created = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;               <span class="comment">// Recheck under lock</span></span><br><span class="line">                            CounterCell[] rs; <span class="keyword">int</span> m, j;</span><br><span class="line">                            <span class="comment">// 如果counterCells对象没有发生变化，那么就将刚刚创建的CounterCell赋值到数组中</span></span><br><span class="line">                            <span class="keyword">if</span> ((rs = counterCells) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                (m = rs.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                rs[j = (m - <span class="number">1</span>) &amp; h] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                rs[j] = r;</span><br><span class="line">                                <span class="comment">// 便是CounterCell创建成功</span></span><br><span class="line">                                created = <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            cellsBusy = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 如果CounterCell创建成功，则退出循环，方法执行结束</span></span><br><span class="line">                        <span class="keyword">if</span> (created)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 如果没有创建成功，则继续循环</span></span><br><span class="line">                        <span class="keyword">continue</span>;           <span class="comment">// Slot is now non-empty</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 应该当前位置为空，所以肯定没有发生碰撞</span></span><br><span class="line">                collide = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果当前位置不为空，则进入以下分支判断</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果调用当前方法之前cas失败了，那么先将wasUncontended设置为true，</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)       <span class="comment">// CAS already known to fail</span></span><br><span class="line">                wasUncontended = <span class="keyword">true</span>;      <span class="comment">// Continue after rehash</span></span><br><span class="line">            <span class="comment">// 通过cas修改CELLVALUE的值，修改成功则退出循环，修改失败则继续进行分支判断</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// counterCells发生了改变，或者当前counterCells数组的大小大于等于CPU核心数，设置collide为false，</span></span><br><span class="line">            <span class="comment">// 如果到了这个极限，counterCells不会再进行扩容了</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (counterCells != as || n &gt;= NCPU)</span><br><span class="line">                collide = <span class="keyword">false</span>;            <span class="comment">// At max size or stale</span></span><br><span class="line">            <span class="comment">// 一旦走到这个分支了，那么就是发生了碰撞了，一个当前这个位置不为空</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!collide)</span><br><span class="line">                collide = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// 当collide为true进入这个分支，表示发生了碰撞会进行扩容</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                     U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 对counterCells进行扩容</span></span><br><span class="line">                    <span class="keyword">if</span> (counterCells == as) &#123;<span class="comment">// Expand table unless stale</span></span><br><span class="line">                        CounterCell[] rs = <span class="keyword">new</span> CounterCell[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                            rs[i] = as[i];</span><br><span class="line">                        counterCells = rs;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    cellsBusy = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                collide = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;                   <span class="comment">// Retry with expanded table</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 重新进行hash</span></span><br><span class="line">            h = ThreadLocalRandom.advanceProbe(h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果counterCells等于空的情况下会走下面两个分支</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// cellsBusy == 0表示counterCells没有线程在用</span></span><br><span class="line">        <span class="comment">// 如果counterCells空闲，并且当前线程所获得counterCells对象没有发生变化</span></span><br><span class="line">        <span class="comment">// 先通过CAS将cellsBusy标记改为1，如果修改成功则证明可以操作counterCells了，</span></span><br><span class="line">        <span class="comment">// 其他线程暂时不能使用counterCells</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; counterCells == as &amp;&amp;</span><br><span class="line">                 U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> init = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;                           <span class="comment">// Initialize table</span></span><br><span class="line">                <span class="comment">// cellsBusy标记改成后就初始化CounterCell[]</span></span><br><span class="line">                <span class="keyword">if</span> (counterCells == as) &#123;</span><br><span class="line">                    CounterCell[] rs = <span class="keyword">new</span> CounterCell[<span class="number">2</span>];</span><br><span class="line">                    <span class="comment">// 并且把x赋值到CounterCell中完成计数</span></span><br><span class="line">                    rs[h &amp; <span class="number">1</span>] = <span class="keyword">new</span> CounterCell(x);</span><br><span class="line">                    counterCells = rs;</span><br><span class="line">                    init = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                cellsBusy = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果没有初始化成功，则证明counterCells发生了变化，当前线程修改cellsBusy的过程中，</span></span><br><span class="line">            <span class="comment">// 可能其他线程已经把counterCells对象替换掉了</span></span><br><span class="line">            <span class="comment">// 如果初始化成功，则退出循环，方法执行结束</span></span><br><span class="line">            <span class="keyword">if</span> (init)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, v = baseCount, v + x))</span><br><span class="line">            <span class="keyword">break</span>;                          <span class="comment">// Fall back on using base</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> ConCurrentHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Gateway介绍及使用</title>
      <link href="/blog/2021/03/31/SpringCloud%20Gateway/"/>
      <url>/blog/2021/03/31/SpringCloud%20Gateway/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud-Gateway介绍及使用"><a href="#SpringCloud-Gateway介绍及使用" class="headerlink" title="SpringCloud Gateway介绍及使用"></a>SpringCloud Gateway介绍及使用</h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;&emsp;SpringCloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><p>&emsp;&emsp;在之前，SpringCloud本身就有集成zuul网关，为什么还需要开发新的SpringCloudGateway？我们可以从SpringCloud中发现，虽然现在zuul网关已经出到2.x的版本，但SpringCloud目前还是只支持到zuul 1.x的版本，这是因为之前Zuul 2.x 的不断跳票，SpringCloud 才釜底抽薪推出了自己的服务网关。</p><h1 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h1><p>&emsp;&emsp;API网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。<br>网关需要具备的功能：</p><p>&emsp;性能：API高可用，负载均衡，容错机制。</p><p>&emsp;安全：权限身份认证、脱敏，流量清洗，后端签名（保证全链路可信调用）,黑名单（非法调用的限制）。</p><p>&emsp;日志：日志记录（spainid,traceid）一旦涉及分布式，全链路跟踪必不可少。</p><p>&emsp;缓存：数据缓存。</p><p>&emsp;监控：记录请求响应数据，api耗时分析，性能监控。</p><p>&emsp;限流：流量控制，错峰流控，可以定义多种限流规则。</p><p>&emsp;灰度：线上灰度部署，可以减小风险。</p><p>&emsp;路由：动态路由规则。</p><h1 id="SpringCloudGateway"><a href="#SpringCloudGateway" class="headerlink" title="SpringCloudGateway"></a>SpringCloudGateway</h1><p>SpringCloud官方对SpringCloud Gateway 特征介绍如下：</p><p>&emsp;a、基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0</p><p>&emsp;b、集成 Hystrix 断路器</p><p>&emsp;c、集成 Spring Cloud DiscoveryClient</p><p>&emsp;d、Predicates 和 Filters 作用于特定路由，易于编写的 Predicates 和 Filters</p><p>&emsp;e、具备一些网关的高级功能：动态路由、限流、路径重写</p><p>简单说明一下上文中的三个术语：</p><p>&emsp;a、Filter（过滤器）：和Zuul的过滤器在概念上类似，可以使用它拦截和修改请求，并且对上游的响应，进行二次处理。过滤器为org.springframework.cloud.gateway.filter.GatewayFilter类的实例。</p><p>&emsp;b、Route（路由）：网关配置的基本组成模块，和Zuul的路由配置模块类似。一个Route模块由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配，目标URI会被访问。</p><p>&emsp;c、Predicate（断言）：这是一个 Java 8 的 Predicate，可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。断言的输入类型是一个 ServerWebExchange。</p><p>&emsp;&emsp;从以上的特征来说，和SpringCloud Zuul的特征差别不大。但其实SpringCloud Gateway和SpringCloud Zuul最主要的区别，还是在底层的通信框架上。</p><h2 id="SpringCloud-Gateway和SpringCloud-Zuul（Zuul-1-x）的区别"><a href="#SpringCloud-Gateway和SpringCloud-Zuul（Zuul-1-x）的区别" class="headerlink" title="SpringCloud Gateway和SpringCloud Zuul（Zuul 1.x）的区别"></a>SpringCloud Gateway和SpringCloud Zuul（Zuul 1.x）的区别</h2><h3 id="SpringCloud-Zuul-与Servlet-IO"><a href="#SpringCloud-Zuul-与Servlet-IO" class="headerlink" title="SpringCloud Zuul 与Servlet IO"></a>SpringCloud Zuul 与Servlet IO</h3><p>&emsp;&emsp;Springcloud Zuul，采用的是Tomcat容器，使用的是传统的Servlet IO处理模型。</p><p>&emsp;&emsp;而servlet由servlet容器进行生命周期管理。在容器启动时构造servlet对象并调用servlet init()进行初始化；当容器关闭时调用servlet destory()销毁servlet；容器运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用service()。</p><p>&emsp;&emsp;弊端：servlet是一个简单的网络IO模型，当请求进入servlet容器时，servlet 容器就会为其绑定一个线程，这在并发不高的场景下这种模型是适用的，但是一旦并发上升，线程数量就会上涨，而线程资源代价是昂贵的（上下文切换，内存消耗大）严重影响请求的处理时间。在一些简单的业务场景下，不希望为每个request分配一个线程，只需要1个或几个线程就能应对极大并发的请求，所以这种业务场景下servlet模型没有优势。</p><p>&emsp;&emsp;总而言之，Springcloud Zuul 是基于servlet之上的一个阻塞式处理模型，即spring实现了处理所有request请求的一个servlet（DispatcherServlet），并由该servlet阻塞式处理处理。所以Springcloud Zuul无法摆脱servlet模型的弊端。</p><p>&emsp;&emsp;当然Zuul官方也发现了这个问题，所以从Zuul 2.0开始，使用了Netty，但是由于之前的一些问题，所以现在SpringCloud官方也没有集成Zuul 2.x的计划了。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/19816137-bb466f6b0135bb71.jpg" alt="19816137-bb466f6b0135bb71"></p><h3 id="SpringCloud-Gateway与Webflux"><a href="#SpringCloud-Gateway与Webflux" class="headerlink" title="SpringCloud Gateway与Webflux"></a>SpringCloud Gateway与Webflux</h3><p>&emsp;&emsp;Spring在2017年下半年迎来了Webflux，Webflux模式替换了旧的Servlet线程模型。用少量的线程处理request和response io操作，这些线程称为Loop线程，而业务交给响应式编程框架处理，响应式编程是非常灵活的，用户可以将业务中阻塞的操作提交到响应式框架的work线程中执行，而不阻塞的操作依然可以在Loop线程中进行处理，大大提高了Loop线程的利用率。所以SpringCloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，解决了SpringCloud Zuul在高并发下的问题。</p><p>&emsp;&emsp;Webflux虽然可以兼容多个底层的通信框架，但是一般情况下，底层使用的还是Netty，毕竟，Netty是目前业界认可的最高性能的通信框架。而Webflux的Loop线程，正好就是著名的Reactor 模式IO处理模型的Reactor线程，如果使用的是高性能的通信框架Netty，这就是Netty的EventLoop线程。</p><h1 id="SpringCloud-GateWay集成Nacos注册中心使用"><a href="#SpringCloud-GateWay集成Nacos注册中心使用" class="headerlink" title="SpringCloud GateWay集成Nacos注册中心使用"></a>SpringCloud GateWay集成Nacos注册中心使用</h1><h2 id="准备一个业务的服务，用于网关进行转发；"><a href="#准备一个业务的服务，用于网关进行转发；" class="headerlink" title="准备一个业务的服务，用于网关进行转发；"></a>准备一个业务的服务，用于网关进行转发；</h2><p>注意要将该服务加入nacos服务注册中那个心。</p><h2 id="新建一个网关微服务"><a href="#新建一个网关微服务" class="headerlink" title="新建一个网关微服务"></a>新建一个网关微服务</h2><h2 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h2><h3 id="总pom-xml"><a href="#总pom-xml" class="headerlink" title="总pom.xml"></a>总pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.g4b.cheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>api-system<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>api-gateway<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 插件依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="网关pom-xml"><a href="#网关pom-xml" class="headerlink" title="网关pom.xml"></a>网关pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.g4b.cheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>网关模块<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<font color='red'>注意：这里要求网关服务不允许出现spring-boot-starter-tomcat和spring-boot-starter-web这两个包，注意去除相关包含这两个包的依赖，同时也不要引入这两个依赖，因为gateway使用的是webflux,默认使用netty。</font></p><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8882</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">api-system</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://api-system</span>   <span class="comment">#如果添加了注册中心，可以匹配注册中心后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api-system/**</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">cn.g4b.cheng:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>这里了解一下几个基本的路由参数：</p><p>&emsp;a、id：是路由的标识，在网关中需要保证唯一，最好和转发的服务名称一致；</p><p>&emsp;b、uri：请求转发后的地址，当将服务和网关都注册到注册中心时，可以使用lb://服务名称 来进行转发，服务名称详见注册中心；</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318143143177.png" alt="image-20210318143143177"></p><p>&emsp;c、predicates：断言，也叫转发条件；</p><p>&emsp;d、filters：过滤器，对请求进行过滤。</p><h2 id="GatewayApplication-java"><a href="#GatewayApplication-java" class="headerlink" title="GatewayApplication.java"></a>GatewayApplication.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.g4b.cheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="测试原访问路径"><a href="#测试原访问路径" class="headerlink" title="测试原访问路径"></a>测试原访问路径</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318142520393.png" alt="image-20210318142520393"></p><h3 id="测试网关访问路径"><a href="#测试网关访问路径" class="headerlink" title="测试网关访问路径"></a>测试网关访问路径</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318142613537.png" alt="image-20210318142613537"></p><p>这样子，简单的进行网关转发即完成了。</p><h1 id="SpringCloud-Gateway网关的断言规则Predicate"><a href="#SpringCloud-Gateway网关的断言规则Predicate" class="headerlink" title="SpringCloud Gateway网关的断言规则Predicate"></a>SpringCloud Gateway网关的断言规则Predicate</h1><p><img src="http://cheng_qiwei.gitee.io/blog/img/4461954-1b814fb4ee7229a2.webp"></p><p>&emsp;&emsp;SpringCloud Gateway提供了相当多的断言的方法，我们可以认为，每一个断言相当于一个条件，当满足这种条件后才会被转发，如果是多个，那就是都满足的情况下被转发（且的关系）。接下来，我们介绍几个比较常用的Predicate</p><h3 id="Path：根据地址进行转发"><a href="#Path：根据地址进行转发" class="headerlink" title="Path：根据地址进行转发"></a>Path：根据地址进行转发</h3><p>&emsp;&emsp;这个匹配是最基本的一个断言规则，只要我的路径匹配了，就进行转发。这里唯一要注意的一个点是：<code>/**</code>   和    <code>/*  </code>并不是一样的。<code>/**</code>匹配的是所有级别的路径，可以是 /A/B/C  也可以是 /A …但是<code>/*</code>只能代表 /A 一级而已.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Path=/api-system/**</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Path=/api-system/*</span></span><br></pre></td></tr></table></figure><h3 id="Before、After、Between：在什么时间之前、之后、之间进行转发"><a href="#Before、After、Between：在什么时间之前、之后、之间进行转发" class="headerlink" title="Before、After、Between：在什么时间之前、之后、之间进行转发"></a>Before、After、Between：在什么时间之前、之后、之间进行转发</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318154943534.png" alt="image-20210318154943534"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318155035308.png" alt="image-20210318155035308"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">After=2021-03-18T15:50:00+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Before=2021-03-18T15:50:00+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Between=2021-03-18T15:50:00+08:00[Asia/Shanghai],</span> <span class="number">2021-03-18T15:59:00+08:00</span>[<span class="string">Asia/Shanghai</span>]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们这里测试After，我们设定在2021-03-18的15:50分钟后，该转发路径才允许访问，所以在此之前，我们访问改接口是无法转发的，当过了50分后，就可以正常转发访问了。</p><h3 id="Cookie：Cookie匹配转发"><a href="#Cookie：Cookie匹配转发" class="headerlink" title="Cookie：Cookie匹配转发"></a>Cookie：Cookie匹配转发</h3><p>&emsp;&emsp;如果请求中所携带的Cookie值与配置的Predicate匹配，那么就可以被允许转发到指定地址，如图，我们设定我们的Cookie的key为winking，值为10086，只有携带该Cookie才能访问我们的子服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Cookie=winking,10086</span></span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318160846133.png" alt="image-20210318160846133"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318161017150.png" alt="image-20210318161017150"></p><h3 id="Header：请求头匹配转发"><a href="#Header：请求头匹配转发" class="headerlink" title="Header：请求头匹配转发"></a>Header：请求头匹配转发</h3><p>&emsp;&emsp;如果请求中所携带的Header值与配置的Predicate匹配，那么就可以被允许转发到指定地址，如图，我们设定我们的Header包含X-Request-Id的参数，其值为\d+【这个是正则表达式，指的是必须为数字】，只有携带该Header且值为数字才能访问我们的子服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318163234224.png" alt="image-20210318163234224"></p><h3 id="Host：根据Host主机名匹配转发"><a href="#Host：根据Host主机名匹配转发" class="headerlink" title="Host：根据Host主机名匹配转发"></a>Host：根据Host主机名匹配转发</h3><p>&emsp;&emsp;如果请求中所携带的Host主机名与配置的Predicate匹配，那么就可以被允许转发到指定地址，如图，我们设定我们的Host主机名符合**.aliyun.com的规则，只有符合该规则的主机名才能访问我们的子服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Host=**.aliyun.com</span></span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318164555702.png" alt="image-20210318164555702"></p><h3 id="Method：根据方法类型进行转发"><a href="#Method：根据方法类型进行转发" class="headerlink" title="Method：根据方法类型进行转发"></a>Method：根据方法类型进行转发</h3><p>&emsp;&emsp;Restful请求风格的接口内往往会存在多种请求方式的接口，如果我们的接口只允许某个类型的接口可以访问，可以使用Method来进行断言处理。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Method=POST</span></span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318170120998.png" alt="image-20210318170120998"></p><h3 id="Query：根据请求参数进行转发"><a href="#Query：根据请求参数进行转发" class="headerlink" title="Query：根据请求参数进行转发"></a>Query：根据请求参数进行转发</h3><p>&emsp;&emsp;如果请求中所携带的参数与配置的Predicate匹配，那么就可以被允许转发到指定地址，如图，我们设定我们的参数包含user这个参数，只有符合该规则的主机名才能访问我们的子服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Query=user</span>              <span class="comment">#包含user这个参数即可</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Query=user,winking</span>      <span class="comment">#包含user这个参数且值为winking即可</span></span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318170751465.png" alt="image-20210318170751465"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318170953057.png" alt="image-20210318170953057"></p><h3 id="RemoteAddr：根据IP地址进行转发"><a href="#RemoteAddr：根据IP地址进行转发" class="headerlink" title="RemoteAddr：根据IP地址进行转发"></a>RemoteAddr：根据IP地址进行转发</h3><p>&emsp;&emsp;我们可以限制允许访问接口的客户端IP地址，配置后只对指定IP地址的客户端进行请求转发。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">RemoteAddr=192.168.2.107</span></span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210318171907454.png" alt="image-20210318171907454"></p><h1 id="SpringCloud-Gateway网关的过滤器Filter"><a href="#SpringCloud-Gateway网关的过滤器Filter" class="headerlink" title="SpringCloud Gateway网关的过滤器Filter"></a>SpringCloud Gateway网关的过滤器Filter</h1><p>&emsp;&emsp;在上一节我们介绍了Gateway的断言Predict，Predict决定了请求由哪一个路由处理，在路由处理前后，我们需要经过各种过滤器filter的处理。在路由处理之前，需要经过“pre”类型的过滤器处理，处理返回响应之后，可以由“post”类型的过滤器处理。“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等功能，而“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等。</p><p>&emsp;&emsp;filter除了分为“pre”和“post”两种方式的filter外，从作用范围上：一种是针对于单个路由的gateway filter，它在配置文件中的写法同predict类似；另外一种是针对于所有路由的global gateway filer【全局过滤器】。</p><h2 id="gateway-filter"><a href="#gateway-filter" class="headerlink" title="gateway filter"></a>gateway filter</h2><p>&emsp;&emsp;过滤器允许以某种方式修改传入的HTTP请求或传出的HTTP响应。过滤器可以限定作用在某些特定请求路径上。 SpringCloud Gateway包含许多内置的GatewayFilter工厂。</p><p>&emsp;&emsp;GatewayFilter工厂同上Predicate工厂类似，都是在配置文件application.yml中配置，遵循了约定大于配置的思想，只需要在配置文件配置GatewayFilter Factory的名称，而不需要写全部的类名，比如AddRequestHeaderGatewayFilterFactory只需要在配置文件中写AddRequestHeader，而不是全部类名。在配置文件中配置的GatewayFilter Factory最终都会相应的过滤器工厂类处理。</p><p>下图为SpringCloud Gateway内置的过滤器工厂：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/20190601011143809.png"></p><h3 id="AddRequestHeader-GatewayFilter-Factory：添加请求头过滤器工厂"><a href="#AddRequestHeader-GatewayFilter-Factory：添加请求头过滤器工厂" class="headerlink" title="AddRequestHeader GatewayFilter Factory：添加请求头过滤器工厂"></a>AddRequestHeader GatewayFilter Factory：添加请求头过滤器工厂</h3><p>添加相应的请求头参数及值进行转发</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">AddRequestHeader=Time,</span> <span class="string">abcd1234</span></span><br></pre></td></tr></table></figure><p>添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.g4b.cheng.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.g4b.cheng.entity.ResultVo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sysTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getHeaderMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVo <span class="title">getHeaderMessage</span> <span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        String time = request.getHeader(<span class="string">&quot;Time&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(time != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultVo.responseSuccess(time);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultVo.responseFail(<span class="string">&quot;获取请求头 Time 失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210322093749957.png" alt="image-20210322093749957"></p><p>类似方法：AddResponseHeader（在返回时添加响应头）</p><h3 id="RewritePath-GatewayFilter-Factory：修改路径过滤器"><a href="#RewritePath-GatewayFilter-Factory：修改路径过滤器" class="headerlink" title="RewritePath GatewayFilter Factory：修改路径过滤器"></a>RewritePath GatewayFilter Factory：修改路径过滤器</h3><p>在Nginx服务启中有一个非常强大的功能就是重写路径，Spring Cloud Gateway默认也提供了这样的功能，这个功能是Zuul没有的。配置方法如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RewritePath=/nacos/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><p>这个配置的意思是：将 /nacos/(<code>**</code>) 的路径转换成  /(<code>**</code>) ,去掉前面/nacos的部分。</p><p>测试：现在访问:/api-system/nacos/sysUser/queryUser?userId=2 和 </p>:/api-system/sysUser/queryUser?userId=2 返回相同的结果。<p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210322095454497.png" alt="image-20210322095454497"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210322095547213.png" alt="image-20210322095547213"></p><h3 id="PrefixPath-GatewayFilter-Factory：添加前缀过滤器"><a href="#PrefixPath-GatewayFilter-Factory：添加前缀过滤器" class="headerlink" title="PrefixPath  GatewayFilter Factory：添加前缀过滤器"></a>PrefixPath  GatewayFilter Factory：添加前缀过滤器</h3><p>有些时候，我们的转发路径都携带项目名称作为前缀，有时候我们可以添加在网关中，让网关帮我们填充。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">PrefixPath=/api-system</span></span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210322100953788.png" alt="image-20210322100953788"></p><p>测试：我们之前是需要访问:/api-system/sysUser/queryUser?userId=2，现在就只需要访问</p>:/sysUser/queryUser?userId=2即可。<p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210322101032349.png" alt="image-20210322101032349"></p><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>&emsp;&emsp;SpringCloud Gateway 内置了19种过滤器，能够在各种业务场景中使用，但有时候，有一些场景还是需要去灵活使用过滤器，此时我们可以考虑自定义过滤器。</p><p>目标：自定义一个时间统计过滤器，用来统计每次请求的时长。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.g4b.cheng.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计每个请求的时长</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DurationGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Object config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">            Long startTime = System.currentTimeMillis();</span><br><span class="line">            log.debug(<span class="string">&quot;------进入了Duration过滤器：DurationFilter-----&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(startTime != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    log.info(<span class="string">&quot;请求请求路径为：&#123;&#125;的接口，耗时为：&#123;&#125; ms&quot;</span>,exchange.getRequest().getPath(),System.currentTimeMillis() - startTime);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<font color='red'>这里需要注意，我们所有自定义过滤器的命名最好和官方的过滤器命名一致【XXXGatewayFilterFactory】，否则在用yml调用的时候会出现找不到过滤器的情况。</font></p><p>yml配置：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210322110613300.png" alt="image-20210322110613300"></p><p>测试：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210322110707664.png" alt="image-20210322110707664"></p><h2 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h2><p>有时候，一些过滤器需要在每一个路由中都使用，那么此时就不需要每个都进行配置，直接写一个全局过滤器即可。</p><p>目标：自定义一个时间参数过滤器，用来打印请求参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.g4b.cheng.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求请求路径为：&#123;&#125;的接口，请求参数为：&#123;&#125;&quot;</span>,exchange.getRequest().getPath(),exchange.getRequest().getQueryParams().toString());</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210322113606404.png" alt="image-20210322113606404"></p><h1 id="SpringCloud-Gateway-原理解析"><a href="#SpringCloud-Gateway-原理解析" class="headerlink" title="SpringCloud Gateway 原理解析"></a>SpringCloud Gateway 原理解析</h1><p><img src="http://cheng_qiwei.gitee.io/blog/img/20190703211815129.png"></p><p>&emsp;&emsp;Spring Cloud Gateway 的核心处理流程如下图，Gateway的客户端回向Spring Cloud Gateway发起请求，请求首先会被HttpWebHandlerAdapter进行提取组装成网关的上下文，然后网关的上下文会传递到DispatcherHandler。DispatcherHandler是所有请求的分发处理器，DispatcherHandler主要负责分发请求对应的处理器，比如将请求分发到对应RoutePredicateHandlerMapping(路由断言处理器映射器）。路由断言处理映射器主要用于路由的查找，以及找到路由后返回对应的FilteringWebHandler。FilteringWebHandler主要负责组装Filter链表并调用Filter执行一系列Filter处理，然后把请求转到后端对应的代理服务处理，处理完毕后，将Response返回到Gateway客户端。</p><p>&emsp;&emsp;在Filter链中，通过虚线分割Filter的原因是，过滤器可以在转发请求之前处理或者接收到被代理服务的返回结果之后处理。所有的Pre类型的Filter执行完毕之后，才会转发请求到被代理的服务处理。被代理的服务把所有请求完毕之后，才会执行Post类型的过滤器。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 网关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel的介绍与使用（二）</title>
      <link href="/blog/2021/03/20/Sentinel%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/blog/2021/03/20/Sentinel%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Sentinel的介绍与使用（二）"><a href="#Sentinel的介绍与使用（二）" class="headerlink" title="Sentinel的介绍与使用（二）"></a>Sentinel的介绍与使用（二）</h1><h1 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是<font color="red">一种特殊的流量控制</font>，仅对包含热点参数的资源调用生效。</p><h2 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotKey&quot;,blockHandler = &quot;del_testHotKey&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;,required = false)</span>String p1,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestParam(value = &quot;p2&quot;,required = false)</span>String p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;---/testHotKey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">del_testHotKey</span><span class="params">(String p1,String p2, BlockException blockException)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;---/del_testHotKey,o(╥﹏╥)o&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们写了一个兜底的方法 del_testHotKey ，如果进入限流，我们将会走兜底的方法，如果没有配置兜底的方法，则会报BlockException的错误，对用户不友好，所以我们一般情况下使用热点参数限流的时候都会配置一个兜底的方法，兜底的方法比限流的方法多了BlockException这个参数，注意不要遗忘，且存在另一个异常，叫BlockedException，需要留意。</p><p>在配置@SentinelResource的时候，要注意value的配置，就是下面配置页的资源名，不要多一”/“，如果没有配value这一项，Sentinel才会默认去找路径名称</p><h2 id="热点配置（定义热点规则）"><a href="#热点配置（定义热点规则）" class="headerlink" title="热点配置（定义热点规则）"></a>热点配置（定义热点规则）</h2><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609053117528-1612065261160.png" alt="1609053117528"></p><p>参数索引：指的是方法上的参数的顺序，从第一个参数开始为0，第二个为1……</p><p>单机阈值：最大请求数是多少</p><p>统计窗口时长：这段时间发生熔断，阻止请求进来</p><p>当前的规则是：当请求 /testHotKey 时，如果添加了请求参数p1，则2s内的最大请求数为1，超过时，则限制这些请求，如果未添加请求参数p1，则不进行限制。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>a、首先测试只有p1参数，测试结果：</p><p>当快速点击时，发现被热点限流了</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609053693855.png" alt="1609053693855"></p><p>b、测试只有p2参数，测试结果：</p><p>当快速点击时，还是可以正常访问</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609053756408.png" alt="1609053756408"></p><p>c、测试同时有p1和p2参数，测试结果：</p><p>当快速点击时，发现被热点限流了</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609053797962.png" alt="1609053797962"></p><p>结论：当参数中包含限流参数时，当请求超过阈值时，就会被限流。</p><h2 id="热点参数限流例外项"><a href="#热点参数限流例外项" class="headerlink" title="热点参数限流例外项"></a>热点参数限流例外项</h2><p>当我们在限制热点参数时，如果我们对该参数如果是某些值时不想对其做限制时，我们可以配置热点参数限流例外项。</p><p>点击  编辑  ——&gt;  高级选项</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609054319610.png" alt="1609054319610"></p><p>当前规则是：当请求 /testHotKey 时，如果添加了请求参数p1，则2s内的最大请求数为1，超过时，则限制这些请求，如果未添加请求参数p1，则不进行限制。但如果p1的值为2，则限流的阈值变为100。</p><h2 id="参数限流例外项测试"><a href="#参数限流例外项测试" class="headerlink" title="参数限流例外项测试"></a>参数限流例外项测试</h2><p>a、首先测试只有p1参数，且p1的值不为2，测试结果：</p><p>当快速点击时，发现被热点限流了</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609053693855.png" alt="1609053693855"></p><p>b、然后测试只有p1参数，且p1的值为2，测试结果：</p><p>当快速点击时，发现没有被热点限流</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609054395990.png" alt="1609054395990"></p><h1 id="系统自适应限流"><a href="#系统自适应限流" class="headerlink" title="系统自适应限流"></a>系统自适应限流</h1><p>Sentinel 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><h2 id="系统自适应限流模式"><a href="#系统自适应限流模式" class="headerlink" title="系统自适应限流模式"></a>系统自适应限流模式</h2><p><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps * minRt估算得出。设定参考值一般是 CPU cores * 2.5。</p><p><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</p><p><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</p><p><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</p><p><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</p><p>本次仅测试两个，一个是CPU usage，一个是入口QPS</p><h2 id="系统自适应限流——入口QPS"><a href="#系统自适应限流——入口QPS" class="headerlink" title="系统自适应限流——入口QPS"></a>系统自适应限流——入口QPS</h2><h3 id="测试使用之前的代码-testA-和-testB"><a href="#测试使用之前的代码-testA-和-testB" class="headerlink" title="测试使用之前的代码  /testA  和  /testB"></a>测试使用之前的代码  /testA  和  /testB</h3><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>点击  系统规则 –&gt;  新增系统规则</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609054495122.png" alt="1609054495122"></p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>/testA  和  /testB 没有配置限流规则</p><p>a、快速点击请求  /testA ,使QPS大于1，测试结果：被限流了</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609054891286.png" alt="1609054891286"></p><p>b、快速点击请求  /testHotKey ,使QPS大于1，测试结果：被限流了</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609054776749.png" alt="1609054776749"></p><p>c、使用jmeter高并发请求 /testA 接口，然后点击 /testB 接口测试，测试结果：被限流了</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609054776749.png" alt="1609054776749"></p><h2 id="系统自适应限流——CPU-usage"><a href="#系统自适应限流——CPU-usage" class="headerlink" title="系统自适应限流——CPU usage"></a>系统自适应限流——CPU usage</h2><h3 id="测试使用之前的代码-testA"><a href="#测试使用之前的代码-testA" class="headerlink" title="测试使用之前的代码  /testA"></a>测试使用之前的代码  /testA</h3><h3 id="添加配置-1"><a href="#添加配置-1" class="headerlink" title="添加配置"></a>添加配置</h3><p>点击  系统规则 –&gt;  新增系统规则</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609054967586.png" alt="1609054967586"></p><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>/testA 没有配置限流规则</p><p>当前系统的cpu为85%</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609054979409.png" alt="1609054979409"></p><p>点击请求  /testA ，测试结果：被限流了</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609055022913.png" alt="1609055022913"></p><h1 id="SentinelResource注解"><a href="#SentinelResource注解" class="headerlink" title="@SentinelResource注解"></a>@SentinelResource注解</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>@SentinelResource 用于定义资源，并提供可选的异常处理和 fallback 配置项。 @SentinelResource 注解包含以下属性：</p><p><strong>value</strong>：资源名称，必需项（不能为空）；<br><strong>entryType</strong>：entry 类型，可选项（默认为 EntryType.OUT）；<br><strong>blockHandler / blockHandlerClass</strong>: blockHandler 对应处理 BlockException 的函数名称，可选项。blockHandler 函数访问范围需要是 public，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 BlockException。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 blockHandlerClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析；<br><strong>fallback / fallbackClass</strong>：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：<br>​                返回值类型必须与原函数返回值类型一致；<br>​                方法参数列表需要和原函数一致，或者可以额外多一个 Throwable 类型的参数用于接收对应的异常。<br>​                fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 fallbackClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。<br><strong>defaultFallback</strong>：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。defaultFallback 函数签名要求：<br>​                返回值类型必须与原函数返回值类型一致；<br>​                方法参数列表需要为空，或者可以额外多一个 Throwable 类型的参数用于接收对应的异常。<br>​                defaultFallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 fallbackClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。<br><strong>exceptionsToIgnore</strong>：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</p><h2 id="代码的优化问题"><a href="#代码的优化问题" class="headerlink" title="代码的优化问题"></a>代码的优化问题</h2><p>我们回看热点参数限流中的第2点的测试代码，出现了几个问题</p><p>a、降级方法与业务方法耦合；</p><p>b、每一个方法都需要一个对应的降级方法；</p><p>c、如果服务出现异常而不是限流了，该怎么处理；</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用自定义限流处理类来解决问题。</p><h3 id="创建自定义限流处理类-异常处理类"><a href="#创建自定义限流处理类-异常处理类" class="headerlink" title="创建自定义限流处理类/异常处理类"></a>创建自定义限流处理类/异常处理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.cloud.alibaba.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"><span class="keyword">import</span> com.cheng.cloud.entity.ResoultVo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBlockHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResoultVo&lt;Integer&gt; <span class="title">handlerException1</span><span class="params">(BlockException blockException)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResoultVo&lt;&gt;(<span class="number">444</span>,<span class="string">&quot;自定义，global handlerException------1&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResoultVo&lt;Integer&gt; <span class="title">handlerException2</span><span class="params">(BlockException blockException)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResoultVo&lt;&gt;(<span class="number">444</span>,<span class="string">&quot;自定义，global handlerException------2&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResoultVo&lt;Object&gt; <span class="title">exception1</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResoultVo&lt;&gt;(<span class="number">555</span>,<span class="string">&quot;自定义，global Exception------1&quot;</span>,e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<font color='red'>限流处理类的参数需要在原有参数的基础上添加BlockException blockException</font></p><p>​           <font color='red'>异常处理类的参数需要在原有参数的基础上添加Throwable e</font></p><h3 id="配置资源类"><a href="#配置资源类" class="headerlink" title="配置资源类"></a>配置资源类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/sentinel/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;payMentSentinel&quot;,                  </span></span><br><span class="line"><span class="meta">  blockHandlerClass = CustomerBlockHandler.class,                  </span></span><br><span class="line"><span class="meta">  blockHandler = &quot;handlerException1&quot;,                  </span></span><br><span class="line"><span class="meta">  fallbackClass = CustomerBlockHandler.class,                  </span></span><br><span class="line"><span class="meta">  fallback = &quot;exception1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResoultVo&lt;Integer&gt; <span class="title">getSentinelPayment</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        ResoultVo&lt;Integer&gt; resoultVo = <span class="keyword">new</span> ResoultVo&lt;&gt;();    </span><br><span class="line">        resoultVo.setCode(<span class="number">200</span>);    </span><br><span class="line">        resoultVo.setMessage(<span class="string">&quot;使用端口为：&quot;</span>+serverPort);    </span><br><span class="line">        resoultVo.setData(id);    </span><br><span class="line">        <span class="keyword">return</span> resoultVo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动项目，配置流控规则"><a href="#启动项目，配置流控规则" class="headerlink" title="启动项目，配置流控规则"></a>启动项目，配置流控规则</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609055744414.png" alt="1609055744414"></p><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><h4 id="测试流控统一处理"><a href="#测试流控统一处理" class="headerlink" title="测试流控统一处理"></a>测试流控统一处理</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609056097464.png" alt="1609056097464"></p><p>这里会去找blockHandlerClass流控处理类，然后再去找对应的blockHandler流控处理方法进行处理</p><h4 id="测试异常统一处理"><a href="#测试异常统一处理" class="headerlink" title="测试异常统一处理"></a>测试异常统一处理</h4><p>在代码添加异常int age = 10/0；运行请求</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609056283800.png" alt="1609056283800"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609056247912.png" alt="1609056247912"></p><p>这里会去找fallbackClass异常处理类，然后再去找对应的fallback异常处理方法进行处理，defaultFallback和fallback功能一致，如果设置了fallback，则会默认使用fallback的方法，而不是defaultFallback。</p><h3 id="exceptionsToIgnore配置"><a href="#exceptionsToIgnore配置" class="headerlink" title="exceptionsToIgnore配置"></a>exceptionsToIgnore配置</h3><p>有时候有一些异常我们不希望被fallback处理，我们希望他能抛出，这时候可以配置exceptionsToIgnore来除外相应的异常</p><p>测试：</p><p>代码添加exceptionsToIgnore配置，除外分母为0的异常</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609056338479.png" alt="1608393539417"></p><p>测试发现异常不会被fallback处理，而是被抛出</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609056517689.png" alt="1609056517689"></p><h1 id="sentinel整合openFeign-fallback"><a href="#sentinel整合openFeign-fallback" class="headerlink" title="sentinel整合openFeign+fallback"></a>sentinel整合openFeign+fallback</h1><h2 id="配置服务提供者"><a href="#配置服务提供者" class="headerlink" title="配置服务提供者"></a>配置服务提供者</h2><h3 id="配置pom文件"><a href="#配置pom文件" class="headerlink" title="配置pom文件"></a>配置pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20200704<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cheng.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-sentinel-openfeign-provider9004<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos相关配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入实体--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cheng.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot相关配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置yml文件"><a href="#配置yml文件" class="headerlink" title="配置yml文件"></a>配置yml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9004</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-sentinel-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.197</span><span class="number">.132</span><span class="string">:80,192.168.197.132:81</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="配置主启动类"><a href="#配置主启动类" class="headerlink" title="配置主启动类"></a>配置主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.sentinel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pr1Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Pr1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写测试服务"><a href="#编写测试服务" class="headerlink" title="编写测试服务"></a>编写测试服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.sentinel.rest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cheng.cloud.entity.PayMent;</span><br><span class="line"><span class="keyword">import</span> com.cheng.cloud.entity.ResoultVo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Long, PayMent&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        hashMap.put(<span class="number">1L</span>, <span class="keyword">new</span> PayMent(<span class="number">1L</span>, <span class="string">&quot;28a8c1e3bc2742d8848569891fb42181&quot;</span>));</span><br><span class="line">        hashMap.put(<span class="number">2L</span>, <span class="keyword">new</span> PayMent(<span class="number">2L</span>, <span class="string">&quot;bba8c1e3bc2742d8848569891ac32182&quot;</span>));</span><br><span class="line">        hashMap.put(<span class="number">3L</span>, <span class="keyword">new</span> PayMent(<span class="number">3L</span>, <span class="string">&quot;6ua8c1e3bc2742d8848569891xt92183&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResoultVo&lt;PayMent&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        PayMent payment = hashMap.get(id);</span><br><span class="line">        ResoultVo&lt;PayMent&gt; result = <span class="keyword">new</span> ResoultVo(<span class="number">200</span>, <span class="string">&quot;from mysql,serverPort:  &quot;</span> + serverPort, payment);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609057420018.png" alt="1609057420018"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609057482444.png" alt="1609057482444"></p><h2 id="配置服务消费者"><a href="#配置服务消费者" class="headerlink" title="配置服务消费者"></a>配置服务消费者</h2><h3 id="配置pom文件-1"><a href="#配置pom文件-1" class="headerlink" title="配置pom文件"></a>配置pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20200704<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cheng.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-sentinel-openfeign-provider9004<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos相关配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--sentinel相关配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--openfeign相关配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入实体--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cheng.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot相关配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置yml文件-1"><a href="#配置yml文件-1" class="headerlink" title="配置yml文件"></a>配置yml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-sentinel-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.197</span><span class="number">.132</span><span class="string">:80,192.168.197.132:81</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">192.168</span><span class="number">.197</span><span class="number">.132</span><span class="string">:8080</span></span><br><span class="line">        </span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Sentinel对Feign的支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>最重要的配置</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609057890710.png" alt="1609057890710"></p><h3 id="配置主启动类-1"><a href="#配置主启动类-1" class="headerlink" title="配置主启动类"></a>配置主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.sentinel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置测试服务"><a href="#配置测试服务" class="headerlink" title="配置测试服务"></a>配置测试服务</h3><h4 id="PaymentService"><a href="#PaymentService" class="headerlink" title="PaymentService"></a>PaymentService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.sentinel.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cheng.cloud.entity.PayMent;</span><br><span class="line"><span class="keyword">import</span> com.cheng.cloud.entity.ResoultVo;</span><br><span class="line"><span class="keyword">import</span> com.cheng.sentinel.service.impl.PaymentFallbackServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;nacos-payment-provider&quot;,fallback = PaymentFallbackServiceImpl.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">ResoultVo&lt;PayMent&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PaymentFallbackServiceImpl-降级回调类"><a href="#PaymentFallbackServiceImpl-降级回调类" class="headerlink" title="PaymentFallbackServiceImpl(降级回调类)"></a>PaymentFallbackServiceImpl(降级回调类)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.sentinel.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cheng.cloud.entity.PayMent;</span><br><span class="line"><span class="keyword">import</span> com.cheng.cloud.entity.ResoultVo;</span><br><span class="line"><span class="keyword">import</span> com.cheng.sentinel.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackServiceImpl</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResoultVo&lt;PayMent&gt; <span class="title">paymentSQL</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResoultVo&lt;PayMent&gt;(<span class="number">44444</span>,<span class="string">&quot;服务降级返回,---PaymentFallbackService&quot;</span>,<span class="keyword">new</span> PayMent(id,<span class="string">&quot;errorSerial&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PayMentController"><a href="#PayMentController" class="headerlink" title="PayMentController"></a>PayMentController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.sentinel.rest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cheng.cloud.entity.PayMent;</span><br><span class="line"><span class="keyword">import</span> com.cheng.cloud.entity.ResoultVo;</span><br><span class="line"><span class="keyword">import</span> com.cheng.sentinel.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayMentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResoultVo&lt;PayMent&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentService.paymentSQL(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动测试-1"><a href="#启动测试-1" class="headerlink" title="启动测试"></a>启动测试</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609057960746.png" alt="1609057960746"></p><p>配置限流规则后，快速点击</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609058011243.png" alt="1609058011243"></p><p>支持轮询的请求操作，此时关闭9004和9005，再次请求：跳入熔断返回方法，测试成功！</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609058067136.png" alt="1609058067136"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609058093924.png" alt="1609058093924"></p><h1 id="sentinel持久化配置"><a href="#sentinel持久化配置" class="headerlink" title="sentinel持久化配置"></a>sentinel持久化配置</h1><p>我们发现，我们每一次重启项目，我们都需要重新配置Sentinel上面的规则，这在生产环境是很不合理的，所以我们需要对其进行持久化配置，Sentinel推荐<strong>通过控制台设置规则后将规则推送到统一的规则中心，客户端实现<font color='red'>ReadableDataSource</font>  接口端监听规则中心实时获取变更</strong>，拓展的常见方式有两种：</p><ul><li><p><strong>拉模式</strong>：客户端主动向某个规则管理中心定期轮询拉取规则，这个规则中心可以是 RDBMS、文件，甚至是 VCS 等。这样做的方式是简单，缺点是无法及时获取变更；</p></li><li><p><strong>推模式</strong>：规则中心统一推送，客户端通过注册监听器的方式时刻监听变化，比如使用 <a href="http://github.com/alibaba/nacos">Nacos</a>、Zookeeper 等配置中心。这种方式有更好的实时性和一致性保证。</p><p>下文，我们会以nacos为例来使用推模式持久化我们的规则</p></li></ul><h2 id="Sentinel-Dashboard服务（控制台）改造"><a href="#Sentinel-Dashboard服务（控制台）改造" class="headerlink" title="Sentinel-Dashboard服务（控制台）改造"></a>Sentinel-Dashboard服务（控制台）改造</h2><p>我们需要改造Sentinel控制台，使我们的规则能够保存到nacos配置中心上。</p><p>这里如果嫌麻烦或者修改后出现异常，可以下载以下地址的jar包，里面是修改好所有规则的jar包</p><p><a href="http://cheng_qiwei.gitee.io/blog/file/sentinel-dashboard.jar">http://cheng_qiwei.gitee.io/blog/file/sentinel-dashboard.jar</a></p><h3 id="修改pom文件"><a href="#修改pom文件" class="headerlink" title="修改pom文件"></a>修改pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><p>将 <strong>sentinel-dashboard/src/test/java/com/alibaba/csp/sentinel/dashboard/rule/nacos</strong>  下的所有文件拷贝到  <strong>sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/rule/nacos</strong> </p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开  <strong>sentinel-dashboard\src\main\resources\application.properties</strong>  添加配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">nacos 配置</span></span><br><span class="line">nacos.address=127.0.0.1:80</span><br><span class="line">nacos.namespace=</span><br></pre></td></tr></table></figure><h3 id="修改NacosConfig工具类"><a href="#修改NacosConfig工具类" class="headerlink" title="修改NacosConfig工具类"></a>修改NacosConfig工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.gateway.ApiDefinitionEntity;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.gateway.GatewayFlowRuleEntity;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.datasource.Converter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.PropertyKeyConst;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.config.ConfigFactory;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Zhao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;nacos.address&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;nacos.namespace&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String namespace;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流控规则</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;List&lt;FlowRuleEntity&gt;, String&gt; flowRuleEntityEncoder() &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON::toJSONString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;String, List&lt;FlowRuleEntity&gt;&gt; flowRuleEntityDecoder() &#123;</span><br><span class="line">        <span class="keyword">return</span> s -&gt; JSON.parseArray(s, FlowRuleEntity.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权规则</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;List&lt;AuthorityRuleEntity&gt;, String&gt; authorRuleEntityEncoder() &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON::toJSONString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;String, List&lt;AuthorityRuleEntity&gt;&gt; authorRuleEntityDecoder() &#123;</span><br><span class="line">        <span class="keyword">return</span> s -&gt; JSON.parseArray(s, AuthorityRuleEntity.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 降级规则</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;List&lt;DegradeRuleEntity&gt;, String&gt; degradeRuleEntityEncoder() &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON::toJSONString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;String, List&lt;DegradeRuleEntity&gt;&gt; degradeRuleEntityDecoder() &#123;</span><br><span class="line">        <span class="keyword">return</span> s -&gt; JSON.parseArray(s, DegradeRuleEntity.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 热点参数 规则</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;List&lt;ParamFlowRuleEntity&gt;, String&gt; paramRuleEntityEncoder() &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON::toJSONString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;String, List&lt;ParamFlowRuleEntity&gt;&gt; paramRuleEntityDecoder() &#123;</span><br><span class="line">        <span class="keyword">return</span> s -&gt; JSON.parseArray(s, ParamFlowRuleEntity.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统规则</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;List&lt;SystemRuleEntity&gt;, String&gt; systemRuleEntityEncoder() &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON::toJSONString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;String, List&lt;SystemRuleEntity&gt;&gt; systemRuleEntityDecoder() &#123;</span><br><span class="line">        <span class="keyword">return</span> s -&gt; JSON.parseArray(s, SystemRuleEntity.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigService <span class="title">nacosConfigService</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//nacos集群地址</span></span><br><span class="line">        properties.put(PropertyKeyConst.SERVER_ADDR,address);</span><br><span class="line">        <span class="comment">//namespace为空即为public</span></span><br><span class="line">        properties.put(PropertyKeyConst.NAMESPACE,namespace);</span><br><span class="line">        <span class="keyword">return</span> ConfigFactory.createConfigService(properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加一个JSONUtils在-com-alibaba-csp-sentinel-dashboard-util上"><a href="#添加一个JSONUtils在-com-alibaba-csp-sentinel-dashboard-util上" class="headerlink" title="添加一个JSONUtils在  com.alibaba.csp.sentinel.dashboard.util上"></a>添加一个<strong>JSONUtils</strong>在  <strong>com.alibaba.csp.sentinel.dashboard.util</strong>上</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.csp.sentinel.dashboard.util;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * json根工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">toJSONString</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ObjectMapper().writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JavaType <span class="title">getCollectionType</span><span class="params">(Class&lt;?&gt; collectionClass, Class&lt;?&gt;... elementClasses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObjectMapper()</span><br><span class="line">                .getTypeFactory()</span><br><span class="line">                .constructParametricType(collectionClass, elementClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">parseObject</span><span class="params">(Class&lt;T&gt; clazz, String string)</span> </span>&#123;</span><br><span class="line">        JavaType javaType = getCollectionType(ArrayList.class, clazz);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (List&lt;T&gt;) <span class="keyword">new</span> ObjectMapper().readValue(string, javaType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-NacosConfigUtil-文件"><a href="#修改-NacosConfigUtil-文件" class="headerlink" title="修改 NacosConfigUtil 文件"></a>修改 <strong>NacosConfigUtil</strong> 文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.util.JSONUtils;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.Rule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.util.AssertUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.util.StringUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.exception.NacosException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Zhao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_ID = <span class="string">&quot;SENTINEL_GROUP&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLOW_DATA_ID_POSTFIX = <span class="string">&quot;-flow-rules&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PARAM_FLOW_DATA_ID_POSTFIX = <span class="string">&quot;-param-rules&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLUSTER_MAP_DATA_ID_POSTFIX = <span class="string">&quot;-cluster-map&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEGRADE_DATA_ID_POSTFIX = <span class="string">&quot;-degrade-rules&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_DATA_ID_POSTFIX = <span class="string">&quot;-system-rules&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY_DATA_ID_POSTFIX = <span class="string">&quot;-authority-rules&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DASHBOARD_POSTFIX = <span class="string">&quot;-dashboard&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cc for `cluster-client`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLIENT_CONFIG_DATA_ID_POSTFIX = <span class="string">&quot;-cc-config&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cs for `cluster-server`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_TRANSPORT_CONFIG_DATA_ID_POSTFIX = <span class="string">&quot;-cs-transport-config&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_FLOW_CONFIG_DATA_ID_POSTFIX = <span class="string">&quot;-cs-flow-config&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_NAMESPACE_SET_DATA_ID_POSTFIX = <span class="string">&quot;-cs-namespace-set&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NacosConfigUtil</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将规则序列化成JSON文本，存储到Nacos server中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configService nacos config service</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> app           应用名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> postfix       规则后缀 eg.NacosConfigUtil.FLOW_DATA_ID_POSTFIX</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rules         规则对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NacosException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setRuleStringToNacos</span><span class="params">(ConfigService configService, String app, String postfix, List&lt;T&gt; rules)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        AssertUtil.notEmpty(app, <span class="string">&quot;app name cannot be empty&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (rules == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Rule&gt; ruleForApp = rules.stream()</span><br><span class="line">                .map(rule -&gt; &#123;</span><br><span class="line">                    RuleEntity rule1 = (RuleEntity) rule;</span><br><span class="line">                    System.out.println(rule1.getClass());</span><br><span class="line">                    Rule rule2 = rule1.toRule();</span><br><span class="line">                    System.out.println(rule2.getClass());</span><br><span class="line">                    <span class="keyword">return</span> rule2;</span><br><span class="line">                &#125;)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储，给微服务使用</span></span><br><span class="line">        String dataId = genDataId(app, postfix);</span><br><span class="line">        configService.publishConfig(</span><br><span class="line">                dataId,</span><br><span class="line">                NacosConfigUtil.GROUP_ID,</span><br><span class="line">                JSONUtils.toJSONString(ruleForApp)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储，给控制台使用</span></span><br><span class="line">        configService.publishConfig(</span><br><span class="line">                dataId + DASHBOARD_POSTFIX,</span><br><span class="line">                NacosConfigUtil.GROUP_ID,</span><br><span class="line">                JSONUtils.toJSONString(rules)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从Nacos server中查询响应规则，并将其反序列化成对应Rule实体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configService nacos config service</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> appName       应用名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> postfix       规则后缀 eg.NacosConfigUtil.FLOW_DATA_ID_POSTFIX</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;           泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 规则对象列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NacosException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getRuleEntitiesFromNacos</span><span class="params">(ConfigService configService, String appName, String postfix, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> NacosException </span>&#123;</span><br><span class="line">        String rules = configService.getConfig(</span><br><span class="line">                genDataId(appName, postfix) + DASHBOARD_POSTFIX,</span><br><span class="line">                NacosConfigUtil.GROUP_ID,</span><br><span class="line">                <span class="number">3000</span></span><br><span class="line">        );</span><br><span class="line">        System.out.println(<span class="string">&quot;回收数据：&quot;</span>+rules);</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isEmpty(rules)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;回收数据2：&quot;</span>+JSONUtils.parseObject(clazz, rules));</span><br><span class="line">        <span class="keyword">return</span> JSONUtils.parseObject(clazz, rules);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">genDataId</span><span class="params">(String appName, String postfix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appName + postfix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-FlowRuleNacosProvider"><a href="#修改-FlowRuleNacosProvider" class="headerlink" title="修改 FlowRuleNacosProvider"></a>修改 FlowRuleNacosProvider</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos.flow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.rule.DynamicRuleProvider;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.rule.nacos.NacosConfigUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.datasource.Converter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.util.StringUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Zhao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(&quot;flowRuleNacosProvider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowRuleNacosProvider</span> <span class="keyword">implements</span> <span class="title">DynamicRuleProvider</span>&lt;<span class="title">List</span>&lt;<span class="title">FlowRuleEntity</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConfigService configService;</span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private Converter&lt;String, List&lt;FlowRuleEntity&gt;&gt; converter;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;FlowRuleEntity&gt; <span class="title">getRules</span><span class="params">(String appName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        String rules = configService.getConfig(appName + NacosConfigUtil.FLOW_DATA_ID_POSTFIX,</span></span><br><span class="line"><span class="comment">//            NacosConfigUtil.GROUP_ID, 3000);</span></span><br><span class="line"><span class="comment">//        if (StringUtil.isEmpty(rules)) &#123;</span></span><br><span class="line"><span class="comment">//            return new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return converter.convert(rules);</span></span><br><span class="line">        <span class="keyword">return</span> NacosConfigUtil.getRuleEntitiesFromNacos(</span><br><span class="line">                <span class="keyword">this</span>.configService,</span><br><span class="line">                appName,</span><br><span class="line">                NacosConfigUtil.FLOW_DATA_ID_POSTFIX,</span><br><span class="line">                FlowRuleEntity.class</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-FlowRuleNacosPublisher"><a href="#修改-FlowRuleNacosPublisher" class="headerlink" title="修改 FlowRuleNacosPublisher"></a>修改 FlowRuleNacosPublisher</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos.flow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.rule.DynamicRulePublisher;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.rule.nacos.NacosConfigUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.datasource.Converter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.util.AssertUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Zhao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(&quot;flowRuleNacosPublisher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowRuleNacosPublisher</span> <span class="keyword">implements</span> <span class="title">DynamicRulePublisher</span>&lt;<span class="title">List</span>&lt;<span class="title">FlowRuleEntity</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConfigService configService;</span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private Converter&lt;List&lt;FlowRuleEntity&gt;, String&gt; converter;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String app, List&lt;FlowRuleEntity&gt; rules)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        AssertUtil.notEmpty(app, &quot;app name cannot be empty&quot;);</span></span><br><span class="line"><span class="comment">//        if (rules == null) &#123;</span></span><br><span class="line"><span class="comment">//            return;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        configService.publishConfig(app + NacosConfigUtil.FLOW_DATA_ID_POSTFIX,</span></span><br><span class="line"><span class="comment">//            NacosConfigUtil.GROUP_ID, converter.convert(rules));</span></span><br><span class="line">        NacosConfigUtil.setRuleStringToNacos(</span><br><span class="line">                <span class="keyword">this</span>.configService,</span><br><span class="line">                app,</span><br><span class="line">                NacosConfigUtil.FLOW_DATA_ID_POSTFIX,</span><br><span class="line">                rules</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改FlowControllerV2"><a href="#修改FlowControllerV2" class="headerlink" title="修改FlowControllerV2"></a>修改FlowControllerV2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//@Qualifier(&quot;flowRuleDefaultProvider&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;flowRuleNacosProvider&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DynamicRuleProvider&lt;List&lt;FlowRuleEntity&gt;&gt; ruleProvider;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//@Qualifier(&quot;flowRuleDefaultPublisher&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;flowRuleNacosPublisher&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DynamicRulePublisher&lt;List&lt;FlowRuleEntity&gt;&gt; rulePublisher;</span><br></pre></td></tr></table></figure><h3 id="修改sidebar-html"><a href="#修改sidebar-html" class="headerlink" title="修改sidebar.html"></a>修改sidebar.html</h3><p><strong>sentinel-dashboard/src/main/webapp/resources/app/scripts/directives/sidebar/sidebar.html</strong></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609060601031.png" alt="1609060601031"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;li ui-sref-active&#x3D;&quot;active&quot; ng-if&#x3D;&quot;!entry.isGateway&quot;&gt;</span><br><span class="line">            &lt;a ui-sref&#x3D;&quot;dashboard.flow(&#123;app: entry.app&#125;)&quot;&gt;</span><br><span class="line">              &lt;i class&#x3D;&quot;glyphicon glyphicon-filter&quot;&gt;&lt;&#x2F;i&gt;&amp;nbsp;&amp;nbsp;流控规则&lt;&#x2F;a&gt;</span><br><span class="line">          &lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure><h3 id="修改FlowControllerV1"><a href="#修改FlowControllerV1" class="headerlink" title="修改FlowControllerV1"></a>修改FlowControllerV1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.alibaba.csp.sentinel.dashboard.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.auth.AuthAction;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.auth.AuthService.PrivilegeType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.rule.DynamicRuleProvider;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.rule.DynamicRulePublisher;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.util.StringUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.client.SentinelApiClient;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.discovery.MachineInfo;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.domain.Result;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemoryRuleRepositoryAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.DeleteMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PutMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flow rule controller.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> leyou</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Zhao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/v1/flow&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowControllerV1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(FlowControllerV1.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> InMemoryRuleRepositoryAdapter&lt;FlowRuleEntity&gt; repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private SentinelApiClient sentinelApiClient;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;flowRuleNacosProvider&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DynamicRuleProvider&lt;List&lt;FlowRuleEntity&gt;&gt; ruleProvider;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;flowRuleNacosPublisher&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DynamicRulePublisher&lt;List&lt;FlowRuleEntity&gt;&gt; rulePublisher;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@AuthAction(PrivilegeType.READ_RULE)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;FlowRuleEntity&gt;&gt; apiQueryMachineRules(<span class="meta">@RequestParam</span> String app,</span><br><span class="line">                                                             <span class="meta">@RequestParam</span> String ip,</span><br><span class="line">                                                             <span class="meta">@RequestParam</span> Integer port) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isEmpty(app)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;app can&#x27;t be null or empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isEmpty(ip)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;ip can&#x27;t be null or empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (port == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;port can&#x27;t be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//List&lt;FlowRuleEntity&gt; rules = sentinelApiClient.fetchFlowRuleOfMachine(app, ip, port);</span></span><br><span class="line">            List&lt;FlowRuleEntity&gt; rules = ruleProvider.getRules(app);</span><br><span class="line">            rules = repository.saveAll(rules);</span><br><span class="line">            <span class="keyword">return</span> Result.ofSuccess(rules);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Error when querying flow rules&quot;</span>, throwable);</span><br><span class="line">            <span class="keyword">return</span> Result.ofThrowable(-<span class="number">1</span>, throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;R&gt; <span class="function">Result&lt;R&gt; <span class="title">checkEntityInternal</span><span class="params">(FlowRuleEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(entity.getApp())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;app can&#x27;t be null or empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(entity.getIp())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;ip can&#x27;t be null or empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entity.getPort() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;port can&#x27;t be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(entity.getLimitApp())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;limitApp can&#x27;t be null or empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(entity.getResource())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;resource can&#x27;t be null or empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entity.getGrade() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;grade can&#x27;t be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entity.getGrade() != <span class="number">0</span> &amp;&amp; entity.getGrade() != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;grade must be 0 or 1, but &quot;</span> + entity.getGrade() + <span class="string">&quot; got&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entity.getCount() == <span class="keyword">null</span> || entity.getCount() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;count should be at lease zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entity.getStrategy() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;strategy can&#x27;t be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entity.getStrategy() != <span class="number">0</span> &amp;&amp; StringUtil.isBlank(entity.getRefResource())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;refResource can&#x27;t be null or empty when strategy!=0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entity.getControlBehavior() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;controlBehavior can&#x27;t be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> controlBehavior = entity.getControlBehavior();</span><br><span class="line">        <span class="keyword">if</span> (controlBehavior == <span class="number">1</span> &amp;&amp; entity.getWarmUpPeriodSec() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;warmUpPeriodSec can&#x27;t be null when controlBehavior==1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (controlBehavior == <span class="number">2</span> &amp;&amp; entity.getMaxQueueingTimeMs() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;maxQueueingTimeMs can&#x27;t be null when controlBehavior==2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entity.isClusterMode() &amp;&amp; entity.getClusterConfig() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;cluster config should be valid&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/rule&quot;)</span></span><br><span class="line">    <span class="meta">@AuthAction(PrivilegeType.WRITE_RULE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;FlowRuleEntity&gt; <span class="title">apiAddFlowRule</span><span class="params">(<span class="meta">@RequestBody</span> FlowRuleEntity entity)</span> </span>&#123;</span><br><span class="line">        Result&lt;FlowRuleEntity&gt; checkResult = checkEntityInternal(entity);</span><br><span class="line">        <span class="keyword">if</span> (checkResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> checkResult;</span><br><span class="line">        &#125;</span><br><span class="line">        entity.setId(<span class="keyword">null</span>);</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        entity.setGmtCreate(date);</span><br><span class="line">        entity.setGmtModified(date);</span><br><span class="line">        entity.setLimitApp(entity.getLimitApp().trim());</span><br><span class="line">        entity.setResource(entity.getResource().trim());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            entity = repository.save(entity);</span><br><span class="line">            publishRules(entity.getApp());</span><br><span class="line">            <span class="comment">//publishRules(entity.getApp(), entity.getIp(), entity.getPort()).get(5000, TimeUnit.MILLISECONDS);</span></span><br><span class="line">            <span class="keyword">return</span> Result.ofSuccess(entity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            Throwable e = t <span class="keyword">instanceof</span> ExecutionException ? t.getCause() : t;</span><br><span class="line">            logger.error(<span class="string">&quot;Failed to add new flow rule, app=&#123;&#125;, ip=&#123;&#125;&quot;</span>, entity.getApp(), entity.getIp(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/save.json&quot;)</span></span><br><span class="line">    <span class="meta">@AuthAction(PrivilegeType.WRITE_RULE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;FlowRuleEntity&gt; <span class="title">apiUpdateFlowRule</span><span class="params">(Long id, String app,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  String limitApp, String resource, Integer grade,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  Double count, Integer strategy, String refResource,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  Integer controlBehavior, Integer warmUpPeriodSec,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  Integer maxQueueingTimeMs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;id can&#x27;t be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FlowRuleEntity entity = repository.findById(id);</span><br><span class="line">        <span class="keyword">if</span> (entity == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;id &quot;</span> + id + <span class="string">&quot; dose not exist&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotBlank(app)) &#123;</span><br><span class="line">            entity.setApp(app.trim());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotBlank(limitApp)) &#123;</span><br><span class="line">            entity.setLimitApp(limitApp.trim());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotBlank(resource)) &#123;</span><br><span class="line">            entity.setResource(resource.trim());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (grade != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grade != <span class="number">0</span> &amp;&amp; grade != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;grade must be 0 or 1, but &quot;</span> + grade + <span class="string">&quot; got&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            entity.setGrade(grade);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="keyword">null</span>) &#123;</span><br><span class="line">            entity.setCount(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (strategy != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strategy != <span class="number">0</span> &amp;&amp; strategy != <span class="number">1</span> &amp;&amp; strategy != <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;strategy must be in [0, 1, 2], but &quot;</span> + strategy + <span class="string">&quot; got&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            entity.setStrategy(strategy);</span><br><span class="line">            <span class="keyword">if</span> (strategy != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (StringUtil.isBlank(refResource)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;refResource can&#x27;t be null or empty when strategy!=0&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                entity.setRefResource(refResource.trim());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (controlBehavior != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (controlBehavior != <span class="number">0</span> &amp;&amp; controlBehavior != <span class="number">1</span> &amp;&amp; controlBehavior != <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;controlBehavior must be in [0, 1, 2], but &quot;</span> + controlBehavior + <span class="string">&quot; got&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (controlBehavior == <span class="number">1</span> &amp;&amp; warmUpPeriodSec == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;warmUpPeriodSec can&#x27;t be null when controlBehavior==1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (controlBehavior == <span class="number">2</span> &amp;&amp; maxQueueingTimeMs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;maxQueueingTimeMs can&#x27;t be null when controlBehavior==2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            entity.setControlBehavior(controlBehavior);</span><br><span class="line">            <span class="keyword">if</span> (warmUpPeriodSec != <span class="keyword">null</span>) &#123;</span><br><span class="line">                entity.setWarmUpPeriodSec(warmUpPeriodSec);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maxQueueingTimeMs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                entity.setMaxQueueingTimeMs(maxQueueingTimeMs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        entity.setGmtModified(date);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            entity = repository.save(entity);</span><br><span class="line">            <span class="keyword">if</span> (entity == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;save entity fail: null&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            publishRules(entity.getApp());</span><br><span class="line">            <span class="comment">//publishRules(entity.getApp(), entity.getIp(), entity.getPort()).get(5000, TimeUnit.MILLISECONDS);</span></span><br><span class="line">            <span class="keyword">return</span> Result.ofSuccess(entity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            Throwable e = t <span class="keyword">instanceof</span> ExecutionException ? t.getCause() : t;</span><br><span class="line">            logger.error(<span class="string">&quot;Error when updating flow rules, app=&#123;&#125;, ip=&#123;&#125;, ruleId=&#123;&#125;&quot;</span>, entity.getApp(),</span><br><span class="line">                entity.getIp(), id, e);</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete.json&quot;)</span></span><br><span class="line">    <span class="meta">@AuthAction(PrivilegeType.WRITE_RULE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;Long&gt; <span class="title">apiDeleteFlowRule</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, <span class="string">&quot;id can&#x27;t be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FlowRuleEntity oldEntity = repository.findById(id);</span><br><span class="line">        <span class="keyword">if</span> (oldEntity == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofSuccess(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            repository.delete(id);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            publishRules(oldEntity.getApp());</span><br><span class="line">            <span class="comment">//publishRules(oldEntity.getApp(), oldEntity.getIp(), oldEntity.getPort()).get(5000, TimeUnit.MILLISECONDS);</span></span><br><span class="line">            <span class="keyword">return</span> Result.ofSuccess(id);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            Throwable e = t <span class="keyword">instanceof</span> ExecutionException ? t.getCause() : t;</span><br><span class="line">            logger.error(<span class="string">&quot;Error when deleting flow rules, app=&#123;&#125;, ip=&#123;&#125;, id=&#123;&#125;&quot;</span>, oldEntity.getApp(),</span><br><span class="line">                oldEntity.getIp(), id, e);</span><br><span class="line">            <span class="keyword">return</span> Result.ofFail(-<span class="number">1</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private CompletableFuture&lt;Void&gt; publishRules(String app, String ip, Integer port) &#123;</span></span><br><span class="line"><span class="comment">//        List&lt;FlowRuleEntity&gt; rules = repository.findAllByMachine(MachineInfo.of(app, ip, port));</span></span><br><span class="line"><span class="comment">//        return sentinelApiClient.setFlowRuleOfMachineAsync(app, ip, port, rules);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">publishRules</span><span class="params">(<span class="comment">/*@NonNull*/</span> String app)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;FlowRuleEntity&gt; rules = repository.findAllByApp(app);</span><br><span class="line">        rulePublisher.publish(app, rules);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，**<font color='red'>Sentinel控制台流控规则</font>**的改造结束！其他规则的修改可以参照此来进行修改：</p><p>具体代码请参考：<a href="http://gitee.com/cheng_qiwei/blog/raw/master/file/sentinel-dashboard.rar">http://gitee.com/cheng_qiwei/blog/raw/master/file/sentinel-dashboard.rar</a></p><h2 id="Sentinel服务配置"><a href="#Sentinel服务配置" class="headerlink" title="Sentinel服务配置"></a>Sentinel服务配置</h2><h3 id="修改pom文件-1"><a href="#修改pom文件-1" class="headerlink" title="修改pom文件"></a>修改pom文件</h3><p>添加四个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  sentinel核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  sentinel AspectJ 的扩展用于自动定义资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- sentinel客户端与dashboard通信依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-transport-simple-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改yml文件"><a href="#修改yml文件" class="headerlink" title="修改yml文件"></a>修改yml文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.197</span><span class="number">.132</span><span class="string">:80,192.168.197.132:81</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">192.168</span><span class="number">.197</span><span class="number">.132</span><span class="string">:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="attr">client-ip:</span> <span class="number">192.168</span><span class="number">.136</span><span class="number">.4</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">flow:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.197</span><span class="number">.132</span><span class="string">:80</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">$&#123;spring.application.name&#125;-flow-rules</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">SENTINEL_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line">        <span class="attr">param:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.197</span><span class="number">.132</span><span class="string">:80</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">$&#123;spring.application.name&#125;-param-rules</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">SENTINEL_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">param</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609061203202.png" alt="1609061203202"></p><p>主要添加上图内容，如果还有其他规则，则需要添加对应的上图内容即可。</p><h3 id="配置NacosSentinelConfig"><a href="#配置NacosSentinelConfig" class="headerlink" title="配置NacosSentinelConfig"></a>配置NacosSentinelConfig</h3><p><font color='red'>配置该文件的功能是将Sentinel默认通过内存获取规则修改为从nacos上面获取对应规则</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.cloud.alibaba.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.datasource.AbstractDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.datasource.ReadableDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.datasource.nacos.NacosDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.init.InitFunc;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.TypeReference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosSentinelConfig</span></span>&#123;</span><br><span class="line">    <span class="comment">/**配置流控规则从nacos获取*/</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initFlowDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String serverAddr = <span class="string">&quot;192.168.197.132:80&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String groupId = <span class="string">&quot;SENTINEL_GROUP&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String dataId = <span class="string">&quot;cloudalibaba-sentinel-service-flow-rules&quot;</span>;</span><br><span class="line"></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; readableFlowDataSource = <span class="keyword">new</span> NacosDataSource&lt;&gt;(</span><br><span class="line">                serverAddr,</span><br><span class="line">                groupId,</span><br><span class="line">                dataId,</span><br><span class="line">                source -&gt; JSONObject.parseObject(source,<span class="keyword">new</span> TypeReference&lt;List&lt;FlowRule&gt;&gt;()&#123;&#125;)</span><br><span class="line">        );</span><br><span class="line">        FlowRuleManager.register2Property(readableFlowDataSource.getProperty());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**配置热点参数规则从nacos获取*/</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initParamDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String serverAddr = <span class="string">&quot;192.168.197.132:80&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String groupId = <span class="string">&quot;SENTINEL_GROUP&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String dataId = <span class="string">&quot;cloudalibaba-sentinel-service-param-rules&quot;</span>;</span><br><span class="line"></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;ParamFlowRule&gt;&gt; readableFlowDataSource = <span class="keyword">new</span> NacosDataSource&lt;&gt;(</span><br><span class="line">                serverAddr,</span><br><span class="line">                groupId,</span><br><span class="line">                dataId,</span><br><span class="line">                source -&gt; JSONObject.parseObject(source,<span class="keyword">new</span> TypeReference&lt;List&lt;ParamFlowRule&gt;&gt;()&#123;&#125;)</span><br><span class="line">        );</span><br><span class="line">        ParamFlowRuleManager.register2Property(readableFlowDataSource.getProperty());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**配置系统参数规则从nacos获取*/</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initSystemDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String serverAddr = <span class="string">&quot;192.168.197.132:80&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String groupId = <span class="string">&quot;SENTINEL_GROUP&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String dataId = <span class="string">&quot;cloudalibaba-sentinel-service-system-rules&quot;</span>;</span><br><span class="line"></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;SystemRule&gt;&gt; readableFlowDataSource = <span class="keyword">new</span> NacosDataSource&lt;&gt;(</span><br><span class="line">                serverAddr,</span><br><span class="line">                groupId,</span><br><span class="line">                dataId,</span><br><span class="line">                source -&gt; JSONObject.parseObject(source,<span class="keyword">new</span> TypeReference&lt;List&lt;SystemRule&gt;&gt;()&#123;&#125;)</span><br><span class="line">        );</span><br><span class="line">        SystemRuleManager.register2Property(readableFlowDataSource.getProperty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，Sentinel服务就修改结束。</p><h2 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h2><p>服务启动后，新增流控规则；</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609061599958.png" alt="1609061599958"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609061646460.png" alt="1609061646460"></p><p>我们可以从nacos看见配置文件，里面已经把我们的Sentinel配置写进来了；</p><p>我们再测试 /testA 接口，流控规则生效，配置成功，至此，我们的流控规则持久化已经成功了。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609061754780.png" alt="1609061754780"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloudAlibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sentinel </tag>
            
            <tag> SpringCloudAlibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel的介绍与使用（一）</title>
      <link href="/blog/2021/03/18/Sentinel%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/blog/2021/03/18/Sentinel%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Sentinel的介绍与使用（一）"><a href="#Sentinel的介绍与使用（一）" class="headerlink" title="Sentinel的介绍与使用（一）"></a>Sentinel的介绍与使用（一）</h1><h1 id="Sentinel的介绍"><a href="#Sentinel的介绍" class="headerlink" title="Sentinel的介绍"></a>Sentinel的介绍</h1><h2 id="什么是Sentinel？"><a href="#什么是Sentinel？" class="headerlink" title="什么是Sentinel？"></a>什么是Sentinel？</h2><p>​        Sentinel是阿里开源的项目，主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助用户提升服务的稳定性。</p><p>中文官网路径：<a href="http://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">http://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p><h2 id="Sentinel的主要特性"><a href="#Sentinel的主要特性" class="headerlink" title="Sentinel的主要特性"></a>Sentinel的主要特性</h2><p><img src="http://cheng_qiwei.gitee.io/blog/img/clipboard-1607525217544-1607609884850.png" alt="img"></p><h1 id="Sentinel的安装"><a href="#Sentinel的安装" class="headerlink" title="Sentinel的安装"></a>Sentinel的安装</h1><p>文件下载路径：[<a href="http://github.com/alibaba/Sentinel/releases]">http://github.com/alibaba/Sentinel/releases]</a></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/clipboard-1607525280457-1607609890089.png" alt="img"></p><p>Sentinel本身是一个java项目，所以要求安装Java环境，使用命令启动即可。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar sentinel-dashboard-1.8.0.jar  &gt; log.file  2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>注意：Sentinel的默认端口号是：8080，所以需要开放端口访问限制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//开放指定端口 </span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent </span><br><span class="line">//重新加载防火墙 </span><br><span class="line">firewall-cmd --reload </span><br></pre></td></tr></table></figure><p>成功的话，访问：<a href="http://ip:8080/">http://IP:8080</a> 即可显示以下页面</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/clipboard-1607609875746.png" alt="img"></p><h1 id="Sentinel的流量控制"><a href="#Sentinel的流量控制" class="headerlink" title="Sentinel的流量控制"></a>Sentinel的流量控制</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>流量控制</strong>（flow control），其原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p><p>​        一条限流规则主要由下面几个因素组成，我们可以组合这些元素来实现不同的限流效果：</p><p>a、resource：资源名，即限流规则的作用对象；</p><p>b、count: 限流阈值；</p><p>c、grade: 限流阈值类型（QPS 或并发线程数）；</p><p>​        QPS：每秒请求数，当前调用该api的QPS到达阈值的时候进行限流；</p><p>​        线程数：当调用该api的线程数到达阈值的时候，进行限流；</p><p>d、limitApp: 流控针对的调用来源，若为 default 则不区分调用来源；</p><p>e、strategy: 调用关系限流策略；</p><p>​        直接：当api大达到限流条件时，直接限流；</p><p>​        关联：当关联的资源到达阈值，就限流自己；</p><p>​        链路：只记录指定路上的流量，指定资源从入口资源进来的流量，如果达到阈值，就进行限流，api级别的限流；</p><p>f、controlBehavior: 流量控制效果（直接拒绝、Warm Up、匀速排队）；</p><p>​        直接拒绝：超过设置的阈值，将直接返回默认错误；</p><p>​        Warm Up：预热模式，当流量突然增大时（例如双十一等大型活动），我们希望系统从空闲状态慢慢切换到繁忙状态，经过预定的时间后，到达处理这个请求数的最大值；</p><p>​        匀速排队：严格控制请求通过的间隔时间，使请求匀速通过，这种方式主要用于处理间隔性突发的流量（如：消息队列），在某一秒会出现大量请求，而在接下来一段时间会出现空闲，所以我们可以在接下来的时间处理这些请求，而不是直接拒绝多余的请求。</p><p><font color='red'> 注意事项：</font></p><p>​        <font color='red'>a、使用匀速排队时限流阈值类型必须选择QPS；</font></p><p>​        <font color='red'>b、使用匀速排队时不支持 QPS &gt; 1000 的场景。</font></p><h2 id="流量控制体验"><a href="#流量控制体验" class="headerlink" title="流量控制体验"></a>流量控制体验</h2><h3 id="编写测试工程"><a href="#编写测试工程" class="headerlink" title="编写测试工程"></a>编写测试工程</h3><h4 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20200704<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cheng.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-sentinel-test9003<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yml文件"><a href="#yml文件" class="headerlink" title="yml文件"></a>yml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9003</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloudalibaba-sentinel-service</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 192.168.197.132:80,192.168.197.132:81</span><br><span class="line">    sentinel:</span><br><span class="line">      transport:</span><br><span class="line">        dashboard: 192.168.197.132:8080</span><br><span class="line">#    port: 8719 #默认8719，假如被占用了会自动从8719开始依次+1扫描。直至找到未被占用的端口</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &#x27;*&#x27;</span><br></pre></td></tr></table></figure><h4 id="启动类文件"><a href="#启动类文件" class="headerlink" title="启动类文件"></a>启动类文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.cheng.cloud.alibaba;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class SentinelApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SentinelApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="业务类文件"><a href="#业务类文件" class="headerlink" title="业务类文件"></a>业务类文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.cheng.cloud.alibaba.rest;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class FlowLimitController &#123;</span><br><span class="line">    @GetMapping(&quot;/testA&quot;)</span><br><span class="line">    public String testA() &#123;</span><br><span class="line">        return &quot;------testA&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/testB&quot;)</span><br><span class="line">    public String testB() &#123;</span><br><span class="line">        return &quot;------testB&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写完成后，启动项目</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607529807085-1607609863773.png" alt="1607529807085"></p><p>​        但是，我们发现，无论如何刷新，Sentinel的页面并没有显示我们的项目</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607529867022-1607609859326.png" alt="1607529867022"></p><p>​        这是因为Sentinel采用了懒加载，所以需要我们进行激活，激活的方式是调用任意接口一次即可。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607530275224-1607609856121.png" alt="1607530275224"></p><h3 id="流控模式——QPS直接快速失败"><a href="#流控模式——QPS直接快速失败" class="headerlink" title="流控模式——QPS直接快速失败"></a>流控模式——QPS直接快速失败</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607609798330.png" alt="1607609798330"></p><p>新增成功后的展示内容如下：</p><p>​        当前的规则是每秒只允许 /testA 接口被调用一次。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607609964963.png" alt="1607609964963"></p><p>测试：</p><p>​        每秒仅调用一次 /testA 接口就正常，当频繁快速点击调用 /testA 接口则失败</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607610198022.png" alt="1607610198022"></p><h3 id="流控模式——线程直接快速失败"><a href="#流控模式——线程直接快速失败" class="headerlink" title="流控模式——线程直接快速失败"></a>流控模式——线程直接快速失败</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607610945394.png" alt="1607610945394"></p><p>新增成功后的展示内容如下：</p><p>​        当前的规则是只允许 /testB 接口被最多一个线程调用。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607610979813.png" alt="1607610979813"></p><p>​        线程数的限制：比如a请求过来,处理很慢,在一直处理,此时b请求又过来了，此时因为a占用一个线程,此时要处理b请求就只有额外开启一个线程，那么就会报错。</p><p>测试：</p><p>​        我们修改一下 /testB 接口 ，模拟接口调用很慢的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testB&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        接下来，我们同时打开两个窗口，注意需要两个浏览器，同一个浏览器有时候会没有效果，调用接口，先调用的接口会响应结果，后面的直接报错。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607612220131.png" alt="1607612220131"></p><h3 id="流控模式——QPS关联快速失败"><a href="#流控模式——QPS关联快速失败" class="headerlink" title="流控模式——QPS关联快速失败"></a>流控模式——QPS关联快速失败</h3><p>​        关联：当关联的资源到达阈值，就限流自己；例如：当与A关联的B达到阈值之后，就限流A自己</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607613235033-1607756847329.png" alt="1607613235033"></p><p>​        当前的规则是当 /testA 接口的请求qps大于1时，就让 /testB 之后的请求直接失败。</p><p>测试：</p><p>​        我们使用postman或JMenter模拟频繁调用 /testA 接口的情况导致 /testA 接口的qps达到阈值，此时，我们调用 /testB 接口，此时，/testB 接口访问失败。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607757756939.png" alt="1607757756939"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607757797854.png" alt="1607757797854"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607757824972.png" alt="1607757824972"></p><h3 id="流控模式——QPS链路快速失败"><a href="#流控模式——QPS链路快速失败" class="headerlink" title="流控模式——QPS链路快速失败"></a>流控模式——QPS链路快速失败</h3><p>​    链路流控模式指的是，当从某个接口过来的资源达到限流条件时，开启限流；它的功能有点类似于针对来源配置项，区别在于：针对来源是针对上级微服务，而链路流控是针对上级接口，也就是说它的粒度更细；</p><h4 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><h5 id="新增Service接口及其实现"><a href="#新增Service接口及其实现" class="headerlink" title="新增Service接口及其实现"></a>新增Service接口及其实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line"><span class="keyword">import</span> com.cheng.cloud.alibaba.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;getOrder&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(<span class="keyword">new</span> Random().nextInt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="controller新增一个接口，调用上面service的方法"><a href="#controller新增一个接口，调用上面service的方法" class="headerlink" title="controller新增一个接口，调用上面service的方法"></a>controller新增一个接口，调用上面service的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/test1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> orderService.getOrder();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;---/test1  id != 1&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607764678542.png" alt="1607764678542"></p><p>​        当前的规则是当 service中的getOrder 接口的请求qps大于1时，就让 /test1 之后的请求直接失败。</p><p>测试：</p><p>​        我们使用postman或JMenter模拟频繁调用 /test1 接口的情况导致 /test1 接口的qps达到阈值，此时，我们调用 /test1 接口，此时，/test1 接口访问失败。</p><p>​        but，测试时我们发现并没有效果   o(╥﹏╥)o</p><p>​        这是因为在在spring-cloud-alibaba v2.1.1.RELEASE及前，Sentinel1.7.0及后，关闭了URL PATH聚合，所以需要我们开启才能生效。【当前使用的是spring-cloud-alibaba v2.1.1.RELEASE和Sentinel1.8.0】</p><h4 id="开启方式："><a href="#开启方式：" class="headerlink" title="开启方式："></a>开启方式：</h4><h5 id="配置文件中关闭sentinel的CommonFilter实例化【默认是true，修改为false】"><a href="#配置文件中关闭sentinel的CommonFilter实例化【默认是true，修改为false】" class="headerlink" title="配置文件中关闭sentinel的CommonFilter实例化【默认是true，修改为false】"></a>配置文件中关闭sentinel的CommonFilter实例化【默认是true，修改为false】</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.sentinel.filter.enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><h5 id="添加一个配置类，自己构建CommonFilter实例"><a href="#添加一个配置类，自己构建CommonFilter实例" class="headerlink" title="添加一个配置类，自己构建CommonFilter实例"></a>添加一个配置类，自己构建CommonFilter实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.servlet.CommonFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@NOTE</span> 在spring-cloud-alibaba v2.1.1.RELEASE及前，sentinel1.7.0及后，关闭URL PATH聚合需要通过该方式，spring-cloud-alibaba v2.1.1.RELEASE后，可以通过配置关闭：spring.cloud.sentinel.web-context-unify=false</span></span><br><span class="line"><span class="comment">     * 手动注入Sentinel的过滤器，关闭Sentinel注入CommonFilter实例，修改配置文件中的 spring.cloud.sentinel.filter.enabled=false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">sentinelFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> CommonFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 入口资源关闭聚合</span></span><br><span class="line">        registration.addInitParameter(CommonFilter.WEB_CONTEXT_UNIFY, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        registration.setName(<span class="string">&quot;sentinelFilter&quot;</span>);</span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>        注意：这里spring-cloud-alibaba v2.1.0.RELEASE并没有CommonFilter.WEB_CONTEXT_UNIFY这个选项，所以请修改为2.1.1版本，如果你使用更新的spring-cloud-alibaba版本，在配置文件下就可以直接进行配置spring.cloud.sentinel.web-context-unify的属性为false，并引入sentinel-web-servlet的包【1.7.0版本】即可。</font></p><p>重新测试</p><p>​        当我们频繁调用/test1?id=1时，达到阈值后会产生异常</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607766159350.png" alt="1607766159350"></p><p>​        而当我们使用其他id时，由于不走getOrder的方法，所以不会产生限流的效果</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607766252450.png" alt="1607766252450"></p><h3 id="流控模式——QPS直接Warm-up"><a href="#流控模式——QPS直接Warm-up" class="headerlink" title="流控模式——QPS直接Warm up"></a>流控模式——QPS直接Warm up</h3><p>​        Warm up：预热、冷加载，经过预热时长后才会达到阈值，当系统长时间处于低请求的情况下，当流量突然瞬间增加时，直接把系统拉升到高水位可能使系统直接崩溃，通过冷加载的方式启动，使流量慢慢增加，到达一定时间后达到阈值，对系统比较友好。起始阈值计算公式：阈值/冷加载因子coldFactor(默认值为3)。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607767547432.png" alt="1607767547432"></p><p>​        当前的规则是当 /testA 接口刚开始的请求qps大于2时，就让 /test1 之后的请求直接失败，经过5秒后，最大qps请求数为6。</p><p>测试：</p><p>​        我们该开始快速请求  /testA 接口时，由于冷加载的原因，最大的阈值是2，所以请求偶尔会出现失败的情况，当随着请求时间的增加，慢慢的请求失败次数降低，到了5s的时候，由于阈值达到了最大值6，所以几乎不会出现失败的情况</p><h3 id="流控模式——QPS直接排队等待"><a href="#流控模式——QPS直接排队等待" class="headerlink" title="流控模式——QPS直接排队等待"></a>流控模式——QPS直接排队等待</h3><p>​        排队等待：让请求以均匀的速度通过，每秒最多请求阈值数量的请求，其他请求进入等待状态，超过最大等待时间之后则返回失败（底层使用漏桶算法）。这种方式主要应用于处理间隔性突发的流量，例如消息队列，假设在某一秒有大量的请求进来，而接下来会有一段时间处于空闲期，我们希望系统能够在接下来的时间逐渐处理这些请求而不是在第一秒就直接拒绝这些请求。</p><p><font color='red'>注意：排队等待仅支持QPS，并不支持线程数。</font></p><p>​        新增测试方法 /test2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       logger.info(Thread.currentThread().getName()+<span class="string">&quot;  ...test2!&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;---/test2&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607847380859.png" alt="1607847380859"></p><p>​        当前的规则是当 /test2 接口有大量请求进来时，我们每秒仅处理一个请求，其它请求进入等待中，当等待时间超过20s之后，返回失败。</p><p>测试：</p><p>​        快速请求 /test2 接口，查看控制台，我们发现，每秒仅处理一个请求</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607847610188.png" alt="1607847610188"></p><h1 id="Sentinel的熔断降级"><a href="#Sentinel的熔断降级" class="headerlink" title="Sentinel的熔断降级"></a>Sentinel的熔断降级</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>​        除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p><p>​        现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p><p>​        <font color='red'><strong>注意</strong>：本文档针对 Sentinel 1.8.0 及以上版本。1.8.0 版本对熔断降级特性进行了全新的改进升级，请使用最新版本以更好地利用熔断降级的能力。</font></p><h2 id="Sentinel的熔断策略"><a href="#Sentinel的熔断策略" class="headerlink" title="Sentinel的熔断策略"></a>Sentinel的熔断策略</h2><h3 id="慢调用比例-SLOW-REQUEST-RATIO"><a href="#慢调用比例-SLOW-REQUEST-RATIO" class="headerlink" title="慢调用比例 (SLOW_REQUEST_RATIO)"></a><strong>慢调用比例 (SLOW_REQUEST_RATIO)</strong></h3><p>​        选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</p><h4 id="熔断条件"><a href="#熔断条件" class="headerlink" title="熔断条件"></a>熔断条件</h4><p>​        a、请求数目大于设置的最小请求数目；</p><p>​        b、慢调用的比例大于阈值。</p><h4 id="1-8-升级内容"><a href="#1-8-升级内容" class="headerlink" title="1.8 升级内容"></a>1.8 升级内容</h4><p>​            Sentinel在1.8.0版本对熔断降级做了大的调整，可以定义任意时长的熔断时间，引入了半开启恢复支持。熔断状态由原来只有OPEN、CLOSED两种状态修改为OPEN、HALF_OPEN、CLOSED三种状态</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607957908820.png" alt="1607957908820"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607957790395.png" alt="1607957790395"></p><p>​        1.7.0版本中的RT对应1.8.0版本中的最大RT，1.7.0版本中的时间窗口对应1.8.0版本中的熔断时长，1.7.0版本中的最小请求数固定是5，而对应1.8.0版本中的最小请求数可以进行自定义，1.8.0版本中新增比例阈值，具体属性定义在下表：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607957994736.png" alt="1607957994736"></p><h4 id="执行逻辑"><a href="#执行逻辑" class="headerlink" title="执行逻辑"></a>执行逻辑</h4><p>​        <strong>a、熔断（OPEN）：请求数大于最小请求数并且慢调用的比率大于比例阈值则发生熔断</strong>，熔断时长为用户自定义设置；</p><p>​        <strong>b、探测（HALFOPEN）</strong>：当熔断过了定义的熔断时长，状态由熔断（OPEN）变为探测（HALFOPEN）；</p><p>​        c、如果接下来的一个请求小于最大RT，说明慢调用已经恢复，结束熔断，状态由探测（HALF_OPEN）变更为关闭（CLOSED）；</p><p>​        d、如果接下来的一个请求大于最大RT，说明慢调用未恢复，继续熔断，熔断时长保持一致。</p><p>​        注意：Sentinel默认统计的RT上限是4900ms，超出此阈值的都会算作4900ms，若需要变更此上限可以通过启动配置项-Dcsp.sentinel.statistic.max.rt=xxx来配置。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>​        a、添加测试代码   /testC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testC&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">&quot;...testC!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;---/testC&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        b、添加降级配置</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607960194780.png" alt="1607960194780"></p><p>​        当前配置的规则是：允许每个请求消耗的最长时间为200毫秒，当超过时认定为慢调用，当每秒最小请求数大于5，且慢调用比例大于80%时，接下来1秒钟熔断，由于我们在测试方法中设置了等待1秒钟，所以所有请求都是慢调用，所以我们再进行请求时会触发熔断。</p><p>​        我们使用Jmeter来模拟调用【每秒请求10次】</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607960486159.png" alt="1607960486159"></p><p>​        我们可以看到当Jmeter开始启动时，由于每次请求都是超时（超过80%）且每秒请求数为10，符合慢调用熔断的规则，所以我们的接口就被熔断了，当关闭Jmeter测试后，我们再访问接口，请求成功。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607960562938.png" alt="1607960562938"></p><h3 id="异常比例-ERROR-RATIO"><a href="#异常比例-ERROR-RATIO" class="headerlink" title="异常比例 (ERROR_RATIO)"></a><strong>异常比例 (ERROR_RATIO)</strong></h3><p>​        当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</p><h4 id="熔断条件-1"><a href="#熔断条件-1" class="headerlink" title="熔断条件"></a>熔断条件</h4><p>​        a、请求数目大于设置的最小请求数目；</p><p>​        b、异常调用的比例大于阈值。</p><h4 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607961669359.png" alt="1607961669359"></p><h4 id="执行逻辑-1"><a href="#执行逻辑-1" class="headerlink" title="执行逻辑"></a>执行逻辑</h4><p>​        <strong>a、熔断（OPEN）：当请求数大于最小请求并且异常比例大于设置的阈值时触发熔断</strong>，熔断时长由用户设置；</p><p>​        <strong>b、探测（HALFOPEN）</strong>：当超过熔断时长时，由熔断（OPEN）转为探测（HALFOPEN）；</p><p>​        c、如果接下来的一个请求未发生错误，说明应用恢复，结束熔断，状态由探测（HALF_OPEN）变更为关闭（CLOSED）；</p><p>​        d、如果接下来的一个请求继续发生错误，说明应用未恢复，继续熔断，熔断时长保持一致。</p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>​        a、添加测试代码   /testD</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testD&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>; </span><br><span class="line">        logger.info(<span class="string">&quot;  ...testD!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;---/testD&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        b、添加降级配置</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607962634855.png" alt="1607962634855"></p><p>​        当前的规则是：允许所有请求的异常比例为30%，当超过时认定为异常接口，当每秒最小请求数大于5，且异常比例大于30%时，接下来5秒钟熔断，由于我们在测试方法中设置了by zero的异常，所以所有请求都是异常请求，所以我们再进行请求时会触发熔断。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607963035797.png" alt="1607963035797"></p><p>​        我们依然使用Jmeter进行测试，测试方法同上。</p><p>​        我们可以看到当Jmeter开始启动时，由于每次请求都是异常（超过30%）且每秒请求数为10，符合异常比例熔断的规则，所以我们的接口就被熔断了，当关闭Jmeter测试后，我们再访问接口，请求成功。且这里测试过，我们的熔断时间为5s，当我们停止Jmeter之后立刻测试接口，接口会返回by zero的异常，这是因为两个条件之中的每秒最小请求数大于5的条件失效了，所以熔断效果不起作用了。</p><h3 id="异常数-ERROR-COUNT"><a href="#异常数-ERROR-COUNT" class="headerlink" title="异常数 (ERROR_COUNT)"></a><strong>异常数 (ERROR_COUNT)</strong></h3><p>​        当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p><h4 id="熔断条件-2"><a href="#熔断条件-2" class="headerlink" title="熔断条件"></a>熔断条件</h4><p>​        a、请求数目大于设置的最小请求数目；</p><p>​        b、异常调用的数目大于阈值。</p><h4 id="配置参数-1"><a href="#配置参数-1" class="headerlink" title="配置参数"></a>配置参数</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/1608047548622.png" alt="1608047548622"></p><h4 id="执行逻辑-2"><a href="#执行逻辑-2" class="headerlink" title="执行逻辑"></a>执行逻辑</h4><p>​        <strong>a、熔断（OPEN）：当请求数大于最小请求并且异常数量大于设置的阈值时触发熔断</strong>，熔断时长由用户设置；</p><p>​        <strong>b、探测（HALFOPEN）</strong>：当超过熔断时长时，由熔断（OPEN）转为探测（HALFOPEN）；</p><p>​        c、如果接下来的一个请求未发生错误，说明应用恢复，结束熔断，状态由探测（HALF_OPEN）变更为关闭（CLOSED）；</p><p>​        d、如果接下来的一个请求继续发生错误，说明应用未恢复，继续熔断，熔断时长保持一致。</p><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><p>​        a、测试代码依然使用  /testD</p><p>​        b、添加降级配置</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1608047915674.png" alt="1608047915674"></p><p>​        当前的规则是：在60s内，当达到最小请求数5，且发生异常的请求数大于6个时，发生熔断，由于我们在测试方法中设置了by zero的异常，所以所有请求都是异常请求，所以当我们请求6次后，会触发熔断。</p><p>1-6次返回</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1608048137053.png" alt="1608048137053"></p><p>第7次及之后一分钟内的请求</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1608048142861.png" alt="1608048142861"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloudAlibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sentinel </tag>
            
            <tag> SpringCloudAlibaba </tag>
            
            <tag> 熔断降级 </tag>
            
            <tag> 流量控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装软件</title>
      <link href="/blog/2021/03/15/Linux%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
      <url>/blog/2021/03/15/Linux%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux安装软件"><a href="#Linux安装软件" class="headerlink" title="Linux安装软件"></a>Linux安装软件</h1><h1 id="Linux安装mysql"><a href="#Linux安装mysql" class="headerlink" title="Linux安装mysql"></a>Linux安装mysql</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203094022147.png" alt="image-20210203094022147"></p><p>下载完成后，放入Linux环境</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="检测环境是否自带mysql，有的话强制卸载"><a href="#检测环境是否自带mysql，有的话强制卸载" class="headerlink" title="检测环境是否自带mysql，有的话强制卸载"></a>检测环境是否自带mysql，有的话强制卸载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mysql</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps mysql-libs-5.1.52-1.el6_0.1.x86_64(对应包名)</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203094806691.png" alt="image-20210203094806691"></p><h3 id="检测环境是否自带mariadb，有的话强制卸载"><a href="#检测环境是否自带mariadb，有的话强制卸载" class="headerlink" title="检测环境是否自带mariadb，有的话强制卸载"></a>检测环境是否自带mariadb，有的话强制卸载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mariadb</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64(对应包名)</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203094932667.png" alt="image-20210203094932667"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="解压安装包到指定目录"><a href="#解压安装包到指定目录" class="headerlink" title="解压安装包到指定目录"></a>解压安装包到指定目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure><h3 id="将mysql的文件名进行修改"><a href="#将mysql的文件名进行修改" class="headerlink" title="将mysql的文件名进行修改"></a>将mysql的文件名进行修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mysql-5.7.28-linux-glibc2.12-x86_64 mysql-5.7.28</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203095720658.png" alt="image-20210203095720658"></p><h3 id="检查mysql组和用户是否存在，如果没有则创建"><a href="#检查mysql组和用户是否存在，如果没有则创建" class="headerlink" title="检查mysql组和用户是否存在，如果没有则创建"></a>检查mysql组和用户是否存在，如果没有则创建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group|grep mysql</span><br><span class="line"></span><br><span class="line">groupadd mysql</span><br><span class="line"></span><br><span class="line">useradd -r -g mysql mysql　　#useradd -r参数表示mysql用户是系统用户，不可用于登录系统</span><br></pre></td></tr></table></figure><h3 id="创建data目录"><a href="#创建data目录" class="headerlink" title="创建data目录"></a>创建data目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd mysql-5.7.28</span><br><span class="line"></span><br><span class="line">mkdir data</span><br></pre></td></tr></table></figure><h3 id="将-usr-local-mysql-5-7-28的所有者及所属组改为mysql"><a href="#将-usr-local-mysql-5-7-28的所有者及所属组改为mysql" class="headerlink" title="将/usr/local/mysql-5.7.28的所有者及所属组改为mysql"></a>将/usr/local/mysql-5.7.28的所有者及所属组改为mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql.mysql /usr/local/mysql-5.7.28</span><br></pre></td></tr></table></figure><h3 id="在-usr-local-mysql-5-7-28-support-files目录下创建my-default-cnf"><a href="#在-usr-local-mysql-5-7-28-support-files目录下创建my-default-cnf" class="headerlink" title="在/usr/local/mysql-5.7.28/support-files目录下创建my_default.cnf"></a>在/usr/local/mysql-5.7.28/support-files目录下创建my_default.cnf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vim support-files/my_default.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置mysql的安装目录</span></span><br><span class="line">basedir =/usr/local/mysql-5.7.28</span><br><span class="line"><span class="meta">#</span><span class="bash">设置mysql数据库的数据存放目录</span></span><br><span class="line">datadir = /usr/local/mysql-5.7.28/data</span><br><span class="line"><span class="meta">#</span><span class="bash">设置端口</span></span><br><span class="line">port = 3306</span><br><span class="line"></span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line"><span class="meta">#</span><span class="bash">设置字符集</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line"><span class="meta">#</span><span class="bash">日志存放目录</span></span><br><span class="line">log-error = /usr/local/mysql-5.7.28/data/mysqld.log</span><br><span class="line">pid-file = /usr/local/mysql-5.7.28/data/mysqld.pid</span><br><span class="line"><span class="meta">#</span><span class="bash">允许时间类型的数据为零(去掉NO_ZERO_IN_DATE,NO_ZERO_DATE)</span></span><br><span class="line">sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line"><span class="meta">#</span><span class="bash">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span></span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203104420394.png" alt="image-20210203104420394"></p><p>拷贝到/etc/my.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp support-files/my_default.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure><h3 id="初始化Mysql"><a href="#初始化Mysql" class="headerlink" title="初始化Mysql"></a>初始化Mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql-5.7.28/ --datadir=/usr/local/mysql-5.7.28/data/</span><br><span class="line">初始化完成后，查看日志，如图，红框处为密码</span><br><span class="line">cat /usr/local/mysql-5.7.28/data/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203105340009.png" alt="image-20210203105340009"></p><h3 id="把启动脚本放到开机初始化目录"><a href="#把启动脚本放到开机初始化目录" class="headerlink" title="把启动脚本放到开机初始化目录"></a>把启动脚本放到开机初始化目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp support-files/mysql.server /etc/init.d/mysql</span><br></pre></td></tr></table></figure><h3 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203105834846.png" alt="image-20210203105834846"></p><h3 id="进入mysql并更改密码，初始密码为1-3-7红框处"><a href="#进入mysql并更改密码，初始密码为1-3-7红框处" class="headerlink" title="进入mysql并更改密码，初始密码为1.3.7红框处"></a>进入mysql并更改密码，初始密码为1.3.7红框处</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">./bin/mysql -u root -p</span><br><span class="line"></span><br><span class="line">-- 修改密码</span><br><span class="line"></span><br><span class="line">set password=password(&#x27;123456&#x27;);</span><br><span class="line"></span><br><span class="line">grant all privileges on *.* to root@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">-- 添加远程访问权限（这一步正常不需要）</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use mysql;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> update user <span class="built_in">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user = <span class="string">&#x27;root&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"></span><br><span class="line">如果更改时报错：ERROR 1062 (23000): Duplicate entry &#x27;%-root&#x27; for key &#x27;PRIMARY&#x27;，就先查询一下是否已更改，最后执行刷新。</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203110726831.png" alt="image-20210203110726831"></p><h3 id="修改完成后，退出重启mysql"><a href="#修改完成后，退出重启mysql" class="headerlink" title="修改完成后，退出重启mysql"></a>修改完成后，退出重启mysql</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203110801140.png" alt="image-20210203110801140"></p><h3 id="测试安装情况"><a href="#测试安装情况" class="headerlink" title="测试安装情况"></a>测试安装情况</h3><h4 id="a、开放端口"><a href="#a、开放端口" class="headerlink" title="a、开放端口"></a>a、开放端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203111019106.png" alt="image-20210203111019106"></p><h4 id="b、使用连接工具连接"><a href="#b、使用连接工具连接" class="headerlink" title="b、使用连接工具连接"></a>b、使用连接工具连接</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203113223908.png" alt="image-20210203113223908"></p><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><h3 id="复制mysql-server"><a href="#复制mysql-server" class="headerlink" title="复制mysql.server"></a>复制mysql.server</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/mysql-5.7.28/support-files/mysql.server /etc/rc.d/init.d/mysqld                           </span><br></pre></td></tr></table></figure><h3 id="赋予可执行权限"><a href="#赋予可执行权限" class="headerlink" title="赋予可执行权限"></a>赋予可执行权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/init.d/mysqld</span><br></pre></td></tr></table></figure><h3 id="添加为服务"><a href="#添加为服务" class="headerlink" title="添加为服务"></a>添加为服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --add mysqld</span><br></pre></td></tr></table></figure><h3 id="查看服务列表"><a href="#查看服务列表" class="headerlink" title="查看服务列表"></a>查看服务列表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203113758438.png" alt="image-20210203113758438"></p><p>如果看到3、4、5状态为开或者为 on 则表示成功。如果是 关或者 off 则执行一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --level 345 mysqld on</span><br></pre></td></tr></table></figure><p>至此、Linux安装mysql结束</p><h1 id="Linux安装zookeeper"><a href="#Linux安装zookeeper" class="headerlink" title="Linux安装zookeeper"></a>Linux安装zookeeper</h1><h2 id="下载安装包-3-6-2为当前稳定版"><a href="#下载安装包-3-6-2为当前稳定版" class="headerlink" title="下载安装包(3.6.2为当前稳定版)"></a>下载安装包(3.6.2为当前稳定版)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.6.2/apache-zookeeper-3.6.2-bin.tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><h3 id="解压安装包到指定目录-并修改文件命名"><a href="#解压安装包到指定目录-并修改文件命名" class="headerlink" title="解压安装包到指定目录,并修改文件命名"></a>解压安装包到指定目录,并修改文件命名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxf apache-zookeeper-3.6.2-bin.tar.gz -C /usr/local</span><br><span class="line"></span><br><span class="line">mv cd /usr/local &amp;&amp; apache-zookeeper-3.6.2-bin/ zookeeper-3.6.2</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203115332142.png" alt="image-20210203115332142"></p><h3 id="复制zoo-sample-cfg为zoo-cfg"><a href="#复制zoo-sample-cfg为zoo-cfg" class="headerlink" title="复制zoo_sample.cfg为zoo.cfg"></a>复制zoo_sample.cfg为zoo.cfg</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/zookeeper-3.6.2/conf &amp;&amp; cp zoo_sample.cfg  zoo.cfg</span><br></pre></td></tr></table></figure><h3 id="修改zoo-cfg配置文件"><a href="#修改zoo-cfg配置文件" class="headerlink" title="修改zoo.cfg配置文件"></a>修改zoo.cfg配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/usr/local/zookeeper-3.6.2/data</span><br><span class="line">dataLogDir=/usr/local/zookeeper-3.6.2/log</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203134920805.png" alt="image-20210203134920805"></p><p><font color='red' size='4.5px'><strong>修改配置后需要在zookeeper-3.6.2目录下创建data和log两个文件夹来保存数据和日志</strong></font></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203135701077.png" alt="image-20210203135701077"></p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export ZOOKEEPER_INSTALL=/usr/local/zookeeper-3.6.2/</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_INSTALL/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203141417540.png" alt="image-20210203141417540"></p><h3 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh zkServer.sh start</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203141629244.png" alt="image-20210203141629244"></p><h3 id="查看zookeeper状态"><a href="#查看zookeeper状态" class="headerlink" title="查看zookeeper状态"></a>查看zookeeper状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh zkServer.sh status</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203141731035.png" alt="image-20210203141731035"></p><h3 id="查看zookeeper进程"><a href="#查看zookeeper进程" class="headerlink" title="查看zookeeper进程"></a>查看zookeeper进程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux|grep &#x27;zookeeper&#x27;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210203141819414.png" alt="image-20210203141819414"></p><h3 id="关闭zookeeper"><a href="#关闭zookeeper" class="headerlink" title="关闭zookeeper"></a>关闭zookeeper</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh zkServer.sh stop</span><br></pre></td></tr></table></figure><p>至此、Linux安装zookeeper结束</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
            <tag> mysql </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务和Alibaba Seata的介绍和使用</title>
      <link href="/blog/2021/03/15/Seata%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2021/03/15/Seata%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式事务和Alibaba-Seata的介绍和使用"><a href="#分布式事务和Alibaba-Seata的介绍和使用" class="headerlink" title="分布式事务和Alibaba  Seata的介绍和使用"></a>分布式事务和Alibaba  Seata的介绍和使用</h1><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><h2 id="什么是分布式事务？"><a href="#什么是分布式事务？" class="headerlink" title="什么是分布式事务？"></a>什么是分布式事务？</h2><p>&emsp;&emsp;在一次大的操作由不同的小的操作组成的，这些小的操作分布在不同的服务器上，分布式需要保证这些小操作要么全部成功，要么全部失败。本质上讲，分布式事务就是为了保证不同数据库的数据一致性。</p><h2 id="分布式事务产生的原因？"><a href="#分布式事务产生的原因？" class="headerlink" title="分布式事务产生的原因？"></a>分布式事务产生的原因？</h2><h3 id="原因一：数据库的分库分表"><a href="#原因一：数据库的分库分表" class="headerlink" title="原因一：数据库的分库分表"></a>原因一：数据库的分库分表</h3><p>&emsp;&emsp;当数据库单表数据超过千万级别，就需要考虑分库分表的问题，那么我们的系统就会从原来的一个数据库变成多个数据库，那么此时我们在同时操作多个数据库时，就需要保证数据的一致性，所以就需要使用分布式事务。</p><h3 id="原因二：应用SOA化"><a href="#原因二：应用SOA化" class="headerlink" title="原因二：应用SOA化"></a>原因二：应用SOA化</h3><p>&emsp;&emsp;所谓SOA化，就是业务的服务化。我们一个系统在访问量上去之后，我们会考虑把不同的功能放到不同的服务上面去运行，此时如果我们需要操作一连串功能，那么我们可能需要操作不同的服务，不同的数据库，为了保证数据的一致性，我们就需要使用分布式事务。</p><p>&emsp;&emsp;总结：不管是上面的那种方式，归根结底就是需要操作不同的数据库，为了保证数据的一致性，从而产生分布式事务。</p><h1 id="分布式理论"><a href="#分布式理论" class="headerlink" title="分布式理论"></a>分布式理论</h1><h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><p>&emsp;&emsp;CAP定理是由加州大学伯克利分校Eric Brewer教授提出来的，他指出WEB服务无法同时满足一下3个属性：</p><ul><li><p>一致性(Consistency) ： 客户端知道一系列的操作都会同时发生(生效)；</p></li><li><p>可用性(Availability) ： 每个操作都必须以可预期的响应结束；</p></li><li><p>分区容错性(Partition tolerance) ： 即使出现单个组件无法可用,操作依然可以完成。</p><p><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018071607.jpg" alt="img"></p></li></ul><h3 id="CAP属性解读"><a href="#CAP属性解读" class="headerlink" title="CAP属性解读"></a>CAP属性解读</h3><p>&emsp;&emsp;<strong>a、分区容错性</strong>：指的分布式系统中的某个节点或者网络分区出现了故障的时候，整个系统仍然能对外提供满足一致性和可用性的服务。也就是说部分故障不影响整体使用。</p><p>事实上我们在设计分布式系统是都会考虑到bug，硬件，网络等各种原因造成的故障，所以即使部分节点或者网络出现故障，我们要求整个系统还是要继续使用的。</p><p>(不继续使用,相当于只有一个分区,那么也就没有后续的一致性和可用性了)</p><p>&emsp;&emsp;<strong>b、可用性：</strong> 一直可以正常的做读写操作。简单而言就是客户端一直可以正常访问并得到系统的正常响应。用户角度来看就是不会出现系统操作失败或者访问超时等问题。</p><p>&emsp;&emsp;<strong>c、一致性</strong>：在分布式系统完成某写操作后任何读操作，都应该获取到该写操作写入的那个最新的值。相当于要求分布式系统中的各节点时时刻刻保持数据的一致性。</p><h3 id="一致性与可用性的矛盾"><a href="#一致性与可用性的矛盾" class="headerlink" title="一致性与可用性的矛盾"></a>一致性与可用性的矛盾</h3><p>&emsp;&emsp;一致性和可用性，为什么不可能同时成立？答案很简单，因为可能通信失败（即出现分区容错）。</p><p>&emsp;&emsp;我们举个例子，以下图为例：</p><p><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018071601.png" alt="img"></p><p>&emsp;&emsp;client修改G1中V0的数据为V1，按照正常情况下，修改之后，G1通知G2，V0修改为V1了，然后G2也同步修改为V1，name此时client读取G1或G2的数据都是V1；</p><p>&emsp;&emsp;但是，如果此时G1与G2之间的网络通信出现延迟或异常，那么G1中V0的数据为V1，但是G2还不知道，所以此时G2的数据还是V0</p><p>&emsp;&emsp;如果保证 G2 的一致性，那么 G1 必须在写操作时，锁定 G2 的读操作和写操作。只有数据同步后，才能重新开放读写。锁定期间，G2 不能读写，没有可用性。</p><p>&emsp;&emsp;如果保证 G2 的可用性，那么势必不能锁定 G2，所以一致性不成立。</p><p>&emsp;&emsp;综上所述，G2 无法同时做到一致性和可用性。系统设计时只能选择一个目标。如果追求一致性，那么无法保证所有节点的可用性；如果追求所有节点的可用性，那就没法做到一致性。这也是我们一直只看到只有AP或CP的选择，没有选择CA的操作，而且放弃分区容错性，也意味着放弃系统的扩展性，系统不再是分布式的，有违设计的初衷。</p><h3 id="CAP特性的取舍策略"><a href="#CAP特性的取舍策略" class="headerlink" title="CAP特性的取舍策略"></a>CAP特性的取舍策略</h3><p>&emsp;&emsp;a、满足AP舍弃C，也就是满足可用性和容错性，舍弃一致性。这也就是意味着你的系统在并发访问的时候可能会出现数据不一致的情况。事实证明，大多数都是牺牲了一致性。像12306还有淘宝网，就好比是你买火车票，本来你看到的是还有一张票，其实在这个时刻已经被买走了，你填好了信息准备买的时候发现系统提示你没票了，这就是牺牲了一致性。</p><p>&emsp;&emsp;b、满足CP舍弃A，也就是满足一致性和容错性，舍弃可用性。如果你的系统允许有段时间的访问失效等问题，这个是可以满足的（确实来讲用户体验会很差）。</p><h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><p>&emsp;&emsp;在上面CAP的介绍中，我们说CAP三者不能同时满足，而分区容错对于分布式系统来讲，是必须的，所以出现BASE理论。BASE理论如图相当于CAP中的AP。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/9825bc315c6034a8b7e1a56f6737965008237682.jpeg" alt="9825bc315c6034a8b7e1a56f6737965008237682"></p><h3 id="什么是BASE理论"><a href="#什么是BASE理论" class="headerlink" title="什么是BASE理论"></a>什么是BASE理论</h3><p>&emsp;&emsp;BASE理论是 Basically Available(基本可用)，Soft state（软状态）和 Eventually consistent（最终一致性）三个短语的缩写，来自 ebay 的架构师提出。他的核心思想是：即使无法做到强一致性（Strong Consistency，CAP 的一致性就是强一致性），但应用可以采用适合的方式达到<strong>最终一致性</strong>（Eventual Consitency）。</p><h4 id="基本可用性（Basically-Available）"><a href="#基本可用性（Basically-Available）" class="headerlink" title="基本可用性（Basically Available）"></a>基本可用性（Basically Available）</h4><p>&emsp;&emsp;基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性<font color='red'>（但请注意，这绝不等价于系统不可用，以下两个就是“基本可用”的典型例子）</font>。</p><ul><li>响应时间上的损失：正常情况下，一个在线搜索引擎需要0.5秒内返回给用户相应的查询结果，但由于出现异常（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了1~2秒。</li><li>功能上的损失：正常情况下，在一个电子商务网站上进行购物，消费者几乎能够顺利地完成每一笔订单，但是在一些节日大促购物高峰的时候，由于消费者的购物行为激增，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面。</li></ul><h4 id="软状态（Soft-state）"><a href="#软状态（Soft-state）" class="headerlink" title="软状态（Soft state）"></a>软状态（Soft state）</h4><p>&emsp;&emsp;软状态也称为弱状态，和硬状态相对，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步过程存在延时。</p><h4 id="最终一致性（Eventual-Consitency）"><a href="#最终一致性（Eventual-Consitency）" class="headerlink" title="最终一致性（Eventual Consitency）"></a>最终一致性（Eventual Consitency）</h4><p>&emsp;&emsp;最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</p><p>而在实际工程实践中，<strong>最终一致性分为 5 种：</strong></p><p><strong>a、因果一致性（Causal consistency）</strong></p><p>&emsp;&emsp;如果节点 A 在更新完某个数据后通知了节点 B，那么节点 B 之后对该数据的访问和修改都是基于 A 更新后的值。与此同时，和节点 A 无因果关系的节点 C 的数据访问则没有这样的限制。</p><p><strong>b、 读己之所写（Read your writes）</strong></p><p>&emsp;&emsp;这种就很简单了，节点 A 更新一个数据后，它自身总是能访问到自身更新过的最新值，而不会看到旧值。其实也算一种因果一致性。</p><p><strong>c、会话一致性（Session consistency）</strong></p><p>&emsp;&emsp;会话一致性将对系统数据的访问过程框定在了一个会话当中：系统能保证在同一个有效的会话中实现 “读己之所写” 的一致性，也就是说，执行更新操作之后，客户端能够在同一个会话中始终读取到该数据项的最新值。</p><p><strong>d、 单调读一致性（Monotonic read consistency）</strong></p><p>&emsp;&emsp;单调读一致性是指如果一个节点从系统中读取出一个数据项的某个值后，那么系统对于该节点后续的任何数据访问都不应该返回更旧的值。</p><p><strong>e、单调写一致性（Monotonic write consistency）</strong></p><p>&emsp;&emsp;指一个系统要能够保证来自同一个节点的写操作被顺序的执行。</p><p>&emsp;&emsp;然而，在实际的实践中，这 5 种系统往往会结合使用，以构建一个具有最终一致性的分布式系统。实际上，不只是分布式系统使用最终一致性，关系型数据库在某个功能上，也是使用最终一致性的，比如备份，数据库的复制过程是需要时间的，这个复制过程中，业务读取到的值就是旧的。当然，最终还是达成了数据一致性。这也算是一个最终一致性的经典案例。</p><p>&emsp;&emsp;总的来说，BASE 理论面向的是大型高可用可扩展的分布式系统，和传统事务的 ACID 是<strong>相反的</strong>，它完全不同于 ACID 的强一致性模型，而是<strong>通过牺牲强一致性</strong>来获得可用性，并允许数据在一段时间是不一致的。</p><h1 id="分布式事务的解决方案"><a href="#分布式事务的解决方案" class="headerlink" title="分布式事务的解决方案"></a>分布式事务的解决方案</h1><p><font size='5px'><strong>刚性事务</strong></font></p><h2 id="2PC（-XA-Transactions）"><a href="#2PC（-XA-Transactions）" class="headerlink" title="2PC（ XA Transactions）"></a>2PC（ XA Transactions）</h2><p>&emsp;&emsp;XA，是一个两阶段的提交协议，定义了事务管理器（Transaction Manager）和资源管理器（Resource Manager）之间的接口。通过引入协调者（Coordinator）来协调参与者的行为，并最终决定这些参与者是否要真正执行事务，该协议分为以下两个阶段：</p><p>a、第一阶段：事务协调器要求每个涉及到事务的数据库预提交（precommit）此操作，并反馈可以提交；</p><p>b、第二阶段：事务协调器要求每个数据库提交或回滚事务。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609605610807.png" alt="1609605610807"></p><p>两阶段提交这种解决方案属于牺牲了一部分可用性来换取的一致性。</p><p><strong>优点：</strong> <font color='red'>尽量</font>保证了数据的强一致，适合对数据强一致要求很高的关键领域。（其实也不能100%保证强一致）</p><p><strong>缺点：</strong> </p><p>&emsp;&emsp;a、同步阻塞：所有事务参与者在等待其他参与者响应的时候都处于同步阻塞的状态，无法进行其他操作；</p><p>&emsp;&emsp;b、单点问题：协调者在2PC中起到非常关键的作用，如果发生故障则会造成严重的影响，特别是在第二阶段发生故障，则所有参与者都会一直等待，无法进行其他操作；</p><p>&emsp;&emsp;c、数据不一致：在第二阶段，如果协调者只发送了部分commit的消息，那么如果此时发生网络异常，那么就只有部分参与者提交了事务，使得数据不一致（<font color='red'>所有的分布式事务都不是能够完全解决数据不一致的问题，只能说是尽量做到避免数据不一致的情况出现</font>）；</p><p>&emsp;&emsp;d、容错率低：任意一个节点失败就会导致整个事务失败，没有完善的容错机制。</p><p>XA并不是Java的规范，而是一种通用的规范。而JTA则是满足XA规范的用于Java开发的规范。</p><h3 id="2PC的实现——atomikos"><a href="#2PC的实现——atomikos" class="headerlink" title="2PC的实现——atomikos"></a>2PC的实现——atomikos</h3><p>&emsp;&emsp;这里使用<a href="https://blog.csdn.net/leilei1366615/article/details/104678279%E6%96%87%E7%AB%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%9Ahttps://cheng_qiwei.gitee.io/blog/resource/file/springboot-mybatis-plus-atomikos.zip%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E6%BA%90%EF%BC%8C%E6%9D%A5%E5%90%8C%E6%97%B6%E4%BF%9D%E5%AD%98user%E3%80%81role%E3%80%81userRole%E4%B8%89%E5%BC%A0%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%88%91%E4%BB%AC%E9%A6%96%E5%85%88%E5%B0%86%E5%BC%82%E5%B8%B8%E6%B3%A8%E9%87%8A%EF%BC%8C%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1%E6%AD%A3%E5%B8%B8%E7%9A%84%E4%BF%9D%E5%AD%98%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%EF%BC%8C%E6%95%B0%E6%8D%AE%E9%83%BD%E8%A2%AB%E6%88%90%E5%8A%9F%E4%BF%9D%E5%AD%98%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B9%9F%E6%98%AF%E6%A0%B9%E6%8D%AE2PC%E7%9A%84%E8%A7%84%E5%88%99%EF%BC%8C%E5%85%88%E6%89%A7%E8%A1%8C%E9%A2%84%E6%8F%90%E4%BA%A4%EF%BC%8C%E5%86%8D%E6%89%80%E6%9C%89%E9%83%BD%E6%88%90%E5%8A%9F%E5%90%8E%E6%89%A7%E8%A1%8Ccommit%E8%BF%9B%E8%A1%8C%E4%BF%9D%E5%AD%98%E3%80%82">https://blog.csdn.net/leilei1366615/article/details/104678279文章的代码进行测试，完整代码下载地址：https://cheng_qiwei.gitee.io/blog/resource/file/springboot-mybatis-plus-atomikos.zip通过配置多个数据源，来同时保存user、role、userRole三张表的数据，我们首先将异常注释，执行一次正常的保存，我们可以看到，数据都被成功保存，控制台也是根据2PC的规则，先执行预提交，再所有都成功后执行commit进行保存。</a></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609684240746.png" alt="1609684240746"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609684376913.png" alt="1609684376913"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609684452348.png" alt="1609684452348"></p><p>&emsp;&emsp;然后我们打开异常，再执行一次，我们可以发现，当出现异常后，前面的数据并没有保存到数据库，而是回滚了，我们通过控制台也可以看见，当执行到异常那一行后，前面两个预提交的事务被注销了，所以就保证了数据的一致性。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609684731890.png" alt="1609684731890"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609684802598.png" alt="1609684802598"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609684923835.png" alt="1609684923835"></p><h2 id="3PC（三阶段事务提交）"><a href="#3PC（三阶段事务提交）" class="headerlink" title="3PC（三阶段事务提交）"></a>3PC（三阶段事务提交）</h2><p>&emsp;&emsp;3PC是2PC的升级版，他是在2PC的基础上，<strong>同时在协调者和参与者中都引入了超时机制</strong>。3PC分为以下几个阶段：</p><p>a、<strong>cancommit</strong>阶段：类似于2PC的准备阶段，协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应；</p><p>b、<strong>preparecommit</strong>阶段：协调者根据参与者的反馈情况来决定是否可以执行事务PreCommit操作；</p><p>c、<strong>doCommit</strong>阶段:该阶段进行真正的事务提交。该阶段进行真正的事务提交，也可以分为以下两种情况。</p><p>&emsp;&emsp;c1、执行提交，参与者首先发送提交请求协调接收到参与者发送的ACK响应，那么协调者将从预提交状态进入到提交状态。并向所有参与者发送doCommit请求。参与者接收到doCommit请求之后，执行正式的事务提交，并在完成事务提交之后释放所有事务资源。接着事务提交完之后，参与者向协调者发送Ack响应。最后协调者接收到所有参与者的ack响应之后，完成事务。</p><p>&emsp;&emsp;c2、中断事务，协调者没有接收到参与者发送的ACK响应。（可能是接受者发送的不是ACK响应，也可能响应超时）。协调者向所有参与者发送终止请求，参与者在接收到终止请求后，会利用其在二阶段记录的信息来执行事务回滚操作，并在完成事务回滚之后释放所有事务资源。回滚之后，向协调者发送Ack信息，中断事务。</p><p>&emsp;&emsp;<font color='red'>注意事项：在阶段三，会出现以下两种故障，第一是协调者出现问题，第二是协调者和参与者之间的网络出现故障。但无论是哪种情况，最终都会导致参与者无法及时接收来自协调者的提交或回滚的请求，针对这种情况，3PC的解决方案是在参与者等待超时之后，会继续对事物进行commit操作，这样的操作相对于2PC中继续等待来讲是降低了参与者的阻塞范围，但这样操作后必然出现数据不一致性。</font></p><p><font size='5px'><strong>柔性事务</strong></font></p><h2 id="TCC（Try-Confirm-Cancel）两阶段补偿性方案"><a href="#TCC（Try-Confirm-Cancel）两阶段补偿性方案" class="headerlink" title="TCC（Try-Confirm-Cancel）两阶段补偿性方案"></a>TCC（Try-Confirm-Cancel）两阶段补偿性方案</h2><p> &emsp;&emsp;TCC 也是2PC的一种变体，其实就是采用的补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。TCC主要分为三个阶段：</p><p>&emsp;&emsp;Try阶段：对业务系统做检测及资源预留；</p><p>&emsp;&emsp;Confirm阶段：对业务系统做确认提交，Try阶段执行成功并开始执行confirm阶段时，默认confirm阶段是不会出错的；</p><p>&emsp;&emsp;Cancel阶段：在业务执行错误时，需要回滚的时候执行的业务取消并将预留的资源释放。</p><p><strong>根据上面的描述，我们举个栗子：</strong></p><p>&emsp;&emsp;假设有一个支付订单的场景：当我们支付完一笔订单后，我们需要进行以下几个步骤的操作</p><p>&emsp;&emsp;&emsp;a、更改订单状态为已支付；</p><p>&emsp;&emsp;&emsp;b、扣减商品库存；</p><p>&emsp;&emsp;&emsp;c、会员增加积分；</p><p>&emsp;&emsp;&emsp;d、创建销售单。</p><p>&emsp;&emsp;那么，我们现在肯定希望的效果是，上述几个步骤在一次操作中同时成功或同时失败，必须是一个整体性的事务。但是，但我们上述这几个操作都在不同的服务上，且系统无进行任何分布式事务处理时，当我们已经执行了更改订单状态，扣减商品库存之后，会员积分服务突然挂了，此时后面的创建销售单操作也无法执行，但是订单状态已经更改，商品库存已经扣除，这就出现了数据不一致的问题。</p><p>&emsp;&emsp;现在，我们来使用TCC对我们的项目进行改造，首先是T（Try）阶段，这个阶段，我们不是直接一步到位就把订单状态给改了或者对商品数量接直接给减了，而是一个预备的过程。例如按照我们上面的例子来讲，我们可以首先将订单更改为支付中的一个状态，扣减商品库存也不是真的扣减，而是增加一个字段，用来先保存我们扣减的商品的数量，积分也是增加字段，用来保存增加的积分……，这一步执行的真正目的除了保留了一些需要使用的资源（例如冻结部分资源）以外，也确保了底层的数据源（数据库、redis、es）等都是正常的。</p><p>&emsp;&emsp;接着，到了C（Confirm）阶段，如果第一阶段运行顺利，所有操作都成功了，那么就可以执行Confirm阶段的操作，正式把数据修改到数据库，比如说，把订单修改为已支付，扣减商品库存，增加积分……，同时将预备的数据清除掉。</p><p>&emsp;&emsp;上面的C是指正常情况下的处理方法，那么如果出现异常呢？例如上面说的会员积分服务突然挂了，那么就需要第二个C（Cancel）阶段来处理了，该阶段，我们需要把之前半修改的数据修改回来，例如说，把订单支付中的状态修改为待支付的状态，保存商品扣减数量的字段删除对应的数量……，这样就回滚了数据，保证了数据的一致性。</p><p>&emsp;&emsp;那么，根据上述内容，如果某个服务突然发生意外，然后进行重启，TCC是如何保证之前没有执行的分布式事务继续执行呢？如果某个服务一直Confirm或cancel失败怎么办？其实，事务框架都是需要记录各个服务的状态，可以在文件或数据库进行记录，保存分布式事务运行的各个状态，可以通过日志记录进行重试，使其成功，且如果第一步try如果成功进行的话，如果不是代码有bug的话，一般不会出现Confirm或cancel失败的情况。</p><p><strong>TCC的优点及缺点</strong></p><p>&emsp;&emsp;<strong>优点：</strong> 跟2PC比起来，实现以及流程相对简单了一些，但数据的一致性比2PC也要差一些；</p><p>&emsp;&emsp;<strong>缺点：</strong> 缺点还是比较明显的，在2,3步中都有可能失败。TCC属于应用层的一种补偿方式，所以需要程序员在实现的时候多写很多补偿的代码，在一些场景中，一些业务流程可能用TCC不太好定义及处理。</p><h1 id="springCloudAlibaba——Seata"><a href="#springCloudAlibaba——Seata" class="headerlink" title="springCloudAlibaba——Seata"></a>springCloudAlibaba——Seata</h1><p>&emsp;&emsp;Seata 是一款Alibaba开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p><h2 id="Seata的重要概念"><a href="#Seata的重要概念" class="headerlink" title="Seata的重要概念"></a>Seata的重要概念</h2><h3 id="TC-Transaction-Coordinator-事务协调者"><a href="#TC-Transaction-Coordinator-事务协调者" class="headerlink" title="TC (Transaction Coordinator) - 事务协调者"></a>TC (Transaction Coordinator) - 事务协调者</h3><p>&emsp;&emsp;维护全局和分支事务的状态，驱动全局事务提交或回滚。</p><h3 id="TM-Transaction-Manager-事务管理器"><a href="#TM-Transaction-Manager-事务管理器" class="headerlink" title="TM (Transaction Manager) - 事务管理器"></a>TM (Transaction Manager) - 事务管理器</h3><p>&emsp;&emsp;定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p><h3 id="RM-Resource-Manager-资源管理器"><a href="#RM-Resource-Manager-资源管理器" class="headerlink" title="RM (Resource Manager) - 资源管理器"></a>RM (Resource Manager) - 资源管理器</h3><p>&emsp;&emsp;管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p><h3 id="Transaction-ID：XID"><a href="#Transaction-ID：XID" class="headerlink" title="Transaction ID：XID"></a>Transaction ID：XID</h3><p>&emsp;&emsp;全局唯一的事务ID</p><h2 id="Seata的工作流程"><a href="#Seata的工作流程" class="headerlink" title="Seata的工作流程"></a>Seata的工作流程</h2><p>1、TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID；</p><p>2、XID在微服务调用链路的上下文中传播（也就是在多个TM、RM中传播）；</p><p>3、RM向TC注册分支事务，将其纳入XID对应全局事务的管辖；</p><p>4、TM向TC发起针对XID的全局提交或回滚决议；</p><p>5、TC调度XID下管辖的全部分支事务完成提交或回滚请求。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609076518331.png" alt="1609076518331"></p><h1 id="Seata的安装"><a href="#Seata的安装" class="headerlink" title="Seata的安装"></a>Seata的安装</h1><h2 id="下载Seata安装包"><a href="#下载Seata安装包" class="headerlink" title="下载Seata安装包"></a>下载Seata安装包</h2><p><a href="https://github.com/seata/seata/releases/tag/v1.4.0">https://github.com/seata/seata/releases/tag/v1.4.0</a></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609076589809.png" alt="1609076589809"></p><p>将下载的文件上传到linux虚拟机中</p><h2 id="解压压缩包"><a href="#解压压缩包" class="headerlink" title="解压压缩包"></a>解压压缩包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf seata-server-1.4.0.tar.gz </span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><h3 id="修改file-conf"><a href="#修改file-conf" class="headerlink" title="修改file.conf"></a>修改file.conf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim conf/file.conf</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609076769140.png" alt="1609076769140">d </p><h3 id="修改registry-conf"><a href="#修改registry-conf" class="headerlink" title="修改registry.conf"></a>修改registry.conf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim conf/registry.conf</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609076869739.png" alt="1609076869739"></p><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p>由于1.4.0版本没有配置对应的sql文件，所以在下边附上，创建一个名为seata的数据库，然后复制下面的内容执行即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`global_table`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`global_table`</span> (</span><br><span class="line">  <span class="string">`xid`</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`transaction_id`</span> <span class="built_in">BIGINT</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">TINYINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`application_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">  <span class="string">`transaction_service_group`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">  <span class="string">`transaction_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  <span class="string">`timeout`</span> <span class="built_in">INT</span>,</span><br><span class="line">  <span class="string">`begin_time`</span> <span class="built_in">BIGINT</span>,</span><br><span class="line">  <span class="string">`application_data`</span> <span class="built_in">VARCHAR</span>(<span class="number">2000</span>),</span><br><span class="line">  <span class="string">`gmt_create`</span> DATETIME,</span><br><span class="line">  <span class="string">`gmt_modified`</span> DATETIME,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`xid`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_gmt_modified_status`</span> (<span class="string">`gmt_modified`</span>, <span class="string">`status`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_transaction_id`</span> (<span class="string">`transaction_id`</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- the table to store BranchSession data</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`branch_table`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`branch_table`</span> (</span><br><span class="line">  <span class="string">`branch_id`</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`xid`</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`transaction_id`</span> <span class="built_in">BIGINT</span> ,</span><br><span class="line">  <span class="string">`resource_group_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">  <span class="string">`resource_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">256</span>) ,</span><br><span class="line">  <span class="string">`lock_key`</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>) ,</span><br><span class="line">  <span class="string">`branch_type`</span> <span class="built_in">VARCHAR</span>(<span class="number">8</span>) ,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">TINYINT</span>,</span><br><span class="line">  <span class="string">`client_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>),</span><br><span class="line">  <span class="string">`application_data`</span> <span class="built_in">VARCHAR</span>(<span class="number">2000</span>),</span><br><span class="line">  <span class="string">`gmt_create`</span> DATETIME,</span><br><span class="line">  <span class="string">`gmt_modified`</span> DATETIME,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`branch_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_xid`</span> (<span class="string">`xid`</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- the table to store lock data</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`lock_table`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`lock_table`</span> (</span><br><span class="line">  <span class="string">`row_key`</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`xid`</span> <span class="built_in">VARCHAR</span>(<span class="number">96</span>),</span><br><span class="line">  <span class="string">`transaction_id`</span> <span class="keyword">LONG</span> ,</span><br><span class="line">  <span class="string">`branch_id`</span> <span class="keyword">LONG</span>,</span><br><span class="line">  <span class="string">`resource_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">256</span>) ,</span><br><span class="line">  <span class="string">`table_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) ,</span><br><span class="line">  <span class="string">`pk`</span> <span class="built_in">VARCHAR</span>(<span class="number">36</span>) ,</span><br><span class="line">  <span class="string">`gmt_create`</span> DATETIME ,</span><br><span class="line">  <span class="string">`gmt_modified`</span> DATETIME,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="string">`row_key`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./root/seata/bin/seata-server.sh</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1609077056733.png" alt="1609077056733"></p><h1 id="Seata的使用"><a href="#Seata的使用" class="headerlink" title="Seata的使用"></a>Seata的使用</h1><h2 id="数据库的准备"><a href="#数据库的准备" class="headerlink" title="数据库的准备"></a>数据库的准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> seata_order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="string">`user_id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line"><span class="string">`product_id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;产品id&#x27;</span>,</span><br><span class="line"><span class="string">`count`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line"><span class="string">`money`</span> <span class="built_in">DECIMAL</span>(<span class="number">11</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;金额&#x27;</span>,</span><br><span class="line"><span class="string">`status`</span> <span class="built_in">INT</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;订单状态：0：创建中; 1：已完结&#x27;</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">7</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------------- </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> seata_storage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_storage(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="string">`product_id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;产品id&#x27;</span>,</span><br><span class="line"><span class="string">`total`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;总库存&#x27;</span>,</span><br><span class="line"><span class="string">`used`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;已用库存&#x27;</span>,</span><br><span class="line"><span class="string">`residue`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;剩余库存&#x27;</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_storage(<span class="string">`id`</span>,<span class="string">`product_id`</span>,<span class="string">`total`</span>,<span class="string">`used`</span>,<span class="string">`residue`</span>)<span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;100&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------------- </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> seata_account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_account(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line"><span class="string">`user_id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line"><span class="string">`total`</span> <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;总额度&#x27;</span>,</span><br><span class="line"><span class="string">`used`</span> <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;已用余额&#x27;</span>,</span><br><span class="line"><span class="string">`residue`</span> <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;剩余可用额度&#x27;</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_account(<span class="string">`id`</span>,<span class="string">`user_id`</span>,<span class="string">`total`</span>,<span class="string">`used`</span>,<span class="string">`residue`</span>) <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1000</span>,<span class="number">0</span>,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="在每个数据库添加日志信息回滚表"><a href="#在每个数据库添加日志信息回滚表" class="headerlink" title="在每个数据库添加日志信息回滚表"></a>在每个数据库添加日志信息回滚表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`undo_log`</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`branch_id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`xid`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`context`</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`rollback_info`</span> LONGBLOB <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`log_status`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`log_created`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`log_modified`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`ext`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line"><span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`ux_undo_log`</span> (<span class="string">`xid`</span>,<span class="string">`branch_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>最终效果展示：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1610271710787.png" alt="1610271710787"></p><h2 id="在nacos中添加各个微服务的配置"><a href="#在nacos中添加各个微服务的配置" class="headerlink" title="在nacos中添加各个微服务的配置"></a>在nacos中添加各个微服务的配置</h2><p>该步骤在以前的版本是将上面3.1和3.2的文件拷贝到每个微服务的resources目录下，到了现在的版本就可以配置到nacos上</p><h3 id="添加脚本nacos-config-sh到seata的conf"><a href="#添加脚本nacos-config-sh到seata的conf" class="headerlink" title="添加脚本nacos-config.sh到seata的conf"></a>添加脚本nacos-config.sh到seata的conf</h3><p><a href = 'https://github.com/seata/seata/blob/develop/script/config-center/nacos/nacos-config.sh'>获取地址点击此链接</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">opyright 1999-2019 Seata.io Group.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> you may not use this file except <span class="keyword">in</span> compliance with the License.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You may obtain a copy of the License at、</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment">#      http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See the License <span class="keyword">for</span> the specific language governing permissions and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> limitations under the License.</span></span><br><span class="line"></span><br><span class="line">while getopts &quot;:h:p:g:t:u:w:&quot; opt</span><br><span class="line">do</span><br><span class="line">  case $opt in</span><br><span class="line">  h)</span><br><span class="line">    host=$OPTARG</span><br><span class="line">    ;;</span><br><span class="line">  p)</span><br><span class="line">    port=$OPTARG</span><br><span class="line">    ;;</span><br><span class="line">  g)</span><br><span class="line">    group=$OPTARG</span><br><span class="line">    ;;</span><br><span class="line">  t)</span><br><span class="line">    tenant=$OPTARG</span><br><span class="line">    ;;</span><br><span class="line">  u)</span><br><span class="line">    username=$OPTARG</span><br><span class="line">    ;;</span><br><span class="line">  w)</span><br><span class="line">    password=$OPTARG</span><br><span class="line">    ;;</span><br><span class="line">  ?)</span><br><span class="line">    echo &quot; USAGE OPTION: $0 [-h host] [-p port] [-g group] [-t tenant] [-u username] [-w password] &quot;</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line">  esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">urlencode() &#123;</span><br><span class="line">  for ((i=0; i &lt; $&#123;#1&#125;; i++))</span><br><span class="line">  do</span><br><span class="line">    char=&quot;$&#123;1:$i:1&#125;&quot;</span><br><span class="line">    case $char in</span><br><span class="line">    [a-zA-Z0-9.~_-]) printf $char ;;</span><br><span class="line">    *) printf &#x27;%%%02X&#x27; &quot;&#x27;$char&quot; ;;</span><br><span class="line">    esac</span><br><span class="line">  done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [[ -z $&#123;host&#125; ]]; then</span><br><span class="line">    host=localhost</span><br><span class="line">fi</span><br><span class="line">if [[ -z $&#123;port&#125; ]]; then</span><br><span class="line">    port=8848</span><br><span class="line">fi</span><br><span class="line">if [[ -z $&#123;group&#125; ]]; then</span><br><span class="line">    group=&quot;SEATA_GROUP&quot;</span><br><span class="line">fi</span><br><span class="line">if [[ -z $&#123;tenant&#125; ]]; then</span><br><span class="line">    tenant=&quot;&quot;</span><br><span class="line">fi</span><br><span class="line">if [[ -z $&#123;username&#125; ]]; then</span><br><span class="line">    username=&quot;&quot;</span><br><span class="line">fi</span><br><span class="line">if [[ -z $&#123;password&#125; ]]; then</span><br><span class="line">    password=&quot;&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">nacosAddr=$host:$port</span><br><span class="line">contentType=&quot;content-type:application/json;charset=UTF-8&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;set nacosAddr=$nacosAddr&quot;</span><br><span class="line">echo &quot;set group=$group&quot;</span><br><span class="line"></span><br><span class="line">failCount=0</span><br><span class="line">tempLog=$(mktemp -u)</span><br><span class="line">function addConfig() &#123;</span><br><span class="line">  curl -X POST -H &quot;$&#123;contentType&#125;&quot; &quot;http://$nacosAddr/nacos/v1/cs/configs?dataId=$(urlencode $1)&amp;group=$group&amp;content=$(urlencode $2)&amp;tenant=$tenant&amp;username=$username&amp;password=$password&quot; &gt;&quot;$&#123;tempLog&#125;&quot; 2&gt;/dev/null</span><br><span class="line">  if [[ -z $(cat &quot;$&#123;tempLog&#125;&quot;) ]]; then</span><br><span class="line">    echo &quot; Please check the cluster status. &quot;</span><br><span class="line">    exit 1</span><br><span class="line">  fi</span><br><span class="line">  if [[ $(cat &quot;$&#123;tempLog&#125;&quot;) =~ &quot;true&quot; ]]; then</span><br><span class="line">    echo &quot;Set $1=$2 successfully &quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;Set $1=$2 failure &quot;</span><br><span class="line">    (( failCount++ ))</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count=0</span><br><span class="line">for line in $(cat $(dirname &quot;$PWD&quot;)/conf/config.txt | sed s/[[:space:]]//g); do</span><br><span class="line">  (( count++ ))</span><br><span class="line">key=$&#123;line%%=*&#125;</span><br><span class="line">    value=$&#123;line#*=&#125;</span><br><span class="line">addConfig &quot;$&#123;key&#125;&quot; &quot;$&#123;value&#125;&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;=========================================================================&quot;</span><br><span class="line">echo &quot; Complete initialization parameters,  total-count:$count ,  failure-count:$failCount &quot;</span><br><span class="line">echo &quot;=========================================================================&quot;</span><br><span class="line"></span><br><span class="line">if [[ $&#123;failCount&#125; -eq 0 ]]; then</span><br><span class="line">echo &quot; Init nacos config finished, please start seata-server. &quot;</span><br><span class="line">else</span><br><span class="line">echo &quot; init nacos config fail. &quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="添加配置文件config-txt到seata的conf目录"><a href="#添加配置文件config-txt到seata的conf目录" class="headerlink" title="添加配置文件config.txt到seata的conf目录"></a>添加配置文件config.txt到seata的conf目录</h3><p><a href = 'https://github.com/seata/seata/blob/develop/script/config-center/config.txt'>获取地址点击此链接</a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">transport.type=TCP</span><br><span class="line">transport.server=NIO</span><br><span class="line">transport.heartbeat=true</span><br><span class="line">transport.enableClientBatchSendRequest=false</span><br><span class="line">transport.threadFactory.bossThreadPrefix=NettyBoss</span><br><span class="line">transport.threadFactory.workerThreadPrefix=NettyServerNIOWorker</span><br><span class="line">transport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler</span><br><span class="line">transport.threadFactory.shareBossWorker=false</span><br><span class="line">transport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector</span><br><span class="line">transport.threadFactory.clientSelectorThreadSize=1</span><br><span class="line">transport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread</span><br><span class="line">transport.threadFactory.bossThreadSize=1</span><br><span class="line">transport.threadFactory.workerThreadSize=default</span><br><span class="line">transport.shutdown.wait=3</span><br><span class="line">service.vgroupMapping.my_test_tx_group=default</span><br><span class="line">service.default.grouplist=127.0.0.1:8091</span><br><span class="line">service.enableDegrade=false</span><br><span class="line">service.disableGlobalTransaction=false</span><br><span class="line">client.rm.asyncCommitBufferLimit=10000</span><br><span class="line">client.rm.lock.retryInterval=10</span><br><span class="line">client.rm.lock.retryTimes=30</span><br><span class="line">client.rm.lock.retryPolicyBranchRollbackOnConflict=true</span><br><span class="line">client.rm.reportRetryCount=5</span><br><span class="line">client.rm.tableMetaCheckEnable=false</span><br><span class="line">client.rm.tableMetaCheckerInterval=60000</span><br><span class="line">client.rm.sqlParserType=druid</span><br><span class="line">client.rm.reportSuccessEnable=false</span><br><span class="line">client.rm.sagaBranchRegisterEnable=false</span><br><span class="line">client.tm.commitRetryCount=5</span><br><span class="line">client.tm.rollbackRetryCount=5</span><br><span class="line">client.tm.defaultGlobalTransactionTimeout=60000</span><br><span class="line">client.tm.degradeCheck=false</span><br><span class="line">client.tm.degradeCheckAllowTimes=10</span><br><span class="line">client.tm.degradeCheckPeriod=2000</span><br><span class="line">store.mode=file</span><br><span class="line">store.publicKey=1</span><br><span class="line">store.file.dir=file_store/data</span><br><span class="line">store.file.maxBranchSessionSize=16384</span><br><span class="line">store.file.maxGlobalSessionSize=512</span><br><span class="line">store.file.fileWriteBufferCacheSize=16384</span><br><span class="line">store.file.flushDiskMode=async</span><br><span class="line">store.file.sessionReloadReadSize=100</span><br><span class="line">store.db.datasource=druid</span><br><span class="line">store.db.dbType=mysql</span><br><span class="line">store.db.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">store.db.url=jdbc:mysql://127.0.0.1:3306/seata_order?useUnicode=true&amp;rewriteBatchedStatements=true</span><br><span class="line">store.db.user=root</span><br><span class="line">store.db.password=123456</span><br><span class="line">store.db.minConn=5</span><br><span class="line">store.db.maxConn=30</span><br><span class="line">store.db.globalTable=global_table</span><br><span class="line">store.db.branchTable=branch_table</span><br><span class="line">store.db.queryLimit=100</span><br><span class="line">store.db.lockTable=lock_table</span><br><span class="line">store.db.maxWait=5000</span><br><span class="line">store.redis.mode=single</span><br><span class="line">store.redis.single.host=127.0.0.1</span><br><span class="line">store.redis.single.port=6379</span><br><span class="line">store.redis.maxConn=10</span><br><span class="line">store.redis.minConn=1</span><br><span class="line">store.redis.maxTotal=100</span><br><span class="line">store.redis.database=0</span><br><span class="line">store.redis.password=123456</span><br><span class="line">store.redis.queryLimit=100</span><br><span class="line">server.recovery.committingRetryPeriod=1000</span><br><span class="line">server.recovery.asynCommittingRetryPeriod=1000</span><br><span class="line">server.recovery.rollbackingRetryPeriod=1000</span><br><span class="line">server.recovery.timeoutRetryPeriod=1000</span><br><span class="line">server.maxCommitRetryTimeout=-1</span><br><span class="line">server.maxRollbackRetryTimeout=-1</span><br><span class="line">server.rollbackRetryTimeoutUnlockEnable=false</span><br><span class="line">client.undo.dataValidation=true</span><br><span class="line">client.undo.logSerialization=jackson</span><br><span class="line">client.undo.onlyCareUpdateColumns=true</span><br><span class="line">server.undo.logSaveDays=7</span><br><span class="line">server.undo.logDeletePeriod=86400000</span><br><span class="line">client.undo.logTable=undo_log</span><br><span class="line">client.undo.compress.enable=true</span><br><span class="line">client.undo.compress.type=zip</span><br><span class="line">client.undo.compress.threshold=64k</span><br><span class="line">log.exceptionRate=100</span><br><span class="line">transport.serialization=seata</span><br><span class="line">transport.compressor=none</span><br><span class="line">metrics.enabled=false</span><br><span class="line">metrics.registryType=compact</span><br><span class="line">metrics.exporterList=prometheus</span><br><span class="line">metrics.exporterPrometheusPort=9898</span><br></pre></td></tr></table></figure><p>最重要的配置</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611586102169.png" alt="1611586102169"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611586065601.png" alt="1611586065601"></p><h3 id="3-3、执行命令将配置保存到nacos中"><a href="#3-3、执行命令将配置保存到nacos中" class="headerlink" title="3.3、执行命令将配置保存到nacos中"></a>3.3、执行命令将配置保存到nacos中</h3><p>由于配置相当多，所以最好是建立一个单独的空间来保存</p><p>该命令中 -t表示需要保存的空间，如果没有限制用户名和密码，则-u和-w这两个可以去掉</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh nacos-config.sh -h 127.0.0.1 -p 8848 -g SEATA_GROUP -t a82700f8-03c7-4b00-8ff7-95b51fee96cf -u nacos -w nacos</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611586837335.png" alt="1611586837335"></p><p>后续如果有需要修改的地方，可以在nacos直接修改，不需要重新执行脚本</p><h2 id="创建seata-order、seata-account、seata-storage三个微服务"><a href="#创建seata-order、seata-account、seata-storage三个微服务" class="headerlink" title="创建seata-order、seata-account、seata-storage三个微服务"></a>创建seata-order、seata-account、seata-storage三个微服务</h2><p>这里只说重要配置，详细可参考源码</p><h3 id="pom文件引入seata"><a href="#pom文件引入seata" class="headerlink" title="pom文件引入seata"></a>pom文件引入seata</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable-auto-data-source-proxy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">my_test_tx_group</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">$&#123;linux.ip&#125;:80</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_GROUP</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;a82700f8-03c7-4b00-8ff7-95b51fee96cf&quot;</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">$&#123;linux.ip&#125;:80</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_GROUP</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span></span><br><span class="line">      <span class="attr">my_test_tx_group:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">grouplist:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="string">$&#123;linux.ip&#125;:8091</span></span><br><span class="line">    <span class="attr">disable-global-transaction:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">rm:</span></span><br><span class="line">      <span class="attr">report-success-enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611587920538.png" alt="1611587920538"></p><h3 id="在需要进行分布式操作的接口上添加-GlobalTransactional注解"><a href="#在需要进行分布式操作的接口上添加-GlobalTransactional注解" class="headerlink" title="在需要进行分布式操作的接口上添加@GlobalTransactional注解"></a>在需要进行分布式操作的接口上添加@GlobalTransactional注解</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611672434484.png" alt="1611672434484"></p><p><font color='red'><strong>注意各个服务的服务都必须配置和seata-server在相同的空间中，否则后续会出现各种奇怪的问题</strong></font></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611588088719.png" alt="1611588088719"></p><p><font color='red'><strong>服务启动后，seata的服务端会有RM和TM连接的展示</strong></font></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611670632746.png" alt="1611670632746"></p><p><font color='red'><strong>各个子服务也有相应连接</strong></font></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611670859404.png" alt="1611670859404"></p><p>测试</p><p>1、测试创建订单   <a href="http://127.0.0.1:8801/order/create">http://127.0.0.1:8801/order/create</a></p><p>首先测试正常情况下，订单生成成功，库存扣减、账户扣减成功</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611671241904.png" alt="1611671241904"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611671236685.png" alt="1611671236685"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611671770888.png" alt="1611671770888"></p><p>接着，测试不正常的情况，我们把数量设置为100，因为我们当前的库存已经不足100，所以此时扣减100库存的话，就会发生意外，但是，由于订单已经生成，如果seata的分布式事务有效的话，我们的订单就应该能够回滚成功。我们发现异常后，查看数据库，订单为保存，库存和余额也没有扣减，分布式事务生效。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611671328435.png" alt="1611671328435"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611671426528.png" alt="1611671426528"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611671904291.png" alt="1611671904291"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1611671990045.png" alt="1611671990045"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloudAlibaba </category>
          
          <category> Seata </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
            <tag> Seata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8新特性——时间类</title>
      <link href="/blog/2021/03/05/JDK8%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E6%97%B6%E9%97%B4%E7%B1%BB/"/>
      <url>/blog/2021/03/05/JDK8%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E6%97%B6%E9%97%B4%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK8新特性——时间类"><a href="#JDK8新特性——时间类" class="headerlink" title="JDK8新特性——时间类"></a>JDK8新特性——时间类</h1><h1 id="为什么需要使用新的时间类"><a href="#为什么需要使用新的时间类" class="headerlink" title="为什么需要使用新的时间类"></a>为什么需要使用新的时间类</h1><p>1、Date如果不格式化，打印出的日期可读性差【Tue Sep 10 09:34:04 CST 2019】；</p><p>2、使用 SimpleDateFormat 对时间进行格式化，但 SimpleDateFormat 是线程不安全的；</p><p>3、获取时间一些参数需要转换为calendar类获取……</p><h1 id="JDK8新特性提供的时间操作类"><a href="#JDK8新特性提供的时间操作类" class="headerlink" title="JDK8新特性提供的时间操作类"></a>JDK8新特性提供的时间操作类</h1><p>1、LocalDate    【日期】</p><p>2、LocalTime    【时间】</p><p>3、LocalDateTime    【日期时间】</p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="获取当前日期"><a href="#获取当前日期" class="headerlink" title="获取当前日期"></a>获取当前日期</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.now();</span><br></pre></td></tr></table></figure><h2 id="构造指定的年月日"><a href="#构造指定的年月日" class="headerlink" title="构造指定的年月日"></a>构造指定的年月日</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate1 = LocalDate.of(<span class="number">2019</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime = LocalTime.now();</span><br></pre></td></tr></table></figure><h2 id="构造指定的时分秒"><a href="#构造指定的时分秒" class="headerlink" title="构造指定的时分秒"></a>构造指定的时分秒</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime1 = LocalTime.of(<span class="number">12</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="获取当前时日"><a href="#获取当前时日" class="headerlink" title="获取当前时日"></a>获取当前时日</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br></pre></td></tr></table></figure><h2 id="构造指定的时日"><a href="#构造指定的时日" class="headerlink" title="构造指定的时日"></a>构造指定的时日</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2019</span>, Month.SEPTEMBER, <span class="number">10</span>, <span class="number">14</span>, <span class="number">46</span>, <span class="number">56</span>);</span><br></pre></td></tr></table></figure><h2 id="获取时间的某一个值"><a href="#获取时间的某一个值" class="headerlink" title="获取时间的某一个值"></a>获取时间的某一个值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> year = localDateTime1.getYear();   <span class="comment">//2020  年份</span></span><br><span class="line">Month month = localDateTime1.getMonth();   <span class="comment">//JUNE  月份</span></span><br><span class="line"><span class="keyword">int</span> monthValue = localDateTime1.getMonthValue();   <span class="comment">//6  月份数值</span></span><br><span class="line"><span class="keyword">int</span> day = localDateTime1.getDayOfMonth();   <span class="comment">//28  日期</span></span><br><span class="line">DayOfWeek dayOfWeek = localDateTime1.getDayOfWeek();   <span class="comment">//SUNDAY  周</span></span><br><span class="line"><span class="keyword">int</span> dayOfYear = localDateTime1.getDayOfYear();   <span class="comment">//180  年的第几天</span></span><br><span class="line"><span class="keyword">int</span> hour = localDateTime1.getHour();   <span class="comment">//13 小时</span></span><br><span class="line"><span class="keyword">int</span> minute = localDateTime1.getMinute();   <span class="comment">//51  分钟</span></span><br><span class="line"><span class="keyword">int</span> second = localDateTime1.getSecond();   <span class="comment">//19  秒</span></span><br></pre></td></tr></table></figure><h2 id="LocalDateTime、LocalDate、LocalTime的转换"><a href="#LocalDateTime、LocalDate、LocalTime的转换" class="headerlink" title="LocalDateTime、LocalDate、LocalTime的转换"></a>LocalDateTime、LocalDate、LocalTime的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.of(localDate, localTime);</span><br><span class="line">LocalDateTime localDateTime = localDate.atTime(localTime);</span><br><span class="line">LocalDateTime localDateTime = localTime.atDate(localDate);</span><br><span class="line">LocalDate localDate = localDateTime.toLocalDate();</span><br><span class="line">LocalTime localTime = localDateTime.toLocalTime();</span><br></pre></td></tr></table></figure><h2 id="将某个时间增加"><a href="#将某个时间增加" class="headerlink" title="将某个时间增加"></a>将某个时间增加</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localDateTime = localDateTime.plus(<span class="number">2</span>,ChronoUnit.YEARS);  <span class="comment">//增加2年</span></span><br><span class="line">localDateTime = localDateTime.plusYears(<span class="number">2</span>);  <span class="comment">//增加2年</span></span><br></pre></td></tr></table></figure><h2 id="将某个时间减少"><a href="#将某个时间减少" class="headerlink" title="将某个时间减少"></a>将某个时间减少</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localDateTime = localDateTime.minus(<span class="number">2</span>,ChronoUnit.YEARS);  <span class="comment">//减少2年</span></span><br><span class="line">localDateTime = localDateTime.minusYears(<span class="number">2</span>);  <span class="comment">//减少2年</span></span><br></pre></td></tr></table></figure><h2 id="将某个时间参数指定"><a href="#将某个时间参数指定" class="headerlink" title="将某个时间参数指定"></a>将某个时间参数指定</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localDateTime1 = localDateTime1.with(ChronoField.MONTH_OF_YEAR,<span class="number">1</span>);  <span class="comment">//指定月份为1月</span></span><br><span class="line">localDateTime1 = localDateTime1.withHour(<span class="number">2</span>);  <span class="comment">//指定小时为2时</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">localDateTime.with(firstDayOfYear());  <span class="comment">//获取当年的第一天</span></span><br><span class="line">localDateTime.with(firstDayOfMonth());  <span class="comment">//获取当月的第一天</span></span><br><span class="line">localDateTime.with(firstDayOfNextYear());  <span class="comment">//获取下年的第一天</span></span><br><span class="line">localDateTime.with(firstDayOfNextMonth());  <span class="comment">//获取下月的第一天</span></span><br><span class="line">localDateTime.with(firstInMonth(DayOfWeek.MONDAY));  <span class="comment">//获取当月第一个星期一的时间</span></span><br><span class="line">localDateTime.with(lastDayOfYear());  <span class="comment">//获取上年的第一天</span></span><br><span class="line">localDateTime.with(lastDayOfMonth());  <span class="comment">//获取上月的第一天</span></span><br><span class="line">localDateTime.with(lastInMonth(DayOfWeek.MONDAY));  <span class="comment">//获取当月最后一个星期一的时间</span></span><br></pre></td></tr></table></figure><h2 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认提供了几种格式时间的方式【一般不用】</span></span><br><span class="line">String s1 = localDateTime.format(DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">String s2 = localDateTime.format(DateTimeFormatter.ISO_DATE_TIME);</span><br><span class="line"><span class="comment">//自定义格式化时间的方式</span></span><br><span class="line">DateTimeFormatter dateTimeFormatter =   DateTimeFormatter.ofPattern(<span class="string">&quot;dd/MM/yyyy/hh/mm/ss&quot;</span>);</span><br><span class="line">String s3 = localDateTime.format(dateTimeFormatter);</span><br></pre></td></tr></table></figure><h2 id="字符串解析时间"><a href="#字符串解析时间" class="headerlink" title="字符串解析时间"></a>字符串解析时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate1 &#x3D; LocalDate.parse(&quot;20190910&quot;, DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">LocalDate localDate2 &#x3D; LocalDate.parse(&quot;2019-09-10&quot;, DateTimeFormatter.ISO_LOCAL_DATE);</span><br><span class="line">DateTimeFormatter dateTimeFormatter &#x3D;   DateTimeFormatter.ofPattern(&quot;dd&#x2F;MM&#x2F;yyyy&#x2F;hh&#x2F;mm&#x2F;ss&quot;);</span><br><span class="line">LocalDate localDate3 &#x3D; LocalDate.parse(&quot;28&#x2F;06&#x2F;2020&#x2F;02&#x2F;28&#x2F;46&quot;, dateTimeFormatter);</span><br></pre></td></tr></table></figure><h2 id="Timestamp与LocalDateTime的转换"><a href="#Timestamp与LocalDateTime的转换" class="headerlink" title="Timestamp与LocalDateTime的转换"></a>Timestamp与LocalDateTime的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime1 = <span class="keyword">new</span> Timestamp(System.currentTimeMillis()).toLocalDateTime();</span><br></pre></td></tr></table></figure><h2 id="LocalDateTime与Long（时间戳）的转换"><a href="#LocalDateTime与Long（时间戳）的转换" class="headerlink" title="LocalDateTime与Long（时间戳）的转换"></a>LocalDateTime与Long（时间戳）的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = (<span class="keyword">new</span> Timestamp(System.currentTimeMillis())).toLocalDateTime();</span><br><span class="line"><span class="keyword">long</span> time = localDateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br></pre></td></tr></table></figure><h2 id="时间的比较"><a href="#时间的比较" class="headerlink" title="时间的比较"></a>时间的比较</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.of(<span class="number">1994</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">LocalDateTime localDateTime4 = LocalDateTime.now();</span><br><span class="line">System.out.println(localDateTime.isBefore(localDateTime4));</span><br><span class="line">System.out.println(localDateTime.isAfter(localDateTime4));</span><br></pre></td></tr></table></figure><h2 id="计算时间间隔（Duration类和Period类）"><a href="#计算时间间隔（Duration类和Period类）" class="headerlink" title="计算时间间隔（Duration类和Period类）"></a>计算时间间隔（Duration类和Period类）</h2><p>使用场景【计算年龄、合同时间等。。。】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.of(<span class="number">1994</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">LocalDateTime localDateTime4 = LocalDateTime.now();</span><br><span class="line">Duration duration = Duration.between(localDateTime,localDateTime4);</span><br><span class="line"><span class="comment">//间隔多少天</span></span><br><span class="line"><span class="keyword">long</span> days = duration.toDays();</span><br><span class="line"><span class="comment">//间隔多少小时</span></span><br><span class="line"><span class="keyword">long</span> hours = duration.toHours();</span><br><span class="line"><span class="comment">//间隔多少分钟</span></span><br><span class="line"><span class="keyword">long</span> minutes = duration.toMinutes();</span><br><span class="line">Period period2 = Period.between(localDateTime.toLocalDate(),localDateTime4.toLocalDate());</span><br><span class="line"><span class="comment">//间隔多少年</span></span><br><span class="line"><span class="keyword">int</span> years = period2.getYears();</span><br><span class="line"><span class="comment">//间隔多少月（只计算月份，不计年）</span></span><br><span class="line"><span class="keyword">int</span> months = period2.getMonths();</span><br><span class="line"><span class="comment">//间隔多少月（计算年）</span></span><br><span class="line"><span class="keyword">long</span> toTotalMonths = period2.toTotalMonths();</span><br></pre></td></tr></table></figure><h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;HHmmss&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter YEAR_MONTH_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter SHORT_DATE_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter SHORT_DATETIME_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter DATETIME_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter LONG_DATETIME_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter ABC_DATE_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter ABC_TIME_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter ABC_DATETIME_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter ABC_SHORT_DATETIME_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">&quot;yyMMddHHmmss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  将旧格式字符串日期 转换成新格式字符串日期</span></span><br><span class="line"><span class="comment">     *  格式转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateStrConvertDateStrFromLocalDateTime</span><span class="params">(String dateStr,DateTimeFormatter oldDateTimeFormatter,DateTimeFormatter newDateTimeFormatter)</span></span>&#123;</span><br><span class="line">       LocalDateTime localDateTime = LocalDateTime.parse(dateStr, oldDateTimeFormatter);</span><br><span class="line">       <span class="keyword">return</span> localDateTime.format(newDateTimeFormatter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  将旧格式字符串日期 转换成新格式字符串日期</span></span><br><span class="line"><span class="comment">     *  格式转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateStrConvertDateStrFromLocalDate</span><span class="params">(String dateStr,DateTimeFormatter oldDateTimeFormatter,DateTimeFormatter newDateTimeFormatter)</span></span>&#123;</span><br><span class="line">        LocalDate localDate = LocalDate.parse(dateStr, oldDateTimeFormatter);</span><br><span class="line">       <span class="keyword">return</span> localDate.format(newDateTimeFormatter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  将字符串日期转换成date类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">dateStrConvertDate</span><span class="params">(String dateStr,DateTimeFormatter dateTimeFormatter)</span></span>&#123;</span><br><span class="line">        LocalDateTime parse = LocalDateTime.parse(dateStr, dateTimeFormatter);</span><br><span class="line">        <span class="comment">// 获得 Instant</span></span><br><span class="line">        Instant instant = Instant.ofEpochSecond(parse.toEpochSecond(ZoneOffset.ofHours(<span class="number">8</span>)));</span><br><span class="line">        <span class="comment">// 获得 Date</span></span><br><span class="line">        <span class="keyword">return</span> Date.from(instant);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  将date类型转换成字符串日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateConvertDateStr</span><span class="params">(Date date,DateTimeFormatter dateTimeFormatter)</span></span>&#123;</span><br><span class="line">        LocalDateTime localDateTime = date.toInstant().atOffset(ZoneOffset.ofHours(<span class="number">8</span>)).toLocalDateTime();</span><br><span class="line">        <span class="keyword">return</span> localDateTime.format(dateTimeFormatter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将date转换成localdate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">dateConvertLocalDate</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date.toInstant().atOffset(ZoneOffset.ofHours(<span class="number">8</span>)).toLocalDate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将date转换成localDateTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">dateConvertLocalDateTime</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date.toInstant().atOffset(ZoneOffset.ofHours(<span class="number">8</span>)).toLocalDateTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将localdate转换成date(时分秒为零)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">localDateConvertDate</span><span class="params">(LocalDate localDate)</span></span>&#123;</span><br><span class="line">        Instant instant = localDate.atStartOfDay(ZoneOffset.ofHours(<span class="number">8</span>)).toInstant();</span><br><span class="line">        <span class="comment">// 获得 Date</span></span><br><span class="line">        <span class="keyword">return</span> Date.from(instant);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将localDateTime转换成date</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">localDateTimeConvertDate</span><span class="params">(LocalDateTime localDateTime)</span></span>&#123;</span><br><span class="line">        Instant instant = Instant.ofEpochSecond(localDateTime.toEpochSecond(ZoneOffset.ofHours(<span class="number">8</span>)));</span><br><span class="line">        <span class="comment">// 获得 Date</span></span><br><span class="line">        <span class="keyword">return</span> Date.from(instant);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前的日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">getCurrentLocalDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDate.now();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">getCurrentLocalTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalTime.now();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前日期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">getCurrentLocalDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前日期字符串以“yyyy-MM-dd”格式返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentDateStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDate.now().format(DATE_FORMATTER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前日期字符串以“yyMMdd”格式返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentShortDateStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDate.now().format(SHORT_DATE_FORMATTER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前日期字符串以“yyyy-MM”格式返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentMonthStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDate.now().format(YEAR_MONTH_FORMATTER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前日期时间字符串以“yyyy-MM-dd HH:mm:ss”格式返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentDateTimeStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DATETIME_FORMATTER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前日期时间字符串以“yyyy-MM-dd HH:mm:ss SSS”格式返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentLongDateTimeStr</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(LONG_DATETIME_FORMATTER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前日期时间字符串以“yyMMddHHmmss”格式返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentShortDateTimeStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(SHORT_DATETIME_FORMATTER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前时间字符串以“HHmmss”格式返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentTimeStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalTime.now().format(TIME_FORMATTER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前时间日期字符串以指定的字符串格式返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentDateTimeStr</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(pattern));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定日期格式的字符串转为LocalDate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">parseLocalDate</span><span class="params">(String dateStr, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDate.parse(dateStr, DateTimeFormatter.ofPattern(pattern));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定日期格式的字符串转为LocalDateTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">parseLocalDateTime</span><span class="params">(String dateTimeStr, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.parse(dateTimeStr, DateTimeFormatter.ofPattern(pattern));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定日期格式的字符串转为LocalTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">parseLocalTime</span><span class="params">(String timeStr, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalTime.parse(timeStr, DateTimeFormatter.ofPattern(pattern));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将LocalTime转为指定日期格式的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatLocalDate</span><span class="params">(LocalDate date, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date.format(DateTimeFormatter.ofPattern(pattern));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将LocalDateTime转为指定日期格式的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatLocalDateTime</span><span class="params">(LocalDateTime datetime, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> datetime.format(DateTimeFormatter.ofPattern(pattern));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将LocalTime转为指定日期格式的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatLocalTime</span><span class="params">(LocalTime time, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time.format(DateTimeFormatter.ofPattern(pattern));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将LocalTime转为指定日期格式的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">formatLocalDate</span><span class="params">(String dateStr,DateTimeFormatter dateTimeFormatter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDate.parse(dateStr, dateTimeFormatter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将LocalDateTime转为指定日期格式的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">formatLocalDateTime</span><span class="params">(String dateTimeStr,DateTimeFormatter dateTimeFormatter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.parse(dateTimeStr, dateTimeFormatter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将LocalTime转为指定日期格式的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">formatLocalTime</span><span class="params">(String longDateTimeStr,DateTimeFormatter dateTimeFormatter)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalTime.parse(longDateTimeStr, dateTimeFormatter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两个日期相隔秒数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">periodHours</span><span class="params">(LocalDateTime startDateTime,LocalDateTime endDateTime)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Duration.between(startDateTime, endDateTime).get(ChronoUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两个日期相隔天数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">periodDays</span><span class="params">(LocalDate startDate, LocalDate endDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startDate.until(endDate, ChronoUnit.DAYS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两个日期相隔周数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">periodWeeks</span><span class="params">(LocalDate startDate, LocalDate endDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startDate.until(endDate, ChronoUnit.WEEKS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两个日期相隔月数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">periodMonths</span><span class="params">(LocalDate startDate, LocalDate endDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startDate.until(endDate, ChronoUnit.MONTHS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两个日期相隔年数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">periodYears</span><span class="params">(LocalDate startDate, LocalDate endDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startDate.until(endDate, ChronoUnit.YEARS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否当天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isToday</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentLocalDate().equals(date);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据LocalDateTime获取时间日期的毫秒数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">localDateTimeToEpochMilli</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据时间毫秒数获取LocalDateTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">epochMilliToLocalDateTime</span><span class="params">(Long timeMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> Timestamp(timeMillis)).toLocalDateTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据LocalDateTime获取Timestamp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Timestamp <span class="title">localDateTimeToTimestamp</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Timestamp(dateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Timestamp获取LocalDateTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">localDateTimeToTimestamp</span><span class="params">(Timestamp timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timestamp.toLocalDateTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为闰年</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLeapYear</span><span class="params">(LocalDate localDate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> localDate.isLeapYear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断时间A是否在时间B之前</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBefore</span><span class="params">(LocalDateTime localDateTimeA,LocalDateTime localDateTimeB)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> localDateTimeA.isBefore(localDateTimeB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断时间A是否在时间B之后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAfter</span><span class="params">(LocalDateTime localDateTimeA,LocalDateTime localDateTimeB)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> localDateTimeA.isAfter(localDateTimeB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据合同开始时间和合同年限获取合同结束时间（整数年）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">getContractEndTimeByYear</span><span class="params">(LocalDateTime startTime,<span class="keyword">long</span> years)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startTime.plusYears(years).minusSeconds(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据合同开始时间和合同年限获取合同结束时间(非整数年)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">getContractEndTimeByMonth</span><span class="params">(LocalDateTime startTime,<span class="keyword">long</span> monthValues)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startTime.plusMonths(monthValues).minusSeconds(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间相应注解"><a href="#时间相应注解" class="headerlink" title="时间相应注解"></a>时间相应注解</h1><h2 id="将返回时间转为指定字符串格式"><a href="#将返回时间转为指定字符串格式" class="headerlink" title="将返回时间转为指定字符串格式"></a>将返回时间转为指定字符串格式</h2><p>@JsonFormat(pattern = “yyyy-MM-dd HH:mm:ss”, timezone = “GMT+8”)</p><h2 id="时间入参格式化"><a href="#时间入参格式化" class="headerlink" title="时间入参格式化"></a>时间入参格式化</h2><p>@DateTimeFormat(pattern = “yyyy-MM-dd”)</p><p>@DateTimeFormat(pattern = “yyyy-MM-dd HH:mm:ss”)</p>]]></content>
      
      
      <categories>
          
          <category> JDK8新特性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK8 </tag>
            
            <tag> 时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dozer 轻松高效玩转DTO(Data Transfer Object)</title>
      <link href="/blog/2021/03/03/Dozer-%E8%BD%BB%E6%9D%BE%E9%AB%98%E6%95%88%E7%8E%A9%E8%BD%ACDTO/"/>
      <url>/blog/2021/03/03/Dozer-%E8%BD%BB%E6%9D%BE%E9%AB%98%E6%95%88%E7%8E%A9%E8%BD%ACDTO/</url>
      
        <content type="html"><![CDATA[<h1 id="Dozer-轻松高效玩转DTO-Data-Transfer-Object"><a href="#Dozer-轻松高效玩转DTO-Data-Transfer-Object" class="headerlink" title="Dozer 轻松高效玩转DTO(Data Transfer Object)"></a>Dozer 轻松高效玩转DTO(Data Transfer Object)</h1><h1 id="为什么需要使用Dozer？"><a href="#为什么需要使用Dozer？" class="headerlink" title="为什么需要使用Dozer？"></a>为什么需要使用Dozer？</h1><p>&emsp;&emsp;对于分布式系统，需要在不同系统之间传递与转换域对象。因为我们不希望外部公开内部域对象，也不允许外部域对象渗入系统。传统上，数据对象之间的映射通过手工编码(getter/setter)的方式实现，或对象组装器（或转换器）来解决。我们可能会开发某种自定义映射框架来满足我们的映射转换需求，但这一切都显得不够灵巧。</p><h1 id="什么是Dozer？Dozer有什么功能？"><a href="#什么是Dozer？Dozer有什么功能？" class="headerlink" title="什么是Dozer？Dozer有什么功能？"></a>什么是Dozer？Dozer有什么功能？</h1><p>&emsp;&emsp;Dozer 是 Java Bean 到 Java Bean 映射器，它以递归方式将数据从一个对象复制到另一个对象。</p><p>&emsp;&emsp;Dozer 支持简单属性映射，复杂类型映射，双向映射，隐式和显式映射以及递归映射。</p><p>&emsp;&emsp;Dozer不仅支持属性名称之间的映射，还支持在类型之间自动转换。大多数转换方案都是开箱即用的，但 Dozer 还允许您通过 XML / API 的方式指定自定义转换。</p><h1 id="如何使用Dozer？"><a href="#如何使用Dozer？" class="headerlink" title="如何使用Dozer？"></a>如何使用Dozer？</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><h3 id="普通spring项目"><a href="#普通spring项目" class="headerlink" title="普通spring项目"></a>普通spring项目</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.dozermapper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dozer-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring-boot项目"><a href="#spring-boot项目" class="headerlink" title="spring boot项目"></a>spring boot项目</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.dozermapper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dozer-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="默认使用Dozer（同名-field-的双向映射，即隐式映射）"><a href="#默认使用Dozer（同名-field-的双向映射，即隐式映射）" class="headerlink" title="默认使用Dozer（同名 field 的双向映射，即隐式映射）"></a>默认使用Dozer（同名 field 的双向映射，即隐式映射）</h2><p>Dozer starter 默认为我们注入了 Dozer Mapper，可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 身份ID</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">// 电话</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentVo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 身份ID</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">// 电话</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Mapper dozerMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDefault</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student student = <span class="keyword">new</span> Student(<span class="number">1L</span>, <span class="string">&quot;测试姓名&quot;</span>, <span class="number">18</span>, <span class="string">&quot;123333333&quot;</span>);</span><br><span class="line">    StudentVo studentVo = dozerMapper.map(student, StudentVo.class);</span><br><span class="line">    log.info(<span class="string">&quot;StudentVo: [&#123;&#125;]&quot;</span>, studentVo.toString());</span><br><span class="line">    studentVo.setAge(<span class="number">16</span>);</span><br><span class="line">    log.info(<span class="string">&quot;StudentDomain: [&#123;&#125;]&quot;</span>, dozerMapper.map(studentVo, Student.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要调用了dozerMapper的map方法</p><p>输出结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431268.png" alt="image-20210305151431268"></p><h2 id="不同名-field-的双向映射，需要显式映射"><a href="#不同名-field-的双向映射，需要显式映射" class="headerlink" title="不同名 field 的双向映射，需要显式映射"></a>不同名 field 的双向映射，需要显式映射</h2><p>如果两个待映射的 field 不同名，Dozer 默认不会帮我们完成映射，忽略该值，所以我们需要显示映射该 field</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431269.png" alt="image-20210305151431269"></p><p>增加DozerConfig文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DozerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mapper <span class="title">dozerMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Mapper mapper = DozerBeanMapperBuilder.create()</span><br><span class="line">                <span class="comment">//指定 dozer mapping 的配置文件(放到 resources 类路径下即可)，可添加多个 xml 文件，用逗号隔开</span></span><br><span class="line">                .withMappingFiles(<span class="string">&quot;dozerBeanMapping.xml&quot;</span>)</span><br><span class="line">                .withMappingBuilder(beanMappingBuilder())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> mapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanMappingBuilder <span class="title">beanMappingBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BeanMappingBuilder() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 显式配置添加在此</span></span><br><span class="line">                mapping(Student.class, StudentVo.class).fields(<span class="string">&quot;addr&quot;</span>,<span class="string">&quot;address&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431270.png" alt="image-20210305151431270"></p><h2 id="关闭隐式匹配，则同名字段不会映射"><a href="#关闭隐式匹配，则同名字段不会映射" class="headerlink" title="关闭隐式匹配，则同名字段不会映射"></a>关闭隐式匹配，则同名字段不会映射</h2><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431271.png" alt="image-20210305151431271"></p><p>输出结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431272.png" alt="image-20210305151431272"></p><h2 id="排除不想映射的字段"><a href="#排除不想映射的字段" class="headerlink" title="排除不想映射的字段"></a>排除不想映射的字段</h2><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431273.png" alt="image-20210305151431273"></p><p>输出结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431274.png" alt="image-20210305151431274"></p><h2 id="嵌套对象或者集合对象的递归映射"><a href="#嵌套对象或者集合对象的递归映射" class="headerlink" title="嵌套对象或者集合对象的递归映射"></a>嵌套对象或者集合对象的递归映射</h2><h3 id="新增实体"><a href="#新增实体" class="headerlink" title="新增实体"></a>新增实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="comment">// 市</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="comment">// 区</span></span><br><span class="line">    <span class="keyword">private</span> String district;</span><br><span class="line">    <span class="comment">// 详细</span></span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressVo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="comment">// 市</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="comment">// 区</span></span><br><span class="line">    <span class="keyword">private</span> String district;</span><br><span class="line">    <span class="comment">// 详细</span></span><br><span class="line">    <span class="keyword">private</span> String detailAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span> </span>&#123;</span><br><span class="line">    <span class="comment">//课程编码</span></span><br><span class="line">    <span class="keyword">private</span> String courseCode;</span><br><span class="line">    <span class="comment">//课程名称</span></span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="comment">//教师名称</span></span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassVo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//课程编码</span></span><br><span class="line">    <span class="keyword">private</span> String courseCode;</span><br><span class="line">    <span class="comment">//课程名称</span></span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="comment">//教师名称</span></span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Student和StudentVo增加字段"><a href="#Student和StudentVo增加字段" class="headerlink" title="Student和StudentVo增加字段"></a>Student和StudentVo增加字段</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431275.png" alt="image-20210305151431275"></p><h3 id="修改测试方法"><a href="#修改测试方法" class="headerlink" title="修改测试方法"></a>修改测试方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDefault1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Class&gt; classList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Class classes = <span class="keyword">new</span> Class(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;语文&quot;</span>,<span class="string">&quot;语文老师&quot;</span>);</span><br><span class="line">    Class classes1 = <span class="keyword">new</span> Class(<span class="string">&quot;1002&quot;</span>,<span class="string">&quot;数学&quot;</span>,<span class="string">&quot;数学老师&quot;</span>);</span><br><span class="line">    Class classes2 = <span class="keyword">new</span> Class(<span class="string">&quot;1003&quot;</span>,<span class="string">&quot;英语&quot;</span>,<span class="string">&quot;英语老师&quot;</span>);</span><br><span class="line">    Collections.addAll(classList,classes,classes1,classes2);</span><br><span class="line">    Student student = <span class="keyword">new</span> Student(<span class="number">1L</span>, <span class="string">&quot;测试姓名&quot;</span>, <span class="number">18</span>, <span class="string">&quot;123333333&quot;</span>,<span class="string">&quot;广州&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> Address(<span class="string">&quot;广东省&quot;</span>,<span class="string">&quot;广州市&quot;</span>,<span class="string">&quot;天河区&quot;</span>,<span class="string">&quot;XXX路201号&quot;</span>),classList);</span><br><span class="line">    StudentVo studentVo = dozerMapper.map(student, StudentVo.class);</span><br><span class="line">    log.info(<span class="string">&quot;StudentVo: [&#123;&#125;]&quot;</span>, studentVo.toString());</span><br><span class="line">    studentVo.setAge(<span class="number">16</span>);</span><br><span class="line">    log.info(<span class="string">&quot;Student: [&#123;&#125;]&quot;</span>, dozerMapper.map(studentVo, Student.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431276.png" alt="image-20210305151431276"></p><h2 id="深度匹配"><a href="#深度匹配" class="headerlink" title="深度匹配"></a>深度匹配</h2><p>举例：在3.6中，语文老师同时也是班主任，所以希望语文老师的姓名也保存到Student上</p><h3 id="Student和StudentVo增加字段-1"><a href="#Student和StudentVo增加字段-1" class="headerlink" title="Student和StudentVo增加字段"></a>Student和StudentVo增加字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//班主任</span></span><br><span class="line"><span class="keyword">private</span> String leaderTeacher;</span><br></pre></td></tr></table></figure><h3 id="配置类添加配置，映射第一个老师的姓名字段到班主任字段上"><a href="#配置类添加配置，映射第一个老师的姓名字段到班主任字段上" class="headerlink" title="配置类添加配置，映射第一个老师的姓名字段到班主任字段上"></a>配置类添加配置，映射第一个老师的姓名字段到班主任字段上</h3><p><font color='red'>注意：使用单向映射，否则会出现反向映射会多一个空对象在原来的数组对象面。</font></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431277.png" alt="image-20210305151431276"></p><p>输出结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431278.png" alt="image-20210305151431276"></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>Dozer 开箱即用的功能之一就是类型转换，大多数类型我们不需要手动转换类型，完全交给 Dozer即可</p><h3 id="StudentVo的age字段修改为String"><a href="#StudentVo的age字段修改为String" class="headerlink" title="StudentVo的age字段修改为String"></a>StudentVo的age字段修改为String</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431279.png" alt="image-20210305151431279"></p><p>输出结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431280.png" alt="image-20210305151431280"></p><h2 id="类型转换的特殊情况（Date-和-String-不可以互转）"><a href="#类型转换的特殊情况（Date-和-String-不可以互转）" class="headerlink" title="类型转换的特殊情况（Date 和 String 不可以互转）"></a>类型转换的特殊情况（Date 和 String 不可以互转）</h2><h3 id="Student和StudentVo增加字段schoolTime"><a href="#Student和StudentVo增加字段schoolTime" class="headerlink" title="Student和StudentVo增加字段schoolTime"></a>Student和StudentVo增加字段schoolTime</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431281.png" alt="image-20210305151431281"></p><h3 id="config增加对时间格式的处理"><a href="#config增加对时间格式的处理" class="headerlink" title="config增加对时间格式的处理"></a>config增加对时间格式的处理</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431282.png" alt="image-20210305151431281"></p><p>输出结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431283.png" alt="image-20210305151431281"></p><h3 id="也可以进行全局设置，在config里面配置的xml文件添加对时间格式化的代码即可，但是如果两边同时配置，会优先使用mapping里面的配置"><a href="#也可以进行全局设置，在config里面配置的xml文件添加对时间格式化的代码即可，但是如果两边同时配置，会优先使用mapping里面的配置" class="headerlink" title="也可以进行全局设置，在config里面配置的xml文件添加对时间格式化的代码即可，但是如果两边同时配置，会优先使用mapping里面的配置"></a>也可以进行全局设置，在config里面配置的xml文件添加对时间格式化的代码即可，但是如果两边同时配置，会优先使用mapping里面的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认是 true，当发生转换错误时抛出异常，停止转换，这里设置成false，如果转换错误，继续转换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stop-on-errors</span>&gt;</span>false<span class="tag">&lt;/<span class="name">stop-on-errors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">date-format</span>&gt;</span>yyyy年MM月dd日 HH时mm分ss秒<span class="tag">&lt;/<span class="name">date-format</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431284.png" alt="image-20210305151431284"></p><h2 id="指定情况进行映射"><a href="#指定情况进行映射" class="headerlink" title="指定情况进行映射"></a>指定情况进行映射</h2><h3 id="指定使用userFileldOneWay来设置年龄字段进行单向映射"><a href="#指定使用userFileldOneWay来设置年龄字段进行单向映射" class="headerlink" title="指定使用userFileldOneWay来设置年龄字段进行单向映射"></a>指定使用userFileldOneWay来设置年龄字段进行单向映射</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431285.png" alt="image-20210305151431285"></p><h3 id="编写测试类，输出年龄"><a href="#编写测试类，输出年龄" class="headerlink" title="编写测试类，输出年龄"></a>编写测试类，输出年龄</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDefault2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Class&gt; classList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Class classes = <span class="keyword">new</span> Class(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;语文&quot;</span>,<span class="string">&quot;语文老师&quot;</span>);</span><br><span class="line">    Class classes1 = <span class="keyword">new</span> Class(<span class="string">&quot;1002&quot;</span>,<span class="string">&quot;数学&quot;</span>,<span class="string">&quot;数学老师&quot;</span>);</span><br><span class="line">    Class classes2 = <span class="keyword">new</span> Class(<span class="string">&quot;1003&quot;</span>,<span class="string">&quot;英语&quot;</span>,<span class="string">&quot;英语老师&quot;</span>);</span><br><span class="line">    Collections.addAll(classList,classes,classes1,classes2);</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setId(<span class="number">1L</span>);</span><br><span class="line">    student.setName(<span class="string">&quot;测试姓名&quot;</span>);</span><br><span class="line">    student.setAge(<span class="number">18</span>);</span><br><span class="line">    student.setMobile(<span class="string">&quot;123333333&quot;</span>);</span><br><span class="line">    student.setAddr(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">    student.setAddress(<span class="keyword">new</span> Address(<span class="string">&quot;广东省&quot;</span>,<span class="string">&quot;广州市&quot;</span>,<span class="string">&quot;天河区&quot;</span>,<span class="string">&quot;XXX路201号&quot;</span>));</span><br><span class="line">    student.setClassList(classList);</span><br><span class="line">    student.setSchoolTime(<span class="keyword">new</span> Timestamp(System.currentTimeMillis()));</span><br><span class="line">    StudentVo studentVo = dozerMapper.map(student, StudentVo.class);</span><br><span class="line">    log.info(<span class="string">&quot;不指定StudentVo: [&#123;&#125;]&quot;</span>, studentVo.getAge());</span><br><span class="line">    Student student1 = dozerMapper.map(studentVo, Student.class);</span><br><span class="line">    log.info(<span class="string">&quot;不指定Student: [&#123;&#125;]&quot;</span>,student1.getAge());</span><br><span class="line">    StudentVo studentVo1 = dozerMapper.map(student, StudentVo.class,<span class="string">&quot;userFieldOneWay&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;指定StudentVo: [&#123;&#125;]&quot;</span>, studentVo1.getAge());</span><br><span class="line">    Student student2 = dozerMapper.map(studentVo1, Student.class,<span class="string">&quot;userFieldOneWay&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;指定Student: [&#123;&#125;]&quot;</span>,student2.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431286.png" alt="image-20210305151431286"></p><p>输出结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431287.png" alt="image-20210305151431287"></p><h2 id="自定义进行映射转换"><a href="#自定义进行映射转换" class="headerlink" title="自定义进行映射转换"></a>自定义进行映射转换</h2><h3 id="新增学生成绩字段Student是Integer类型，StudentVo是枚举类型"><a href="#新增学生成绩字段Student是Integer类型，StudentVo是枚举类型" class="headerlink" title="新增学生成绩字段Student是Integer类型，StudentVo是枚举类型"></a>新增学生成绩字段Student是Integer类型，StudentVo是枚举类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.g4b.study.dozer.config;</span><br><span class="line"><span class="comment">/**分数等级枚举类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cqw*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ScoreEnum</span> </span>&#123;</span><br><span class="line">    <span class="comment">//85~100分为等级A</span></span><br><span class="line">    A,</span><br><span class="line">    <span class="comment">//75~84分为等级B</span></span><br><span class="line">    B,</span><br><span class="line">    <span class="comment">//60~74分为等级C</span></span><br><span class="line">    C,</span><br><span class="line">    <span class="comment">//&lt;60分为等级D</span></span><br><span class="line">    D</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431288.png" alt="image-20210305151431288"></p><h3 id="定义之定义的方法"><a href="#定义之定义的方法" class="headerlink" title="定义之定义的方法"></a>定义之定义的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreConverter</span> <span class="keyword">extends</span> <span class="title">DozerConverter</span>&lt;<span class="title">Integer</span>,<span class="title">ScoreEnum</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Integer.class, ScoreEnum.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScoreEnum <span class="title">convertTo</span><span class="params">(Integer score, ScoreEnum scoreEnum)</span> </span>&#123;</span><br><span class="line">        ScoreEnum result = ScoreEnum.D;</span><br><span class="line">        <span class="keyword">if</span>(score &gt;= <span class="number">85</span>)&#123;</span><br><span class="line">            result = ScoreEnum.A;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">75</span> &amp;&amp; score &lt; <span class="number">85</span>)&#123;</span><br><span class="line">            result = ScoreEnum.B;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">75</span>)&#123;</span><br><span class="line">            result = ScoreEnum.C;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">convertFrom</span><span class="params">(ScoreEnum scoreEnum, Integer integer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreConverter</span> <span class="keyword">extends</span> <span class="title">DozerConverter</span>&lt;<span class="title">Integer</span>,<span class="title">ScoreEnum</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Integer.class, ScoreEnum.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScoreEnum <span class="title">convertTo</span><span class="params">(Integer score, ScoreEnum scoreEnum)</span> </span>&#123;</span><br><span class="line">        ScoreEnum result = ScoreEnum.D;</span><br><span class="line">        <span class="keyword">if</span>(score &gt;= <span class="number">85</span>)&#123;</span><br><span class="line">            result = ScoreEnum.A;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">75</span> &amp;&amp; score &lt; <span class="number">85</span>)&#123;</span><br><span class="line">            result = ScoreEnum.B;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">75</span>)&#123;</span><br><span class="line">            result = ScoreEnum.C;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">convertFrom</span><span class="params">(ScoreEnum scoreEnum, Integer integer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置转换字段"><a href="#配置转换字段" class="headerlink" title="配置转换字段"></a>配置转换字段</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431289.png" alt="image-20210305151431289"></p><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDefault3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    student.setScore(<span class="number">80</span>);</span><br><span class="line">    students.add(student);</span><br><span class="line">    Student student1 = <span class="keyword">new</span> Student();</span><br><span class="line">    student1.setName(<span class="string">&quot;小宏&quot;</span>);</span><br><span class="line">    student1.setScore(<span class="number">55</span>);</span><br><span class="line">    students.add(student1);</span><br><span class="line">    Student student2 = <span class="keyword">new</span> Student();</span><br><span class="line">    student2.setName(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">    student2.setScore(<span class="number">94</span>);</span><br><span class="line">    students.add(student2);</span><br><span class="line">    Student student3 = <span class="keyword">new</span> Student();</span><br><span class="line">    student3.setName(<span class="string">&quot;小1&quot;</span>);</span><br><span class="line">    student3.setScore(<span class="number">65</span>);</span><br><span class="line">    students.add(student3);</span><br><span class="line">    <span class="keyword">for</span> (Student stu : students) &#123;</span><br><span class="line">        StudentVo studentVo1 = dozerMapper.map(stu, StudentVo.class);</span><br><span class="line">        log.info(studentVo1.getName()+<span class="string">&quot;的成绩是: [&#123;&#125;],其等级是: [&#123;&#125;];&quot;</span>,stu.getScore(), studentVo1.getScore());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305151431290.png" alt="image-20210305151431290"></p><h1 id="实现转换List的工具类"><a href="#实现转换List的工具类" class="headerlink" title="实现转换List的工具类"></a>实现转换List的工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.g4b.study.dozer.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dozer.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.NonNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DozerUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dozer转换的核心mapper对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Mapper dozerMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Mapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DozerUtil.setDozerMapper(mapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDozerMapper</span><span class="params">(Mapper dozerMapper)</span> </span>&#123;</span><br><span class="line">        DozerUtil.dozerMapper = dozerMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换实体为另一个指定的实体</span></span><br><span class="line"><span class="comment">     * 任意一个参数为NULL时 会抛出NPE</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 源实体 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 目标实体 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">convert</span><span class="params">(<span class="meta">@NonNull</span> Object source, <span class="meta">@NonNull</span> Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  dozerMapper.map(source, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换List实体为另一个指定的实体</span></span><br><span class="line"><span class="comment">     * source如果为NULL 会使用空集合</span></span><br><span class="line"><span class="comment">     * 在目标实体为NULL时 会抛出NPE</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 源集合 可以为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 目标实体 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">convert</span><span class="params">(<span class="meta">@Nullable</span> List&lt;?&gt; source, <span class="meta">@NonNull</span> Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(source)</span><br><span class="line">                .orElse(Collections.emptyList())</span><br><span class="line">                .stream()</span><br><span class="line">                .map(bean -&gt; dozerMapper.map(bean, clazz))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDefault6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class classes = <span class="keyword">new</span> Class(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;语文&quot;</span>,<span class="string">&quot;语文老师&quot;</span>);</span><br><span class="line">        Class classes1 = <span class="keyword">new</span> Class(<span class="string">&quot;1002&quot;</span>,<span class="string">&quot;数学&quot;</span>,<span class="string">&quot;数学老师&quot;</span>);</span><br><span class="line">        Class classes2 = <span class="keyword">new</span> Class(<span class="string">&quot;1003&quot;</span>,<span class="string">&quot;英语&quot;</span>,<span class="string">&quot;英语老师&quot;</span>);</span><br><span class="line">        List&lt;Class&gt; paramList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(paramList,classes,classes1,classes2);</span><br><span class="line">        List&lt;ClassVo&gt; convert = DozerUtil.convert(paramList, ClassVo.class);</span><br><span class="line">        System.out.println(convert);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/image-20210305161853199.png" alt="image-20210305161853199"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Dozer </category>
          
          <category> 对象拷贝 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dozer </tag>
            
            <tag> 复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache JMeter的介绍和使用</title>
      <link href="/blog/2021/03/01/Apache%20JMeter%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2021/03/01/Apache%20JMeter%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-JMeter的介绍和使用"><a href="#Apache-JMeter的介绍和使用" class="headerlink" title="Apache JMeter的介绍和使用"></a>Apache JMeter的介绍和使用</h1><p>​        Apache JMeter是一款纯java编写负载功能测试和性能测试开源工具软件。相比Loadrunner而言，JMeter小巧轻便且免费，逐渐成为了主流的性能测试工具，是每个测试人员都必须要掌握的工具之一。</p><h1 id="JMeter的安装"><a href="#JMeter的安装" class="headerlink" title="JMeter的安装"></a>JMeter的安装</h1><h2 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h2><p>由于JMeter是基于java进行开发，所以需要安装JDK，安装JDK8或以上。</p><h2 id="安装Jmeter"><a href="#安装Jmeter" class="headerlink" title="安装Jmeter"></a>安装Jmeter</h2><h3 id="Jmeter的下载"><a href="#Jmeter的下载" class="headerlink" title="Jmeter的下载"></a>Jmeter的下载</h3><p>下载地址：<a href="http://jmeter.apache.org/download_jmeter.cgi">http://jmeter.apache.org/download_jmeter.cgi</a></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607852531286.png" alt="1607852531286"></p><h3 id="解压安装包，打开安装包bin目录，双击jmeter-bat启动"><a href="#解压安装包，打开安装包bin目录，双击jmeter-bat启动" class="headerlink" title="解压安装包，打开安装包bin目录，双击jmeter.bat启动"></a>解压安装包，打开安装包bin目录，双击jmeter.bat启动</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607853875816.png" alt="1607853875816"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607853902084.png" alt="1607853902084"></p><p>3、设置语言为中文</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607854203203.png" alt="1607854203203"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607854246428.png" alt="1607854246428"></p><h1 id="Jmeter的使用"><a href="#Jmeter的使用" class="headerlink" title="Jmeter的使用"></a>Jmeter的使用</h1><h2 id="创建线程组"><a href="#创建线程组" class="headerlink" title="创建线程组"></a>创建线程组</h2><p>​        右键点击“测试计划” -&gt; “添加” -&gt; “线程（用户）” -&gt; “线程组”</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607854808012.png" alt="1607854808012"></p><p>线程组参数详解： </p><p><strong>线程数</strong>：虚拟用户数。一个虚拟用户占用一个进程或线程。设置多少虚拟用户数在这里也就是设置多少个线程数。 </p><p><strong>Ramp-Up Period(in seconds)准备时长</strong>：设置的虚拟用户数需要多长时间全部启动。如果线程数为10，准备时长为2，那么需要2秒钟启动10个线程，也就是每秒钟启动5个线程。 </p><p><strong>循环次数</strong>：每个线程发送请求的次数。如果线程数为10，循环次数为100，那么每个线程发送100次请求。总请求数为10*100=1000 。如果勾选了“永远”，那么所有线程会一直发送请求，一到选择停止运行脚本。  </p><p><strong>调度器</strong>：设置线程组启动的开始时间和结束时间(配置调度器时，需要勾选循环次数为永远) 。</p><p><strong>持续时间（秒）</strong>：测试持续时间，会覆盖结束时间 。</p><p><strong>启动延迟（秒）</strong>：测试延迟启动时间，会覆盖启动时间 。</p><p><strong>启动时间</strong>：测试启动时间，启动延迟会覆盖它。当启动时间已过，手动只需测试时当前时间也会覆盖它。 </p><p><strong>结束时间</strong>：测试结束时间，持续时间会覆盖它。</p><h2 id="添加请求"><a href="#添加请求" class="headerlink" title="添加请求"></a>添加请求</h2><p>​        右键点击“线程组” -&gt; “添加” -&gt; “Sampler” -&gt; “HTTP请求” </p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607855692886.png" alt="1607855692886"></p><p>​        假设我们的测试接口是：<a href="http://www.baidu.com/s?ie=utf-8&amp;wd=jmeter%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%82%E8%80%83%E4%B8%8B%E5%9B%BE%E5%A1%AB%E5%86%99%EF%BC%9A">http://www.baidu.com/s?ie=utf-8&amp;wd=jmeter性能测试，可以参考下图填写：</a></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607855972981.png" alt="1607855972981"></p><p>Http请求主要参数详解：</p><p><strong>协议</strong>：向目标服务器发送HTTP请求协议，可以是HTTP或HTTPS，默认为HTTP。 </p><p><strong>服务器名称或IP</strong>：HTTP请求发送的目标服务器名称或IP 。</p><p><strong>端口号</strong>：目标服务器的端口号，默认值为80 。</p><p><strong>方法</strong>：发送HTTP请求的方法，可用方法包括GET、POST、HEAD、PUT、OPTIONS、TRACE、DELETE等。 </p><p><strong>路径</strong>：目标URL路径（URL中去掉服务器地址、端口及参数后剩余部分） 。</p><p><strong>Content encoding内容编码</strong> ：编码方式，默认为ISO-8859-1编码，这里配置为utf-8。</p><p><strong>同请求一起发送参数</strong>：在请求中发送的URL参数，用户可以将URL中所有参数设置在本表中，表中每行为一个参数（对应URL中的 name=value），注意参数传入中文时需要勾选“编码”。</p><h2 id="添加察看结果树"><a href="#添加察看结果树" class="headerlink" title="添加察看结果树"></a>添加察看结果树</h2><p>​        右键点击“线程组” -&gt; “添加” -&gt; “监听器” -&gt; “察看结果树” </p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607856632948.png" alt="1607856632948"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607856844503.png" alt="1607856844503"></p><p>​        由于这个页面是一个html页面，所以我们要配置响应数据格式为“HTML Source Formatted”</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607873443952.png" alt="1607873443952"></p><p>​        点击测试开始的按钮，我们可以看到测试了10个数据，返回status都是ok</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607857241735.png" alt="1607857241735"></p><p>​        这样一个jmeter的测试就结束了</p><h2 id="添加自定义变量"><a href="#添加自定义变量" class="headerlink" title="添加自定义变量"></a>添加自定义变量</h2><p>​        我们可以添加用户自定义变量用以Http请求参数化，右键点击“线程组” -&gt; “添加” -&gt; “配置元件” -&gt; “用户定义的变量”：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607857512292.png" alt="1607857512292"></p><h3 id="设置名称为wd，值为Jmeter测试动态变量"><a href="#设置名称为wd，值为Jmeter测试动态变量" class="headerlink" title="设置名称为wd，值为Jmeter测试动态变量"></a>设置名称为wd，值为Jmeter测试动态变量</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607871038056.png" alt="1607871038056"></p><h3 id="http请求的值，使用-wd-来动态获取该变量的值"><a href="#http请求的值，使用-wd-来动态获取该变量的值" class="headerlink" title="http请求的值，使用${wd}来动态获取该变量的值"></a>http请求的值，使用${wd}来动态获取该变量的值</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607871132432.png" alt="1607871132432"></p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607871275266.png" alt="1607871275266"></p><p>​        点击测试，观察结果，返回了我们自定义的搜索词Jmeter测试动态变量，修改成功！</p><h2 id="添加断言结果"><a href="#添加断言结果" class="headerlink" title="添加断言结果"></a>添加断言结果</h2><p>​        上一步测试中如果返回的内容复杂且多，那我们可能要找到的难度就会提高，此时我们可以使用断言结果来进行处理。</p><p>​        右键点击“线程组” -&gt; “添加”-&gt; “断言” -&gt; “响应断言” </p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607871694041.png" alt="1607871694041"></p><h3 id="添加匹配规则为包括，测试模式为我们添加的参数，用-wd-代替，点击保存"><a href="#添加匹配规则为包括，测试模式为我们添加的参数，用-wd-代替，点击保存" class="headerlink" title="添加匹配规则为包括，测试模式为我们添加的参数，用${wd}代替，点击保存"></a>添加匹配规则为包括，测试模式为我们添加的参数，用${wd}代替，点击保存</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607871803267.png" alt="1607871803267"></p><h3 id="添加断言结果-1"><a href="#添加断言结果-1" class="headerlink" title="添加断言结果"></a>添加断言结果</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607871993115.png" alt="1607871993115"></p><p>​        当前的测试规则是，结果包含参数数据则为true</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607873562323.png" alt="1607873562323"></p><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607873130707.png" alt="1607873130707"></p><p>​        点击测试，如果断言结果为true，则不会返回什么内容，如图为成功，如果失败，则会返回如下图展示的内容</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607873228037.png" alt="1607873228037"></p><h2 id="设置动态参数"><a href="#设置动态参数" class="headerlink" title="设置动态参数"></a>设置动态参数</h2><p>​        有时候我们的测试参数不是一成不变的，如果我们需要在测试的时候动态修改参数，则可以进行以下配置。</p><p>​        右键点击“http请求” -&gt; “添加”-&gt; “配置元件” -&gt; “CSV Data Set Config” </p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607873807373.png" alt="1607873807373"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607874202732.png" alt="1607874202732"></p><p>​        这里要注意文本保存的编码方式要和设置的文件编码方式一致，否则会出现中文乱码的情况。</p><p>测试：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607874474506.png" alt="1607874474506"></p><h2 id="添加聚合报告"><a href="#添加聚合报告" class="headerlink" title="添加聚合报告"></a>添加聚合报告</h2><p>​        右键点击“线程组” -&gt; “添加” -&gt; “监听器” -&gt; “聚合报告”，用以存放性能测试报告 </p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607875044907.png" alt="1607875044907"></p><p>测试：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/1607875196722.png" alt="1607875196722"></p><p>聚合报告参数详解： </p><p><strong>Label</strong>：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值 ；</p><p><strong>#Samples（样本）</strong>：请求数——表示这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100 ；</p><p> <strong>Average</strong>：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，以Transaction 为单位显示平均响应时间 ；</p><p><strong>Median</strong>：中位数，也就是 50％ 用户的响应时间；</p><p><strong>90% Line</strong>：90％ 用户的响应时间 ；</p><p><strong>Min</strong>：最小响应时间 ；</p><p><strong>Max</strong>：最大响应时间 ；</p><p>**Error%**：错误率——错误请求数/请求总数 ；</p><p><strong>Throughput</strong>：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数 ；</p><p> <strong>KB/Sec</strong>：每秒从服务器端接收到的数据量，相当于LoadRunner中的Throughput/Sec；</p><p>​        一般而言，性能测试中我们需要重点关注的数据有： #Samples 请求数，Average 平均响应时间，Min 最小响应时间，Max 最大响应时间，Error% 错误率及Throughput 吞吐量。</p>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMeter </tag>
            
            <tag> 性能测试 </tag>
            
            <tag> 压力测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
