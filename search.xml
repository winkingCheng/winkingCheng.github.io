<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Sentinel的介绍与使用（一）</title>
      <link href="/blog/2020/12/16/Sentinel%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/blog/2020/12/16/Sentinel%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><font size='7.5px'><strong>Sentinel的介绍与使用（一）</strong></font></p><h1 id="Sentinel的介绍"><a href="#Sentinel的介绍" class="headerlink" title="Sentinel的介绍"></a>Sentinel的介绍</h1><h2 id="什么是Sentinel？"><a href="#什么是Sentinel？" class="headerlink" title="什么是Sentinel？"></a>什么是Sentinel？</h2><p>​        Sentinel是阿里开源的项目，主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助用户提升服务的稳定性。</p><p>中文官网路径：<a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p><h2 id="Sentinel的主要特性"><a href="#Sentinel的主要特性" class="headerlink" title="Sentinel的主要特性"></a>Sentinel的主要特性</h2><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/clipboard-1607525217544-1607609884850.png" alt="img"></p><h1 id="Sentinel的安装"><a href="#Sentinel的安装" class="headerlink" title="Sentinel的安装"></a>Sentinel的安装</h1><p>文件下载路径：[<a href="https://github.com/alibaba/Sentinel/releases]">https://github.com/alibaba/Sentinel/releases]</a></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/clipboard-1607525280457-1607609890089.png" alt="img"></p><p>Sentinel本身是一个java项目，所以要求安装Java环境，使用命令启动即可。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar sentinel-dashboard-1.8.0.jar  &gt; log.file  2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>注意：Sentinel的默认端口号是：8080，所以需要开放端口访问限制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//开放指定端口 </span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent </span><br><span class="line">//重新加载防火墙 </span><br><span class="line">firewall-cmd --reload </span><br></pre></td></tr></table></figure><p>成功的话，访问：<a href="http://ip:8080/">http://IP:8080</a> 即可显示以下页面</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/clipboard-1607609875746.png" alt="img"></p><h1 id="Sentinel的流量控制"><a href="#Sentinel的流量控制" class="headerlink" title="Sentinel的流量控制"></a>Sentinel的流量控制</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>流量控制</strong>（flow control），其原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p><p>​        一条限流规则主要由下面几个因素组成，我们可以组合这些元素来实现不同的限流效果：</p><p>a、resource：资源名，即限流规则的作用对象；</p><p>b、count: 限流阈值；</p><p>c、grade: 限流阈值类型（QPS 或并发线程数）；</p><p>​        QPS：每秒请求数，当前调用该api的QPS到达阈值的时候进行限流；</p><p>​        线程数：当调用该api的线程数到达阈值的时候，进行限流；</p><p>d、limitApp: 流控针对的调用来源，若为 default 则不区分调用来源；</p><p>e、strategy: 调用关系限流策略；</p><p>​        直接：当api大达到限流条件时，直接限流；</p><p>​        关联：当关联的资源到达阈值，就限流自己；</p><p>​        链路：只记录指定路上的流量，指定资源从入口资源进来的流量，如果达到阈值，就进行限流，api级别的限流；</p><p>f、controlBehavior: 流量控制效果（直接拒绝、Warm Up、匀速排队）；</p><p>​        直接拒绝：超过设置的阈值，将直接返回默认错误；</p><p>​        Warm Up：预热模式，当流量突然增大时（例如双十一等大型活动），我们希望系统从空闲状态慢慢切换到繁忙状态，经过预定的时间后，到达处理这个请求数的最大值；</p><p>​        匀速排队：严格控制请求通过的间隔时间，使请求匀速通过，这种方式主要用于处理间隔性突发的流量（如：消息队列），在某一秒会出现大量请求，而在接下来一段时间会出现空闲，所以我们可以在接下来的时间处理这些请求，而不是直接拒绝多余的请求。</p><p><font color='red'> 注意事项：</font></p><p>​        <font color='red'>a、使用匀速排队时限流阈值类型必须选择QPS；</font></p><p>​        <font color='red'>b、使用匀速排队时不支持 QPS &gt; 1000 的场景。</font></p><h2 id="流量控制体验"><a href="#流量控制体验" class="headerlink" title="流量控制体验"></a>流量控制体验</h2><h3 id="编写测试工程"><a href="#编写测试工程" class="headerlink" title="编写测试工程"></a>编写测试工程</h3><h4 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20200704<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cheng.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-sentinel-test9003<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yml文件"><a href="#yml文件" class="headerlink" title="yml文件"></a>yml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9003</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloudalibaba-sentinel-service</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 192.168.197.132:80,192.168.197.132:81</span><br><span class="line">    sentinel:</span><br><span class="line">      transport:</span><br><span class="line">        dashboard: 192.168.197.132:8080</span><br><span class="line">#    port: 8719 #默认8719，假如被占用了会自动从8719开始依次+1扫描。直至找到未被占用的端口</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &#x27;*&#x27;</span><br></pre></td></tr></table></figure><h4 id="启动类文件"><a href="#启动类文件" class="headerlink" title="启动类文件"></a>启动类文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.cheng.cloud.alibaba;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class SentinelApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SentinelApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="业务类文件"><a href="#业务类文件" class="headerlink" title="业务类文件"></a>业务类文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.cheng.cloud.alibaba.rest;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class FlowLimitController &#123;</span><br><span class="line">    @GetMapping(&quot;/testA&quot;)</span><br><span class="line">    public String testA() &#123;</span><br><span class="line">        return &quot;------testA&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/testB&quot;)</span><br><span class="line">    public String testB() &#123;</span><br><span class="line">        return &quot;------testB&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写完成后，启动项目</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607529807085-1607609863773.png" alt="1607529807085"></p><p>​        但是，我们发现，无论如何刷新，Sentinel的页面并没有显示我们的项目</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607529867022-1607609859326.png" alt="1607529867022"></p><p>​        这是因为Sentinel采用了懒加载，所以需要我们进行激活，激活的方式是调用任意接口一次即可。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607530275224-1607609856121.png" alt="1607530275224"></p><h3 id="流控模式——QPS直接快速失败"><a href="#流控模式——QPS直接快速失败" class="headerlink" title="流控模式——QPS直接快速失败"></a>流控模式——QPS直接快速失败</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607609798330.png" alt="1607609798330"></p><p>新增成功后的展示内容如下：</p><p>​        当前的规则是每秒只允许 /testA 接口被调用一次。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607609964963.png" alt="1607609964963"></p><p>测试：</p><p>​        每秒仅调用一次 /testA 接口就正常，当频繁快速点击调用 /testA 接口则失败</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607610198022.png" alt="1607610198022"></p><h3 id="流控模式——线程直接快速失败"><a href="#流控模式——线程直接快速失败" class="headerlink" title="流控模式——线程直接快速失败"></a>流控模式——线程直接快速失败</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607610945394.png" alt="1607610945394"></p><p>新增成功后的展示内容如下：</p><p>​        当前的规则是只允许 /testB 接口被最多一个线程调用。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607610979813.png" alt="1607610979813"></p><p>​        线程数的限制：比如a请求过来,处理很慢,在一直处理,此时b请求又过来了，此时因为a占用一个线程,此时要处理b请求就只有额外开启一个线程，那么就会报错。</p><p>测试：</p><p>​        我们修改一下 /testB 接口 ，模拟接口调用很慢的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testB&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        接下来，我们同时打开两个窗口，注意需要两个浏览器，同一个浏览器有时候会没有效果，调用接口，先调用的接口会响应结果，后面的直接报错。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607612220131.png" alt="1607612220131"></p><h3 id="流控模式——QPS关联快速失败"><a href="#流控模式——QPS关联快速失败" class="headerlink" title="流控模式——QPS关联快速失败"></a>流控模式——QPS关联快速失败</h3><p>​        关联：当关联的资源到达阈值，就限流自己；例如：当与A关联的B达到阈值之后，就限流A自己</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607613235033-1607756847329.png" alt="1607613235033"></p><p>​        当前的规则是当 /testA 接口的请求qps大于1时，就让 /testB 之后的请求直接失败。</p><p>测试：</p><p>​        我们使用postman或JMenter模拟频繁调用 /testA 接口的情况导致 /testA 接口的qps达到阈值，此时，我们调用 /testB 接口，此时，/testB 接口访问失败。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607757756939.png" alt="1607757756939"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607757797854.png" alt="1607757797854"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607757824972.png" alt="1607757824972"></p><h3 id="流控模式——QPS链路快速失败"><a href="#流控模式——QPS链路快速失败" class="headerlink" title="流控模式——QPS链路快速失败"></a>流控模式——QPS链路快速失败</h3><p>​    链路流控模式指的是，当从某个接口过来的资源达到限流条件时，开启限流；它的功能有点类似于针对来源配置项，区别在于：针对来源是针对上级微服务，而链路流控是针对上级接口，也就是说它的粒度更细；</p><h4 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><h5 id="新增Service接口及其实现"><a href="#新增Service接口及其实现" class="headerlink" title="新增Service接口及其实现"></a>新增Service接口及其实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line"><span class="keyword">import</span> com.cheng.cloud.alibaba.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;getOrder&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(<span class="keyword">new</span> Random().nextInt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="controller新增一个接口，调用上面service的方法"><a href="#controller新增一个接口，调用上面service的方法" class="headerlink" title="controller新增一个接口，调用上面service的方法"></a>controller新增一个接口，调用上面service的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/test1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> orderService.getOrder();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;---/test1  id != 1&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607764678542.png" alt="1607764678542"></p><p>​        当前的规则是当 service中的getOrder 接口的请求qps大于1时，就让 /test1 之后的请求直接失败。</p><p>测试：</p><p>​        我们使用postman或JMenter模拟频繁调用 /test1 接口的情况导致 /test1 接口的qps达到阈值，此时，我们调用 /test1 接口，此时，/test1 接口访问失败。</p><p>​        but，测试时我们发现并没有效果   o(╥﹏╥)o</p><p>​        这是因为在在spring-cloud-alibaba v2.1.1.RELEASE及前，Sentinel1.7.0及后，关闭了URL PATH聚合，所以需要我们开启才能生效。【当前使用的是spring-cloud-alibaba v2.1.1.RELEASE和Sentinel1.8.0】</p><h4 id="开启方式："><a href="#开启方式：" class="headerlink" title="开启方式："></a>开启方式：</h4><h5 id="配置文件中关闭sentinel的CommonFilter实例化【默认是true，修改为false】"><a href="#配置文件中关闭sentinel的CommonFilter实例化【默认是true，修改为false】" class="headerlink" title="配置文件中关闭sentinel的CommonFilter实例化【默认是true，修改为false】"></a>配置文件中关闭sentinel的CommonFilter实例化【默认是true，修改为false】</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.sentinel.filter.enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><h5 id="添加一个配置类，自己构建CommonFilter实例"><a href="#添加一个配置类，自己构建CommonFilter实例" class="headerlink" title="添加一个配置类，自己构建CommonFilter实例"></a>添加一个配置类，自己构建CommonFilter实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.servlet.CommonFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@NOTE</span> 在spring-cloud-alibaba v2.1.1.RELEASE及前，sentinel1.7.0及后，关闭URL PATH聚合需要通过该方式，spring-cloud-alibaba v2.1.1.RELEASE后，可以通过配置关闭：spring.cloud.sentinel.web-context-unify=false</span></span><br><span class="line"><span class="comment">     * 手动注入Sentinel的过滤器，关闭Sentinel注入CommonFilter实例，修改配置文件中的 spring.cloud.sentinel.filter.enabled=false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">sentinelFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> CommonFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 入口资源关闭聚合</span></span><br><span class="line">        registration.addInitParameter(CommonFilter.WEB_CONTEXT_UNIFY, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        registration.setName(<span class="string">&quot;sentinelFilter&quot;</span>);</span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>        注意：这里spring-cloud-alibaba v2.1.0.RELEASE并没有CommonFilter.WEB_CONTEXT_UNIFY这个选项，所以请修改为2.1.1版本，如果你使用更新的spring-cloud-alibaba版本，在配置文件下就可以直接进行配置spring.cloud.sentinel.web-context-unify的属性为false，并引入sentinel-web-servlet的包【1.7.0版本】即可。</font></p><p>重新测试</p><p>​        当我们频繁调用/test1?id=1时，达到阈值后会产生异常</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607766159350.png" alt="1607766159350"></p><p>​        而当我们使用其他id时，由于不走getOrder的方法，所以不会产生限流的效果</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607766252450.png" alt="1607766252450"></p><h3 id="流控模式——QPS直接Warm-up"><a href="#流控模式——QPS直接Warm-up" class="headerlink" title="流控模式——QPS直接Warm up"></a>流控模式——QPS直接Warm up</h3><p>​        Warm up：预热、冷加载，经过预热时长后才会达到阈值，当系统长时间处于低请求的情况下，当流量突然瞬间增加时，直接把系统拉升到高水位可能使系统直接崩溃，通过冷加载的方式启动，使流量慢慢增加，到达一定时间后达到阈值，对系统比较友好。起始阈值计算公式：阈值/冷加载因子coldFactor(默认值为3)。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607767547432.png" alt="1607767547432"></p><p>​        当前的规则是当 /testA 接口刚开始的请求qps大于2时，就让 /test1 之后的请求直接失败，经过5秒后，最大qps请求数为6。</p><p>测试：</p><p>​        我们该开始快速请求  /testA 接口时，由于冷加载的原因，最大的阈值是2，所以请求偶尔会出现失败的情况，当随着请求时间的增加，慢慢的请求失败次数降低，到了5s的时候，由于阈值达到了最大值6，所以几乎不会出现失败的情况</p><h3 id="流控模式——QPS直接排队等待"><a href="#流控模式——QPS直接排队等待" class="headerlink" title="流控模式——QPS直接排队等待"></a>流控模式——QPS直接排队等待</h3><p>​        排队等待：让请求以均匀的速度通过，每秒最多请求阈值数量的请求，其他请求进入等待状态，超过最大等待时间之后则返回失败（底层使用漏桶算法）。这种方式主要应用于处理间隔性突发的流量，例如消息队列，假设在某一秒有大量的请求进来，而接下来会有一段时间处于空闲期，我们希望系统能够在接下来的时间逐渐处理这些请求而不是在第一秒就直接拒绝这些请求。</p><p><font color='red'>注意：排队等待仅支持QPS，并不支持线程数。</font></p><p>​        新增测试方法 /test2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       logger.info(Thread.currentThread().getName()+<span class="string">&quot;  ...test2!&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;---/test2&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607847380859.png" alt="1607847380859"></p><p>​        当前的规则是当 /test2 接口有大量请求进来时，我们每秒仅处理一个请求，其它请求进入等待中，当等待时间超过20s之后，返回失败。</p><p>测试：</p><p>​        快速请求 /test2 接口，查看控制台，我们发现，每秒仅处理一个请求</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607847610188.png" alt="1607847610188"></p><h1 id="Sentinel的熔断降级"><a href="#Sentinel的熔断降级" class="headerlink" title="Sentinel的熔断降级"></a>Sentinel的熔断降级</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>​        除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p><p>​        现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p><p>​        <font color='red'><strong>注意</strong>：本文档针对 Sentinel 1.8.0 及以上版本。1.8.0 版本对熔断降级特性进行了全新的改进升级，请使用最新版本以更好地利用熔断降级的能力。</font></p><h2 id="Sentinel的熔断策略"><a href="#Sentinel的熔断策略" class="headerlink" title="Sentinel的熔断策略"></a>Sentinel的熔断策略</h2><h3 id="慢调用比例-SLOW-REQUEST-RATIO"><a href="#慢调用比例-SLOW-REQUEST-RATIO" class="headerlink" title="慢调用比例 (SLOW_REQUEST_RATIO)"></a><strong>慢调用比例 (SLOW_REQUEST_RATIO)</strong></h3><p>​        选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</p><h4 id="熔断条件"><a href="#熔断条件" class="headerlink" title="熔断条件"></a>熔断条件</h4><p>​        a、请求数目大于设置的最小请求数目；</p><p>​        b、慢调用的比例大于阈值。</p><h4 id="1-8-升级内容"><a href="#1-8-升级内容" class="headerlink" title="1.8 升级内容"></a>1.8 升级内容</h4><p>​            Sentinel在1.8.0版本对熔断降级做了大的调整，可以定义任意时长的熔断时间，引入了半开启恢复支持。熔断状态由原来只有OPEN、CLOSED两种状态修改为OPEN、HALF_OPEN、CLOSED三种状态</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607957908820.png" alt="1607957908820"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607957790395.png" alt="1607957790395"></p><p>​        1.7.0版本中的RT对应1.8.0版本中的最大RT，1.7.0版本中的时间窗口对应1.8.0版本中的熔断时长，1.7.0版本中的最小请求数固定是5，而对应1.8.0版本中的最小请求数可以进行自定义，1.8.0版本中新增比例阈值，具体属性定义在下表：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607957994736.png" alt="1607957994736"></p><h4 id="执行逻辑"><a href="#执行逻辑" class="headerlink" title="执行逻辑"></a>执行逻辑</h4><p>​        <strong>a、熔断（OPEN）：请求数大于最小请求数并且慢调用的比率大于比例阈值则发生熔断</strong>，熔断时长为用户自定义设置；</p><p>​        <strong>b、探测（HALFOPEN）</strong>：当熔断过了定义的熔断时长，状态由熔断（OPEN）变为探测（HALFOPEN）；</p><p>​        c、如果接下来的一个请求小于最大RT，说明慢调用已经恢复，结束熔断，状态由探测（HALF_OPEN）变更为关闭（CLOSED）；</p><p>​        d、如果接下来的一个请求大于最大RT，说明慢调用未恢复，继续熔断，熔断时长保持一致。</p><p>​        注意：Sentinel默认统计的RT上限是4900ms，超出此阈值的都会算作4900ms，若需要变更此上限可以通过启动配置项-Dcsp.sentinel.statistic.max.rt=xxx来配置。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>​        a、添加测试代码   /testC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testC&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">&quot;...testC!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;---/testC&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        b、添加降级配置</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607960194780.png" alt="1607960194780"></p><p>​        当前配置的规则是：允许每个请求消耗的最长时间为200毫秒，当超过时认定为慢调用，当每秒最小请求数大于5，且慢调用比例大于80%时，接下来1秒钟熔断，由于我们在测试方法中设置了等待1秒钟，所以所有请求都是慢调用，所以我们再进行请求时会触发熔断。</p><p>​        我们使用Jmeter来模拟调用【每秒请求10次】</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607960486159.png" alt="1607960486159"></p><p>​        我们可以看到当Jmeter开始启动时，由于每次请求都是超时（超过80%）且每秒请求数为10，符合慢调用熔断的规则，所以我们的接口就被熔断了，当关闭Jmeter测试后，我们再访问接口，请求成功。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607960562938.png" alt="1607960562938"></p><h3 id="异常比例-ERROR-RATIO"><a href="#异常比例-ERROR-RATIO" class="headerlink" title="异常比例 (ERROR_RATIO)"></a><strong>异常比例 (ERROR_RATIO)</strong></h3><p>​        当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</p><h4 id="熔断条件-1"><a href="#熔断条件-1" class="headerlink" title="熔断条件"></a>熔断条件</h4><p>​        a、请求数目大于设置的最小请求数目；</p><p>​        b、异常调用的比例大于阈值。</p><h4 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607961669359.png" alt="1607961669359"></p><h4 id="执行逻辑-1"><a href="#执行逻辑-1" class="headerlink" title="执行逻辑"></a>执行逻辑</h4><p>​        <strong>a、熔断（OPEN）：当请求数大于最小请求并且异常比例大于设置的阈值时触发熔断</strong>，熔断时长由用户设置；</p><p>​        <strong>b、探测（HALFOPEN）</strong>：当超过熔断时长时，由熔断（OPEN）转为探测（HALFOPEN）；</p><p>​        c、如果接下来的一个请求未发生错误，说明应用恢复，结束熔断，状态由探测（HALF_OPEN）变更为关闭（CLOSED）；</p><p>​        d、如果接下来的一个请求继续发生错误，说明应用未恢复，继续熔断，熔断时长保持一致。</p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>​        a、添加测试代码   /testD</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testD&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>; </span><br><span class="line">        logger.info(<span class="string">&quot;  ...testD!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;---/testD&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        b、添加降级配置</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607962634855.png" alt="1607962634855"></p><p>​        当前的规则是：允许所有请求的异常比例为30%，当超过时认定为异常接口，当每秒最小请求数大于5，且异常比例大于30%时，接下来5秒钟熔断，由于我们在测试方法中设置了by zero的异常，所以所有请求都是异常请求，所以我们再进行请求时会触发熔断。</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607963035797.png" alt="1607963035797"></p><p>​        我们依然使用Jmeter进行测试，测试方法同上。</p><p>​        我们可以看到当Jmeter开始启动时，由于每次请求都是异常（超过30%）且每秒请求数为10，符合异常比例熔断的规则，所以我们的接口就被熔断了，当关闭Jmeter测试后，我们再访问接口，请求成功。且这里测试过，我们的熔断时间为5s，当我们停止Jmeter之后立刻测试接口，接口会返回by zero的异常，这是因为两个条件之中的每秒最小请求数大于5的条件失效了，所以熔断效果不起作用了。</p><h3 id="异常数-ERROR-COUNT"><a href="#异常数-ERROR-COUNT" class="headerlink" title="异常数 (ERROR_COUNT)"></a><strong>异常数 (ERROR_COUNT)</strong></h3><p>​        当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p><h4 id="熔断条件-2"><a href="#熔断条件-2" class="headerlink" title="熔断条件"></a>熔断条件</h4><p>​        a、请求数目大于设置的最小请求数目；</p><p>​        b、异常调用的数目大于阈值。</p><h4 id="配置参数-1"><a href="#配置参数-1" class="headerlink" title="配置参数"></a>配置参数</h4><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1608047548622.png" alt="1608047548622"></p><h4 id="执行逻辑-2"><a href="#执行逻辑-2" class="headerlink" title="执行逻辑"></a>执行逻辑</h4><p>​        <strong>a、熔断（OPEN）：当请求数大于最小请求并且异常数量大于设置的阈值时触发熔断</strong>，熔断时长由用户设置；</p><p>​        <strong>b、探测（HALFOPEN）</strong>：当超过熔断时长时，由熔断（OPEN）转为探测（HALFOPEN）；</p><p>​        c、如果接下来的一个请求未发生错误，说明应用恢复，结束熔断，状态由探测（HALF_OPEN）变更为关闭（CLOSED）；</p><p>​        d、如果接下来的一个请求继续发生错误，说明应用未恢复，继续熔断，熔断时长保持一致。</p><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><p>​        a、测试代码依然使用  /testD</p><p>​        b、添加降级配置</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1608047915674.png" alt="1608047915674"></p><p>​        当前的规则是：在60s内，当达到最小请求数5，且发生异常的请求数大于6个时，发生熔断，由于我们在测试方法中设置了by zero的异常，所以所有请求都是异常请求，所以当我们请求6次后，会触发熔断。</p><p>1-6次返回</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1608048137053.png" alt="1608048137053"></p><p>第7次及之后一分钟内的请求</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1608048142861.png" alt="1608048142861"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloudAlibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sentinel </tag>
            
            <tag> SpringCloudAlibaba </tag>
            
            <tag> 熔断降级 </tag>
            
            <tag> 流量控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache JMeter的介绍和使用</title>
      <link href="/blog/2020/12/13/Apache%20JMeter%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/12/13/Apache%20JMeter%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><font size='6.5px'><strong>Apache JMeter的介绍和使用</strong></font></p><p>​        Apache JMeter是一款纯java编写负载功能测试和性能测试开源工具软件。相比Loadrunner而言，JMeter小巧轻便且免费，逐渐成为了主流的性能测试工具，是每个测试人员都必须要掌握的工具之一。</p><h1 id="JMeter的安装"><a href="#JMeter的安装" class="headerlink" title="JMeter的安装"></a>JMeter的安装</h1><h2 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h2><p>由于JMeter是基于java进行开发，所以需要安装JDK，安装JDK8或以上。</p><h2 id="安装Jmeter"><a href="#安装Jmeter" class="headerlink" title="安装Jmeter"></a>安装Jmeter</h2><h3 id="Jmeter的下载"><a href="#Jmeter的下载" class="headerlink" title="Jmeter的下载"></a>Jmeter的下载</h3><p>下载地址：<a href="https://jmeter.apache.org/download_jmeter.cgi">https://jmeter.apache.org/download_jmeter.cgi</a></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607852531286.png" alt="1607852531286"></p><h3 id="解压安装包，打开安装包bin目录，双击jmeter-bat启动"><a href="#解压安装包，打开安装包bin目录，双击jmeter-bat启动" class="headerlink" title="解压安装包，打开安装包bin目录，双击jmeter.bat启动"></a>解压安装包，打开安装包bin目录，双击jmeter.bat启动</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607853875816.png" alt="1607853875816"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607853902084.png" alt="1607853902084"></p><p>3、设置语言为中文</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607854203203.png" alt="1607854203203"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607854246428.png" alt="1607854246428"></p><h1 id="Jmeter的使用"><a href="#Jmeter的使用" class="headerlink" title="Jmeter的使用"></a>Jmeter的使用</h1><h2 id="创建线程组"><a href="#创建线程组" class="headerlink" title="创建线程组"></a>创建线程组</h2><p>​        右键点击“测试计划” -&gt; “添加” -&gt; “线程（用户）” -&gt; “线程组”</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607854808012.png" alt="1607854808012"></p><p>线程组参数详解： </p><p><strong>线程数</strong>：虚拟用户数。一个虚拟用户占用一个进程或线程。设置多少虚拟用户数在这里也就是设置多少个线程数。 </p><p><strong>Ramp-Up Period(in seconds)准备时长</strong>：设置的虚拟用户数需要多长时间全部启动。如果线程数为10，准备时长为2，那么需要2秒钟启动10个线程，也就是每秒钟启动5个线程。 </p><p><strong>循环次数</strong>：每个线程发送请求的次数。如果线程数为10，循环次数为100，那么每个线程发送100次请求。总请求数为10*100=1000 。如果勾选了“永远”，那么所有线程会一直发送请求，一到选择停止运行脚本。  </p><p><strong>调度器</strong>：设置线程组启动的开始时间和结束时间(配置调度器时，需要勾选循环次数为永远) 。</p><p><strong>持续时间（秒）</strong>：测试持续时间，会覆盖结束时间 。</p><p><strong>启动延迟（秒）</strong>：测试延迟启动时间，会覆盖启动时间 。</p><p><strong>启动时间</strong>：测试启动时间，启动延迟会覆盖它。当启动时间已过，手动只需测试时当前时间也会覆盖它。 </p><p><strong>结束时间</strong>：测试结束时间，持续时间会覆盖它。</p><h2 id="添加请求"><a href="#添加请求" class="headerlink" title="添加请求"></a>添加请求</h2><p>​        右键点击“线程组” -&gt; “添加” -&gt; “Sampler” -&gt; “HTTP请求” </p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607855692886.png" alt="1607855692886"></p><p>​        假设我们的测试接口是：<a href="http://www.baidu.com/s?ie=utf-8&amp;wd=jmeter%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%82%E8%80%83%E4%B8%8B%E5%9B%BE%E5%A1%AB%E5%86%99%EF%BC%9A">http://www.baidu.com/s?ie=utf-8&amp;wd=jmeter性能测试，可以参考下图填写：</a></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607855972981.png" alt="1607855972981"></p><p>Http请求主要参数详解：</p><p><strong>协议</strong>：向目标服务器发送HTTP请求协议，可以是HTTP或HTTPS，默认为HTTP。 </p><p><strong>服务器名称或IP</strong>：HTTP请求发送的目标服务器名称或IP 。</p><p><strong>端口号</strong>：目标服务器的端口号，默认值为80 。</p><p><strong>方法</strong>：发送HTTP请求的方法，可用方法包括GET、POST、HEAD、PUT、OPTIONS、TRACE、DELETE等。 </p><p><strong>路径</strong>：目标URL路径（URL中去掉服务器地址、端口及参数后剩余部分） 。</p><p><strong>Content encoding内容编码</strong> ：编码方式，默认为ISO-8859-1编码，这里配置为utf-8。</p><p><strong>同请求一起发送参数</strong>：在请求中发送的URL参数，用户可以将URL中所有参数设置在本表中，表中每行为一个参数（对应URL中的 name=value），注意参数传入中文时需要勾选“编码”。</p><h2 id="添加察看结果树"><a href="#添加察看结果树" class="headerlink" title="添加察看结果树"></a>添加察看结果树</h2><p>​        右键点击“线程组” -&gt; “添加” -&gt; “监听器” -&gt; “察看结果树” </p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607856632948.png" alt="1607856632948"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607856844503.png" alt="1607856844503"></p><p>​        由于这个页面是一个html页面，所以我们要配置响应数据格式为“HTML Source Formatted”</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607873443952.png" alt="1607873443952"></p><p>​        点击测试开始的按钮，我们可以看到测试了10个数据，返回status都是ok</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607857241735.png" alt="1607857241735"></p><p>​        这样一个jmeter的测试就结束了</p><h2 id="添加自定义变量"><a href="#添加自定义变量" class="headerlink" title="添加自定义变量"></a>添加自定义变量</h2><p>​        我们可以添加用户自定义变量用以Http请求参数化，右键点击“线程组” -&gt; “添加” -&gt; “配置元件” -&gt; “用户定义的变量”：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607857512292.png" alt="1607857512292"></p><h3 id="设置名称为wd，值为Jmeter测试动态变量"><a href="#设置名称为wd，值为Jmeter测试动态变量" class="headerlink" title="设置名称为wd，值为Jmeter测试动态变量"></a>设置名称为wd，值为Jmeter测试动态变量</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607871038056.png" alt="1607871038056"></p><h3 id="http请求的值，使用-wd-来动态获取该变量的值"><a href="#http请求的值，使用-wd-来动态获取该变量的值" class="headerlink" title="http请求的值，使用${wd}来动态获取该变量的值"></a>http请求的值，使用${wd}来动态获取该变量的值</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607871132432.png" alt="1607871132432"></p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607871275266.png" alt="1607871275266"></p><p>​        点击测试，观察结果，返回了我们自定义的搜索词Jmeter测试动态变量，修改成功！</p><h2 id="添加断言结果"><a href="#添加断言结果" class="headerlink" title="添加断言结果"></a>添加断言结果</h2><p>​        上一步测试中如果返回的内容复杂且多，那我们可能要找到的难度就会提高，此时我们可以使用断言结果来进行处理。</p><p>​        右键点击“线程组” -&gt; “添加”-&gt; “断言” -&gt; “响应断言” </p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607871694041.png" alt="1607871694041"></p><h3 id="添加匹配规则为包括，测试模式为我们添加的参数，用-wd-代替，点击保存"><a href="#添加匹配规则为包括，测试模式为我们添加的参数，用-wd-代替，点击保存" class="headerlink" title="添加匹配规则为包括，测试模式为我们添加的参数，用${wd}代替，点击保存"></a>添加匹配规则为包括，测试模式为我们添加的参数，用${wd}代替，点击保存</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607871803267.png" alt="1607871803267"></p><h3 id="添加断言结果-1"><a href="#添加断言结果-1" class="headerlink" title="添加断言结果"></a>添加断言结果</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607871993115.png" alt="1607871993115"></p><p>​        当前的测试规则是，结果包含参数数据则为true</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607873562323.png" alt="1607873562323"></p><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607873130707.png" alt="1607873130707"></p><p>​        点击测试，如果断言结果为true，则不会返回什么内容，如图为成功，如果失败，则会返回如下图展示的内容</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607873228037.png" alt="1607873228037"></p><h2 id="设置动态参数"><a href="#设置动态参数" class="headerlink" title="设置动态参数"></a>设置动态参数</h2><p>​        有时候我们的测试参数不是一成不变的，如果我们需要在测试的时候动态修改参数，则可以进行以下配置。</p><p>​        右键点击“http请求” -&gt; “添加”-&gt; “配置元件” -&gt; “CSV Data Set Config” </p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607873807373.png" alt="1607873807373"></p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607874202732.png" alt="1607874202732"></p><p>​        这里要注意文本保存的编码方式要和设置的文件编码方式一致，否则会出现中文乱码的情况。</p><p>测试：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607874474506.png" alt="1607874474506"></p><h2 id="添加聚合报告"><a href="#添加聚合报告" class="headerlink" title="添加聚合报告"></a>添加聚合报告</h2><p>​        右键点击“线程组” -&gt; “添加” -&gt; “监听器” -&gt; “聚合报告”，用以存放性能测试报告 </p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607875044907.png" alt="1607875044907"></p><p>测试：</p><p><img src="http://cheng_qiwei.gitee.io/blog/img/work/1607875196722.png" alt="1607875196722"></p><p>聚合报告参数详解： </p><p><strong>Label</strong>：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值 ；</p><p><strong>#Samples（样本）</strong>：请求数——表示这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100 ；</p><p> <strong>Average</strong>：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，以Transaction 为单位显示平均响应时间 ；</p><p><strong>Median</strong>：中位数，也就是 50％ 用户的响应时间；</p><p><strong>90% Line</strong>：90％ 用户的响应时间 ；</p><p><strong>Min</strong>：最小响应时间 ；</p><p><strong>Max</strong>：最大响应时间 ；</p><p>**Error%**：错误率——错误请求数/请求总数 ；</p><p><strong>Throughput</strong>：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数 ；</p><p> <strong>KB/Sec</strong>：每秒从服务器端接收到的数据量，相当于LoadRunner中的Throughput/Sec；</p><p>​        一般而言，性能测试中我们需要重点关注的数据有： #Samples 请求数，Average 平均响应时间，Min 最小响应时间，Max 最大响应时间，Error% 错误率及Throughput 吞吐量。</p>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMeter </tag>
            
            <tag> 性能测试 </tag>
            
            <tag> 压力测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
